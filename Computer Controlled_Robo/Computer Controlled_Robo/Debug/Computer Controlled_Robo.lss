
Computer Controlled_Robo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000b30  00000bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080011e  0080011e  00000be2  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00000be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00002d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3f  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002cb  00000000  00000000  0000382f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ec  00000000  00000000  00003afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000041e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033e  00000000  00000000  000043f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bab  00000000  00000000  00004732  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:



void main(void)
{
	Robot = 0xff;
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	c8 b9       	out	0x08, r28	; 8
	UART_Init(9600);
  aa:	60 e8       	ldi	r22, 0x80	; 128
  ac:	75 e2       	ldi	r23, 0x25	; 37
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <UART_Init>

	UART_TxString("Computer controlled Robot!\n\r");
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 16 01 	call	0x22c	; 0x22c <UART_TxString>
	DDRC = 0xff; //making port c output
  be:	c7 b9       	out	0x07, r28	; 7
	//DDRD = 0x00;// inputs

	PORTC = 0xff;
  c0:	c8 b9       	out	0x08, r28	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	91 ee       	ldi	r25, 0xE1	; 225
  c6:	a4 e0       	ldi	r26, 0x04	; 4
  c8:	81 50       	subi	r24, 0x01	; 1
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	a0 40       	sbci	r26, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x22>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x2c>
  d2:	00 00       	nop
		switch(key)

		{
			
			case 'w' :Robot = Forward; UART_TxChar(Robot+0x30);_delay_ms(100); Robot = Stop;break;
			case 's' :Robot = Backward;_delay_ms(100); Robot = Stop;break;
  d4:	09 e0       	ldi	r16, 0x09	; 9

		switch(key)

		{
			
			case 'w' :Robot = Forward; UART_TxChar(Robot+0x30);_delay_ms(100); Robot = Stop;break;
  d6:	16 e0       	ldi	r17, 0x06	; 6
			case 's' :Robot = Backward;_delay_ms(100); Robot = Stop;break;
			case 'a' :Robot = Left;_delay_ms(100);UART_TxChar(Robot+0x30); Robot = Stop;break ;
  d8:	da e0       	ldi	r29, 0x0A	; 10
			case 'd' :Robot = Right;_delay_ms(100); Robot = Stop;break;
  da:	c5 e0       	ldi	r28, 0x05	; 5



	while(1)
	{
		key = UART_RxChar();
  dc:	0e 94 06 01 	call	0x20c	; 0x20c <UART_RxChar>
  e0:	80 93 1e 01 	sts	0x011E, r24
		UART_TxChar(key);
  e4:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
		

		switch(key)
  e8:	80 91 1e 01 	lds	r24, 0x011E
  ec:	84 36       	cpi	r24, 0x64	; 100
  ee:	a9 f1       	breq	.+106    	; 0x15a <main+0xb4>
  f0:	85 36       	cpi	r24, 0x65	; 101
  f2:	18 f4       	brcc	.+6      	; 0xfa <main+0x54>
  f4:	81 36       	cpi	r24, 0x61	; 97
  f6:	e9 f5       	brne	.+122    	; 0x172 <main+0xcc>
  f8:	20 c0       	rjmp	.+64     	; 0x13a <main+0x94>
  fa:	83 37       	cpi	r24, 0x73	; 115
  fc:	91 f0       	breq	.+36     	; 0x122 <main+0x7c>
  fe:	87 37       	cpi	r24, 0x77	; 119
 100:	c1 f5       	brne	.+112    	; 0x172 <main+0xcc>

		{
			
			case 'w' :Robot = Forward; UART_TxChar(Robot+0x30);_delay_ms(100); Robot = Stop;break;
 102:	18 b9       	out	0x08, r17	; 8
 104:	88 b1       	in	r24, 0x08	; 8
 106:	80 5d       	subi	r24, 0xD0	; 208
 108:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	91 ee       	ldi	r25, 0xE1	; 225
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	81 50       	subi	r24, 0x01	; 1
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	a0 40       	sbci	r26, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x6c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x76>
 11c:	00 00       	nop
 11e:	18 b8       	out	0x08, r1	; 8
 120:	dd cf       	rjmp	.-70     	; 0xdc <main+0x36>
			case 's' :Robot = Backward;_delay_ms(100); Robot = Stop;break;
 122:	08 b9       	out	0x08, r16	; 8
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	91 ee       	ldi	r25, 0xE1	; 225
 128:	a4 e0       	ldi	r26, 0x04	; 4
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	a0 40       	sbci	r26, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x84>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x8e>
 134:	00 00       	nop
 136:	18 b8       	out	0x08, r1	; 8
 138:	d1 cf       	rjmp	.-94     	; 0xdc <main+0x36>
			case 'a' :Robot = Left;_delay_ms(100);UART_TxChar(Robot+0x30); Robot = Stop;break ;
 13a:	d8 b9       	out	0x08, r29	; 8
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	91 ee       	ldi	r25, 0xE1	; 225
 140:	a4 e0       	ldi	r26, 0x04	; 4
 142:	81 50       	subi	r24, 0x01	; 1
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	a0 40       	sbci	r26, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x9c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0xa6>
 14c:	00 00       	nop
 14e:	88 b1       	in	r24, 0x08	; 8
 150:	80 5d       	subi	r24, 0xD0	; 208
 152:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
 156:	18 b8       	out	0x08, r1	; 8
 158:	c1 cf       	rjmp	.-126    	; 0xdc <main+0x36>
			case 'd' :Robot = Right;_delay_ms(100); Robot = Stop;break;
 15a:	c8 b9       	out	0x08, r28	; 8
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	91 ee       	ldi	r25, 0xE1	; 225
 160:	a4 e0       	ldi	r26, 0x04	; 4
 162:	81 50       	subi	r24, 0x01	; 1
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	a0 40       	sbci	r26, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0xbc>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xc6>
 16c:	00 00       	nop
 16e:	18 b8       	out	0x08, r1	; 8
 170:	b5 cf       	rjmp	.-150    	; 0xdc <main+0x36>
			
			default:Robot = Stop; break;
 172:	18 b8       	out	0x08, r1	; 8
 174:	b3 cf       	rjmp	.-154    	; 0xdc <main+0x36>

00000176 <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	6b 01       	movw	r12, r22
 180:	7c 01       	movw	r14, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
 182:	dc 01       	movw	r26, r24
 184:	cb 01       	movw	r24, r22
 186:	80 56       	subi	r24, 0x60	; 96
 188:	99 40       	sbci	r25, 0x09	; 9
 18a:	a0 40       	sbci	r26, 0x00	; 0
 18c:	b0 40       	sbci	r27, 0x00	; 0
 18e:	81 3a       	cpi	r24, 0xA1	; 161
 190:	28 eb       	ldi	r18, 0xB8	; 184
 192:	92 07       	cpc	r25, r18
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	a2 07       	cpc	r26, r18
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	b2 07       	cpc	r27, r18
 19c:	08 f5       	brcc	.+66     	; 0x1e0 <UART_SetBaudRate+0x6a>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
 19e:	c7 01       	movw	r24, r14
 1a0:	b6 01       	movw	r22, r12
 1a2:	28 ef       	ldi	r18, 0xF8	; 248
 1a4:	3f ef       	ldi	r19, 0xFF	; 255
 1a6:	4f ef       	ldi	r20, 0xFF	; 255
 1a8:	5f ef       	ldi	r21, 0xFF	; 255
 1aa:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsi3>
 1ae:	60 50       	subi	r22, 0x00	; 0
 1b0:	7c 4d       	sbci	r23, 0xDC	; 220
 1b2:	8b 40       	sbci	r24, 0x0B	; 11
 1b4:	9f 4f       	sbci	r25, 0xFF	; 255
 1b6:	cc 0c       	add	r12, r12
 1b8:	dd 1c       	adc	r13, r13
 1ba:	ee 1c       	adc	r14, r14
 1bc:	ff 1c       	adc	r15, r15
 1be:	cc 0c       	add	r12, r12
 1c0:	dd 1c       	adc	r13, r13
 1c2:	ee 1c       	adc	r14, r14
 1c4:	ff 1c       	adc	r15, r15
 1c6:	a7 01       	movw	r20, r14
 1c8:	96 01       	movw	r18, r12
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	44 1f       	adc	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	44 1f       	adc	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	0e 94 74 05 	call	0xae8	; 0xae8 <__udivmodsi4>
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <UART_SetBaudRate+0x6e>
	}
	else
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
 1e0:	27 e6       	ldi	r18, 0x67	; 103
 1e2:	30 e0       	ldi	r19, 0x00	; 0
	}

	UBRR0L = util_ExtractByte0to8(RegValue);
 1e4:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H = util_ExtractByte8to16(RegValue);
 1e8:	30 93 c5 00 	sts	0x00C5, r19
}
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	08 95       	ret

000001f6 <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSR0B= (1<<RXEN0) | (1<<TXEN0);                  // Enable Receiver and Transmitter
 1f6:	28 e1       	ldi	r18, 0x18	; 24
 1f8:	20 93 c1 00 	sts	0x00C1, r18
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00);   // Asynchronous mode 8-bit data and 1-stop bit
 1fc:	26 e0       	ldi	r18, 0x06	; 6
 1fe:	20 93 c2 00 	sts	0x00C2, r18
	UCSR0A= 0x00;                                   // Clear the UASRT status register
 202:	10 92 c0 00 	sts	0x00C0, r1
	UART_SetBaudRate(var_baudRate_u32);
 206:	0e 94 bb 00 	call	0x176	; 0x176 <UART_SetBaudRate>
}
 20a:	08 95       	ret

0000020c <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSR0A,RXC0));  // Wait till the data is received
 20c:	e0 ec       	ldi	r30, 0xC0	; 192
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	88 23       	and	r24, r24
 214:	ec f7       	brge	.-6      	; 0x210 <UART_RxChar+0x4>
	return(UDR0);                          // return the received char
 216:	80 91 c6 00 	lds	r24, 0x00C6
}
 21a:	08 95       	ret

0000021c <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSR0A,UDRE0)); // Wait till Transmitter(UDR) register becomes Empty
 21c:	e0 ec       	ldi	r30, 0xC0	; 192
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	90 81       	ld	r25, Z
 222:	95 ff       	sbrs	r25, 5
 224:	fd cf       	rjmp	.-6      	; 0x220 <UART_TxChar+0x4>
	UDR0 =var_uartData_u8;                              // Load the data to be transmitted
 226:	80 93 c6 00 	sts	0x00C6, r24
}
 22a:	08 95       	ret

0000022c <UART_TxString>:
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
	while(*ptr_stringPointer_u8)
 232:	88 81       	ld	r24, Y
 234:	88 23       	and	r24, r24
 236:	31 f0       	breq	.+12     	; 0x244 <UART_TxString+0x18>
 * description :This function is used to transmit a NULL terminated string through UART.
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
 238:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr_stringPointer_u8)
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 23a:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
 23e:	89 91       	ld	r24, Y+
 240:	88 23       	and	r24, r24
 242:	d9 f7       	brne	.-10     	; 0x23a <UART_TxString+0xe>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <UART_RxString>:
    if not required then comment UART_TxChar(ch) in the code.
  2.BackSlash is not taken care.
***************************************************************************************************/
#if (Enable_UART_RxString==1)
void UART_RxString(char *ptr_stringPointer_u8)
{
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
	char ch;
	while(1)
	{
		ch=UART_RxChar();    //Receive a char
 252:	0e 94 06 01 	call	0x20c	; 0x20c <UART_RxChar>
 256:	18 2f       	mov	r17, r24
		UART_TxChar(ch);     //Echo back the received char
 258:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>

		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
 25c:	1d 30       	cpi	r17, 0x0D	; 13
 25e:	11 f0       	breq	.+4      	; 0x264 <UART_RxString+0x1a>
 260:	1a 30       	cpi	r17, 0x0A	; 10
 262:	29 f4       	brne	.+10     	; 0x26e <UART_RxString+0x24>
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
 264:	18 82       	st	Y, r1
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
		ptr_stringPointer_u8++;
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	08 95       	ret
		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
 26e:	19 93       	st	Y+, r17
		ptr_stringPointer_u8++;
	}
 270:	f0 cf       	rjmp	.-32     	; 0x252 <UART_RxString+0x8>

00000272 <UART_TxDecimalNumber>:
				2.(12345,6) then 6-digits ie. 012345 will be transmitted
				3.(12345,C_DefaultDigitsToTransmit_U8) then 12345 will be transmitted.
***************************************************************************************************/
#if ((Enable_UART_TxDecimalNumber==1) || (Enable_UART_TxFloatNumber==1))
void UART_TxDecimalNumber(uint32_t var_decNumber_u32, uint8_t var_numOfDigitsToTransmit_u8)
{
 272:	8f 92       	push	r8
 274:	9f 92       	push	r9
 276:	af 92       	push	r10
 278:	bf 92       	push	r11
 27a:	ef 92       	push	r14
 27c:	ff 92       	push	r15
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	2a 97       	sbiw	r28, 0x0a	; 10
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	dc 01       	movw	r26, r24
 298:	cb 01       	movw	r24, r22
 29a:	04 2f       	mov	r16, r20
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	a1 05       	cpc	r26, r1
 2a0:	b1 05       	cpc	r27, r1
 2a2:	19 f0       	breq	.+6      	; 0x2aa <UART_TxDecimalNumber+0x38>
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 2a4:	44 23       	and	r20, r20
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <UART_TxDecimalNumber+0x52>
 2a8:	43 c0       	rjmp	.+134    	; 0x330 <UART_TxDecimalNumber+0xbe>
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 2aa:	44 23       	and	r20, r20
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <UART_TxDecimalNumber+0x3e>
 2ae:	40 c0       	rjmp	.+128    	; 0x330 <UART_TxDecimalNumber+0xbe>
 2b0:	fe 01       	movw	r30, r28
 2b2:	31 96       	adiw	r30, 0x01	; 1
 2b4:	10 e0       	ldi	r17, 0x00	; 0
		   a[i] = 0x00;
 2b6:	11 92       	st	Z+, r1
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 2b8:	1f 5f       	subi	r17, 0xFF	; 255
 2ba:	10 17       	cp	r17, r16
 2bc:	81 f1       	breq	.+96     	; 0x31e <UART_TxDecimalNumber+0xac>
 2be:	1a 30       	cpi	r17, 0x0A	; 10
 2c0:	d1 f7       	brne	.-12     	; 0x2b6 <UART_TxDecimalNumber+0x44>
 2c2:	2d c0       	rjmp	.+90     	; 0x31e <UART_TxDecimalNumber+0xac>
 2c4:	7e 01       	movw	r14, r28
 2c6:	08 94       	sec
 2c8:	e1 1c       	adc	r14, r1
 2ca:	f1 1c       	adc	r15, r1
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 2cc:	10 e0       	ldi	r17, 0x00	; 0
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the remainder and divide the number by 10 each time.
                If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
				The process continues till it becomes zero or max digits reached*/
				a[i]=util_GetMod32(var_decNumber_u32,10);
 2ce:	0f 2e       	mov	r0, r31
 2d0:	fa e0       	ldi	r31, 0x0A	; 10
 2d2:	8f 2e       	mov	r8, r31
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	9f 2e       	mov	r9, r31
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	af 2e       	mov	r10, r31
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	bf 2e       	mov	r11, r31
 2e0:	f0 2d       	mov	r31, r0
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
		{
			/* Continue extracting the digits from right side
			   till the Specified var_numOfDigitsToTransmit_u8 */
			if(var_decNumber_u32!=0)
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	a1 05       	cpc	r26, r1
 2e6:	b1 05       	cpc	r27, r1
 2e8:	69 f0       	breq	.+26     	; 0x304 <UART_TxDecimalNumber+0x92>
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the remainder and divide the number by 10 each time.
                If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
				The process continues till it becomes zero or max digits reached*/
				a[i]=util_GetMod32(var_decNumber_u32,10);
 2ea:	bc 01       	movw	r22, r24
 2ec:	cd 01       	movw	r24, r26
 2ee:	a5 01       	movw	r20, r10
 2f0:	94 01       	movw	r18, r8
 2f2:	0e 94 74 05 	call	0xae8	; 0xae8 <__udivmodsi4>
 2f6:	f7 01       	movw	r30, r14
 2f8:	60 83       	st	Z, r22
				var_decNumber_u32=var_decNumber_u32/10;
 2fa:	82 2f       	mov	r24, r18
 2fc:	93 2f       	mov	r25, r19
 2fe:	a4 2f       	mov	r26, r20
 300:	b5 2f       	mov	r27, r21
 302:	04 c0       	rjmp	.+8      	; 0x30c <UART_TxDecimalNumber+0x9a>
			}
			else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 304:	0b 30       	cpi	r16, 0x0B	; 11
 306:	48 f4       	brcc	.+18     	; 0x31a <UART_TxDecimalNumber+0xa8>
			else
			{
				/*In case user expects more digits to be transmitted than the actual digits in number,
  			    then update the remaining digits with zero.
                Ex: var_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0;
 308:	f7 01       	movw	r30, r14
 30a:	10 82       	st	Z, r1
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 30c:	1f 5f       	subi	r17, 0xFF	; 255
 30e:	08 94       	sec
 310:	e1 1c       	adc	r14, r1
 312:	f1 1c       	adc	r15, r1
 314:	10 17       	cp	r17, r16
 316:	29 f7       	brne	.-54     	; 0x2e2 <UART_TxDecimalNumber+0x70>
 318:	02 c0       	rjmp	.+4      	; 0x31e <UART_TxDecimalNumber+0xac>
				a[i]=0;
			}
		}
	}

	while(i)
 31a:	11 23       	and	r17, r17
 31c:	49 f0       	breq	.+18     	; 0x330 <UART_TxDecimalNumber+0xbe>
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
 31e:	fe 01       	movw	r30, r28
 320:	e1 0f       	add	r30, r17
 322:	f1 1d       	adc	r31, r1
 324:	80 81       	ld	r24, Z
 326:	80 5d       	subi	r24, 0xD0	; 208
 328:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
		i--;
 32c:	11 50       	subi	r17, 0x01	; 1
				a[i]=0;
			}
		}
	}

	while(i)
 32e:	b9 f7       	brne	.-18     	; 0x31e <UART_TxDecimalNumber+0xac>
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
		i--;
	}
}
 330:	2a 96       	adiw	r28, 0x0a	; 10
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	bf 90       	pop	r11
 34a:	af 90       	pop	r10
 34c:	9f 90       	pop	r9
 34e:	8f 90       	pop	r8
 350:	08 95       	ret

00000352 <UART_TxHexNumber>:
				2.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
				3.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.
***************************************************************************************************/
#if (Enable_UART_TxHexNumber==1)
void UART_TxHexNumber(uint32_t var_hexNumber_u32,uint8_t var_numOfDigitsToTransmit_u8)
{
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	2a 97       	sbiw	r28, 0x0a	; 10
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	dc 01       	movw	r26, r24
 36a:	cb 01       	movw	r24, r22
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
 36c:	00 97       	sbiw	r24, 0x00	; 0
 36e:	a1 05       	cpc	r26, r1
 370:	b1 05       	cpc	r27, r1
 372:	19 f0       	breq	.+6      	; 0x37a <UART_TxHexNumber+0x28>
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 374:	44 23       	and	r20, r20
 376:	69 f4       	brne	.+26     	; 0x392 <UART_TxHexNumber+0x40>
 378:	36 c0       	rjmp	.+108    	; 0x3e6 <UART_TxHexNumber+0x94>
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
	{
		/* If the number zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 37a:	44 23       	and	r20, r20
 37c:	a1 f1       	breq	.+104    	; 0x3e6 <UART_TxHexNumber+0x94>
 37e:	fe 01       	movw	r30, r28
 380:	31 96       	adiw	r30, 0x01	; 1
 382:	10 e0       	ldi	r17, 0x00	; 0
		  a[i]=0x00;
 384:	11 92       	st	Z+, r1
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
	{
		/* If the number zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 386:	1f 5f       	subi	r17, 0xFF	; 255
 388:	14 17       	cp	r17, r20
 38a:	01 f1       	breq	.+64     	; 0x3cc <UART_TxHexNumber+0x7a>
 38c:	1a 30       	cpi	r17, 0x0A	; 10
 38e:	d1 f7       	brne	.-12     	; 0x384 <UART_TxHexNumber+0x32>
 390:	1d c0       	rjmp	.+58     	; 0x3cc <UART_TxHexNumber+0x7a>
 392:	fe 01       	movw	r30, r28
 394:	31 96       	adiw	r30, 0x01	; 1
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 396:	10 e0       	ldi	r17, 0x00	; 0
		{
			/* Continue extracting the digits from right side till the Specified var_numOfDigitsToTransmit_u8 */
			if(var_hexNumber_u32!=0)
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	a1 05       	cpc	r26, r1
 39c:	b1 05       	cpc	r27, r1
 39e:	61 f0       	breq	.+24     	; 0x3b8 <UART_TxHexNumber+0x66>
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the lower nibble and shift the number 4 times.
			   If var_number_u32 = 0xABC then extracted digit will be 0x0C and number will become 0xAB.
			   The process continues till it becomes zero or max digits reached*/
				a[i]=(uint8_t)(var_hexNumber_u32 & 0x0f);
 3a0:	28 2f       	mov	r18, r24
 3a2:	2f 70       	andi	r18, 0x0F	; 15
 3a4:	20 83       	st	Z, r18
				var_hexNumber_u32=var_hexNumber_u32 >> 4;
 3a6:	68 94       	set
 3a8:	13 f8       	bld	r1, 3
 3aa:	b6 95       	lsr	r27
 3ac:	a7 95       	ror	r26
 3ae:	97 95       	ror	r25
 3b0:	87 95       	ror	r24
 3b2:	16 94       	lsr	r1
 3b4:	d1 f7       	brne	.-12     	; 0x3aa <UART_TxHexNumber+0x58>
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <UART_TxHexNumber+0x6c>
			}
			else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 3b8:	4b 30       	cpi	r20, 0x0B	; 11
 3ba:	30 f4       	brcc	.+12     	; 0x3c8 <UART_TxHexNumber+0x76>
			else
			{
				/* In case user expects more digits to be transmitted than the actual digits in number,
  			           then update the remaining digits with zero.
                Ex: var_number_u32 is 0x123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0x00;
 3bc:	10 82       	st	Z, r1
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 3be:	1f 5f       	subi	r17, 0xFF	; 255
 3c0:	31 96       	adiw	r30, 0x01	; 1
 3c2:	14 17       	cp	r17, r20
 3c4:	49 f7       	brne	.-46     	; 0x398 <UART_TxHexNumber+0x46>
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <UART_TxHexNumber+0x7a>
				a[i]=0x00;
			}
		}
	}

	while(i!=0)
 3c8:	11 23       	and	r17, r17
 3ca:	69 f0       	breq	.+26     	; 0x3e6 <UART_TxHexNumber+0x94>
	{
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Hex2Ascii(a[i-1]));
 3cc:	fe 01       	movw	r30, r28
 3ce:	e1 0f       	add	r30, r17
 3d0:	f1 1d       	adc	r31, r1
 3d2:	80 81       	ld	r24, Z
 3d4:	8a 30       	cpi	r24, 0x0A	; 10
 3d6:	10 f0       	brcs	.+4      	; 0x3dc <UART_TxHexNumber+0x8a>
 3d8:	89 5c       	subi	r24, 0xC9	; 201
 3da:	01 c0       	rjmp	.+2      	; 0x3de <UART_TxHexNumber+0x8c>
 3dc:	80 5d       	subi	r24, 0xD0	; 208
 3de:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
		i--;
 3e2:	11 50       	subi	r17, 0x01	; 1
				a[i]=0x00;
			}
		}
	}

	while(i!=0)
 3e4:	99 f7       	brne	.-26     	; 0x3cc <UART_TxHexNumber+0x7a>
	{
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Hex2Ascii(a[i-1]));
		i--;
	}
}
 3e6:	2a 96       	adiw	r28, 0x0a	; 10
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	08 95       	ret

000003fa <UART_TxBinaryNumber>:
				2.(10,8) then 8-LSB will be transmitted ie. 00001010
				3.(10,2) then 2-LSB will be transmitted ie. 10
***************************************************************************************************/
#if (Enable_UART_TxBinaryNumber==1)
void UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
{
 3fa:	bf 92       	push	r11
 3fc:	cf 92       	push	r12
 3fe:	df 92       	push	r13
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	6b 01       	movw	r12, r22
 40e:	7c 01       	movw	r14, r24
 410:	c4 2f       	mov	r28, r20
	uint8_t ch;

	while(var_numOfBitsToTransmit_u8!=0)
 412:	44 23       	and	r20, r20
 414:	19 f1       	breq	.+70     	; 0x45c <UART_TxBinaryNumber+0x62>
	{
		/* Start Extracting the bits from the specified bit positions.
	     Get the Acsii values of the bits and transmit */
		ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToTransmit_u8-1));
 416:	01 e0       	ldi	r16, 0x01	; 1
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	d1 e0       	ldi	r29, 0x01	; 1
 41c:	bb 24       	eor	r11, r11
 41e:	4c 2f       	mov	r20, r28
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	41 50       	subi	r20, 0x01	; 1
 424:	50 40       	sbci	r21, 0x00	; 0
 426:	c8 01       	movw	r24, r16
 428:	02 c0       	rjmp	.+4      	; 0x42e <UART_TxBinaryNumber+0x34>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	4a 95       	dec	r20
 430:	e2 f7       	brpl	.-8      	; 0x42a <UART_TxBinaryNumber+0x30>
 432:	ac 01       	movw	r20, r24
 434:	66 27       	eor	r22, r22
 436:	57 fd       	sbrc	r21, 7
 438:	60 95       	com	r22
 43a:	76 2f       	mov	r23, r22
 43c:	4c 21       	and	r20, r12
 43e:	5d 21       	and	r21, r13
 440:	6e 21       	and	r22, r14
 442:	7f 21       	and	r23, r15
 444:	8d 2f       	mov	r24, r29
 446:	41 15       	cp	r20, r1
 448:	51 05       	cpc	r21, r1
 44a:	61 05       	cpc	r22, r1
 44c:	71 05       	cpc	r23, r1
 44e:	09 f4       	brne	.+2      	; 0x452 <UART_TxBinaryNumber+0x58>
 450:	8b 2d       	mov	r24, r11
		UART_TxChar(util_Dec2Ascii(ch));
 452:	80 5d       	subi	r24, 0xD0	; 208
 454:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
		var_numOfBitsToTransmit_u8--;
 458:	c1 50       	subi	r28, 0x01	; 1
#if (Enable_UART_TxBinaryNumber==1)
void UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
{
	uint8_t ch;

	while(var_numOfBitsToTransmit_u8!=0)
 45a:	09 f7       	brne	.-62     	; 0x41e <UART_TxBinaryNumber+0x24>
	     Get the Acsii values of the bits and transmit */
		ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToTransmit_u8-1));
		UART_TxChar(util_Dec2Ascii(ch));
		var_numOfBitsToTransmit_u8--;
	}
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	df 90       	pop	r13
 46a:	cf 90       	pop	r12
 46c:	bf 90       	pop	r11
 46e:	08 95       	ret

00000470 <UART_TxFloatNumber>:
         Float will be disabled by default as it takes huge controller resources
	     It can be enabled by changing value of Enable_UART_TxFloatNumber to 1 in uart.h	 
 ***************************************************************************************************/
#if (Enable_UART_TxFloatNumber==1)
void UART_TxFloatNumber(float var_floatNumber_f32)
{
 470:	cf 92       	push	r12
 472:	df 92       	push	r13
 474:	ef 92       	push	r14
 476:	ff 92       	push	r15
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	6b 01       	movw	r12, r22
 482:	7c 01       	movw	r14, r24
      1.Type cast the number to int to get the integer part.
	  2.transmit the extracted integer part followed by a decimal point(.).
	  3.Later the integer part is made zero by subtracting with the extracted integer value.
	  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

	var_tempNumber_u32 = (uint32_t) var_floatNumber_f32;
 484:	0e 94 38 04 	call	0x870	; 0x870 <__fixunssfsi>
 488:	06 2f       	mov	r16, r22
 48a:	17 2f       	mov	r17, r23
 48c:	d8 2f       	mov	r29, r24
 48e:	c9 2f       	mov	r28, r25
	UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 490:	4f ef       	ldi	r20, 0xFF	; 255
 492:	0e 94 39 01 	call	0x272	; 0x272 <UART_TxDecimalNumber>

	UART_TxChar('.');
 496:	8e e2       	ldi	r24, 0x2E	; 46
 498:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>

	var_floatNumber_f32 = var_floatNumber_f32 - var_tempNumber_u32;
 49c:	60 2f       	mov	r22, r16
 49e:	71 2f       	mov	r23, r17
 4a0:	8d 2f       	mov	r24, r29
 4a2:	9c 2f       	mov	r25, r28
 4a4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__floatunsisf>
 4a8:	9b 01       	movw	r18, r22
 4aa:	ac 01       	movw	r20, r24
 4ac:	c7 01       	movw	r24, r14
 4ae:	b6 01       	movw	r22, r12
 4b0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__subsf3>
	var_tempNumber_u32 = var_floatNumber_f32 * 1000000;
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	34 e2       	ldi	r19, 0x24	; 36
 4b8:	44 e7       	ldi	r20, 0x74	; 116
 4ba:	59 e4       	ldi	r21, 0x49	; 73
 4bc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 4c0:	46 2f       	mov	r20, r22
 4c2:	57 2f       	mov	r21, r23
 4c4:	68 2f       	mov	r22, r24
 4c6:	79 2f       	mov	r23, r25
 4c8:	cb 01       	movw	r24, r22
 4ca:	ba 01       	movw	r22, r20
 4cc:	0e 94 38 04 	call	0x870	; 0x870 <__fixunssfsi>
	UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 4d0:	4f ef       	ldi	r20, 0xFF	; 255
 4d2:	0e 94 39 01 	call	0x272	; 0x272 <UART_TxDecimalNumber>
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	df 90       	pop	r13
 4e4:	cf 90       	pop	r12
 4e6:	08 95       	ret

000004e8 <UART_Printf>:
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
{
 4e8:	5f 92       	push	r5
 4ea:	6f 92       	push	r6
 4ec:	7f 92       	push	r7
 4ee:	8f 92       	push	r8
 4f0:	9f 92       	push	r9
 4f2:	af 92       	push	r10
 4f4:	bf 92       	push	r11
 4f6:	cf 92       	push	r12
 4f8:	df 92       	push	r13
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	0f 2e       	mov	r0, r31
 50c:	f2 e1       	ldi	r31, 0x12	; 18
 50e:	cf 2e       	mov	r12, r31
 510:	dd 24       	eor	r13, r13
 512:	f0 2d       	mov	r31, r0
 514:	cc 0e       	add	r12, r28
 516:	dd 1e       	adc	r13, r29
 518:	d6 01       	movw	r26, r12
 51a:	ed 91       	ld	r30, X+
 51c:	fd 91       	ld	r31, X+
 51e:	6d 01       	movw	r12, r26
	uint8_t var_numOfDigitsToTransmit_u8;

	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 520:	80 81       	ld	r24, Z
 522:	88 23       	and	r24, r24
 524:	09 f4       	brne	.+2      	; 0x528 <UART_Printf+0x40>
 526:	2f c1       	rjmp	.+606    	; 0x786 <UART_Printf+0x29e>
 528:	8f 01       	movw	r16, r30
			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;
 52a:	55 24       	eor	r5, r5
 52c:	68 94       	set
 52e:	54 f8       	bld	r5, 4
				   ch = *ptr;
				}
			}
			else
			{
			  var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 530:	99 24       	eor	r9, r9
 532:	9a 94       	dec	r9
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
 534:	88 24       	eor	r8, r8
	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
	{

		ch= *ptr;
		if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 536:	85 32       	cpi	r24, 0x25	; 37
 538:	09 f0       	breq	.+2      	; 0x53c <UART_Printf+0x54>
 53a:	18 c1       	rjmp	.+560    	; 0x76c <UART_Printf+0x284>
		{
		    ptr++;
 53c:	58 01       	movw	r10, r16
 53e:	08 94       	sec
 540:	a1 1c       	adc	r10, r1
 542:	b1 1c       	adc	r11, r1
		    ch = *ptr;
 544:	f8 01       	movw	r30, r16
 546:	81 81       	ldd	r24, Z+1	; 0x01
		   if((ch>=0x30) && (ch<=0x39))
 548:	98 2f       	mov	r25, r24
 54a:	90 53       	subi	r25, 0x30	; 48
 54c:	9a 30       	cpi	r25, 0x0A	; 10
 54e:	80 f4       	brcc	.+32     	; 0x570 <UART_Printf+0x88>
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
 550:	32 96       	adiw	r30, 0x02	; 2
 552:	18 2d       	mov	r17, r8
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   var_numOfDigitsToTransmit_u8 = (var_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 554:	11 0f       	add	r17, r17
 556:	91 2f       	mov	r25, r17
 558:	99 0f       	add	r25, r25
 55a:	99 0f       	add	r25, r25
 55c:	19 0f       	add	r17, r25
 55e:	80 53       	subi	r24, 0x30	; 48
 560:	18 0f       	add	r17, r24
				   ptr++;
 562:	5f 01       	movw	r10, r30
				   ch = *ptr;
 564:	81 91       	ld	r24, Z+
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
 566:	98 2f       	mov	r25, r24
 568:	90 53       	subi	r25, 0x30	; 48
 56a:	9a 30       	cpi	r25, 0x0A	; 10
 56c:	98 f3       	brcs	.-26     	; 0x554 <UART_Printf+0x6c>
 56e:	01 c0       	rjmp	.+2      	; 0x572 <UART_Printf+0x8a>
				   ch = *ptr;
				}
			}
			else
			{
			  var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 570:	19 2d       	mov	r17, r9
			}				


			switch(ch)       /* Decode the type of the argument */
 572:	88 35       	cpi	r24, 0x58	; 88
 574:	09 f4       	brne	.+2      	; 0x578 <UART_Printf+0x90>
 576:	a8 c0       	rjmp	.+336    	; 0x6c8 <UART_Printf+0x1e0>
 578:	89 35       	cpi	r24, 0x59	; 89
 57a:	c0 f4       	brcc	.+48     	; 0x5ac <UART_Printf+0xc4>
 57c:	84 34       	cpi	r24, 0x44	; 68
 57e:	09 f4       	brne	.+2      	; 0x582 <UART_Printf+0x9a>
 580:	51 c0       	rjmp	.+162    	; 0x624 <UART_Printf+0x13c>
 582:	85 34       	cpi	r24, 0x45	; 69
 584:	48 f4       	brcc	.+18     	; 0x598 <UART_Printf+0xb0>
 586:	82 34       	cpi	r24, 0x42	; 66
 588:	09 f4       	brne	.+2      	; 0x58c <UART_Printf+0xa4>
 58a:	c2 c0       	rjmp	.+388    	; 0x710 <UART_Printf+0x228>
 58c:	83 34       	cpi	r24, 0x43	; 67
 58e:	28 f5       	brcc	.+74     	; 0x5da <UART_Printf+0xf2>
 590:	85 32       	cpi	r24, 0x25	; 37
 592:	09 f0       	breq	.+2      	; 0x596 <UART_Printf+0xae>
 594:	ee c0       	rjmp	.+476    	; 0x772 <UART_Printf+0x28a>
 596:	e6 c0       	rjmp	.+460    	; 0x764 <UART_Printf+0x27c>
 598:	83 35       	cpi	r24, 0x53	; 83
 59a:	09 f4       	brne	.+2      	; 0x59e <UART_Printf+0xb6>
 59c:	d9 c0       	rjmp	.+434    	; 0x750 <UART_Printf+0x268>
 59e:	85 35       	cpi	r24, 0x55	; 85
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <UART_Printf+0xbc>
 5a2:	71 c0       	rjmp	.+226    	; 0x686 <UART_Printf+0x19e>
 5a4:	86 34       	cpi	r24, 0x46	; 70
 5a6:	09 f0       	breq	.+2      	; 0x5aa <UART_Printf+0xc2>
 5a8:	e4 c0       	rjmp	.+456    	; 0x772 <UART_Printf+0x28a>
 5aa:	c6 c0       	rjmp	.+396    	; 0x738 <UART_Printf+0x250>
 5ac:	86 36       	cpi	r24, 0x66	; 102
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <UART_Printf+0xca>
 5b0:	c3 c0       	rjmp	.+390    	; 0x738 <UART_Printf+0x250>
 5b2:	87 36       	cpi	r24, 0x67	; 103
 5b4:	40 f4       	brcc	.+16     	; 0x5c6 <UART_Printf+0xde>
 5b6:	83 36       	cpi	r24, 0x63	; 99
 5b8:	81 f0       	breq	.+32     	; 0x5da <UART_Printf+0xf2>
 5ba:	84 36       	cpi	r24, 0x64	; 100
 5bc:	b9 f0       	breq	.+46     	; 0x5ec <UART_Printf+0x104>
 5be:	82 36       	cpi	r24, 0x62	; 98
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <UART_Printf+0xdc>
 5c2:	d7 c0       	rjmp	.+430    	; 0x772 <UART_Printf+0x28a>
 5c4:	91 c0       	rjmp	.+290    	; 0x6e8 <UART_Printf+0x200>
 5c6:	85 37       	cpi	r24, 0x75	; 117
 5c8:	09 f4       	brne	.+2      	; 0x5cc <UART_Printf+0xe4>
 5ca:	4c c0       	rjmp	.+152    	; 0x664 <UART_Printf+0x17c>
 5cc:	88 37       	cpi	r24, 0x78	; 120
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <UART_Printf+0xea>
 5d0:	6a c0       	rjmp	.+212    	; 0x6a6 <UART_Printf+0x1be>
 5d2:	83 37       	cpi	r24, 0x73	; 115
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <UART_Printf+0xf0>
 5d6:	cd c0       	rjmp	.+410    	; 0x772 <UART_Printf+0x28a>
 5d8:	bb c0       	rjmp	.+374    	; 0x750 <UART_Printf+0x268>
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 5da:	86 01       	movw	r16, r12
 5dc:	0e 5f       	subi	r16, 0xFE	; 254
 5de:	1f 4f       	sbci	r17, 0xFF	; 255
				UART_TxChar(ch);
 5e0:	d6 01       	movw	r26, r12
 5e2:	8c 91       	ld	r24, X
 5e4:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>

			switch(ch)       /* Decode the type of the argument */
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 5e8:	68 01       	movw	r12, r16
				UART_TxChar(ch);
				break;
 5ea:	c3 c0       	rjmp	.+390    	; 0x772 <UART_Printf+0x28a>

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 5ec:	ee 24       	eor	r14, r14
 5ee:	ff 24       	eor	r15, r15
 5f0:	68 94       	set
 5f2:	e1 f8       	bld	r14, 1
 5f4:	ec 0c       	add	r14, r12
 5f6:	fd 1c       	adc	r15, r13
 5f8:	f6 01       	movw	r30, r12
 5fa:	c0 80       	ld	r12, Z
 5fc:	d1 80       	ldd	r13, Z+1	; 0x01
#if (Enable_UART_TxDecimalNumber == 1)
				if(var_num_s16<0)
 5fe:	dd 20       	and	r13, r13
 600:	3c f4       	brge	.+14     	; 0x610 <UART_Printf+0x128>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   var_num_s16 = -var_num_s16;
 602:	d0 94       	com	r13
 604:	c1 94       	neg	r12
 606:	d1 08       	sbc	r13, r1
 608:	d3 94       	inc	r13
				   UART_TxChar('-');
 60a:	8d e2       	ldi	r24, 0x2D	; 45
 60c:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
				 }
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
 610:	b6 01       	movw	r22, r12
 612:	88 27       	eor	r24, r24
 614:	77 fd       	sbrc	r23, 7
 616:	80 95       	com	r24
 618:	98 2f       	mov	r25, r24
 61a:	41 2f       	mov	r20, r17
 61c:	0e 94 39 01 	call	0x272	; 0x272 <UART_TxDecimalNumber>
				ch = va_arg(argp, uint16_t);
				UART_TxChar(ch);
				break;

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 620:	67 01       	movw	r12, r14
				   var_num_s16 = -var_num_s16;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
#endif
				break;
 622:	a7 c0       	rjmp	.+334    	; 0x772 <UART_Printf+0x28a>
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 624:	66 24       	eor	r6, r6
 626:	77 24       	eor	r7, r7
 628:	68 94       	set
 62a:	62 f8       	bld	r6, 2
 62c:	6c 0c       	add	r6, r12
 62e:	7d 1c       	adc	r7, r13
 630:	d6 01       	movw	r26, r12
 632:	cd 90       	ld	r12, X+
 634:	dd 90       	ld	r13, X+
 636:	ed 90       	ld	r14, X+
 638:	fc 90       	ld	r15, X
 63a:	13 97       	sbiw	r26, 0x03	; 3
#if (Enable_UART_TxDecimalNumber == 1)				
				if(var_num_s32<0)
 63c:	ff 20       	and	r15, r15
 63e:	5c f4       	brge	.+22     	; 0x656 <UART_Printf+0x16e>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   var_num_s32 = -var_num_s32;
 640:	f0 94       	com	r15
 642:	e0 94       	com	r14
 644:	d0 94       	com	r13
 646:	c0 94       	com	r12
 648:	c1 1c       	adc	r12, r1
 64a:	d1 1c       	adc	r13, r1
 64c:	e1 1c       	adc	r14, r1
 64e:	f1 1c       	adc	r15, r1
				   UART_TxChar('-');
 650:	8d e2       	ldi	r24, 0x2D	; 45
 652:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
				 }
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
 656:	c7 01       	movw	r24, r14
 658:	b6 01       	movw	r22, r12
 65a:	41 2f       	mov	r20, r17
 65c:	0e 94 39 01 	call	0x272	; 0x272 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
#endif
				break;
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 660:	63 01       	movw	r12, r6
				   var_num_s32 = -var_num_s32;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
#endif				
				break;	
 662:	87 c0       	rjmp	.+270    	; 0x772 <UART_Printf+0x28a>

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				var_num_u16 = va_arg(argp, uint16_t);
 664:	ee 24       	eor	r14, r14
 666:	ff 24       	eor	r15, r15
 668:	68 94       	set
 66a:	e1 f8       	bld	r14, 1
 66c:	ec 0c       	add	r14, r12
 66e:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 670:	f6 01       	movw	r30, r12
 672:	80 81       	ld	r24, Z
 674:	91 81       	ldd	r25, Z+1	; 0x01
 676:	bc 01       	movw	r22, r24
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	41 2f       	mov	r20, r17
 67e:	0e 94 39 01 	call	0x272	; 0x272 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
#endif				
				break;	

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				var_num_u16 = va_arg(argp, uint16_t);
 682:	67 01       	movw	r12, r14
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 684:	76 c0       	rjmp	.+236    	; 0x772 <UART_Printf+0x28a>
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				var_num_u32 = va_arg(argp, uint32_t);
 686:	ee 24       	eor	r14, r14
 688:	ff 24       	eor	r15, r15
 68a:	68 94       	set
 68c:	e2 f8       	bld	r14, 2
 68e:	ec 0c       	add	r14, r12
 690:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 692:	d6 01       	movw	r26, r12
 694:	6d 91       	ld	r22, X+
 696:	7d 91       	ld	r23, X+
 698:	8d 91       	ld	r24, X+
 69a:	9c 91       	ld	r25, X
 69c:	41 2f       	mov	r20, r17
 69e:	0e 94 39 01 	call	0x272	; 0x272 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				var_num_u32 = va_arg(argp, uint32_t);
 6a2:	67 01       	movw	r12, r14
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;			
 6a4:	66 c0       	rjmp	.+204    	; 0x772 <UART_Printf+0x28a>

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u16 = va_arg(argp, uint16_t);
 6a6:	ee 24       	eor	r14, r14
 6a8:	ff 24       	eor	r15, r15
 6aa:	68 94       	set
 6ac:	e1 f8       	bld	r14, 1
 6ae:	ec 0c       	add	r14, r12
 6b0:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxHexNumber == 1)				
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 6b2:	f6 01       	movw	r30, r12
 6b4:	80 81       	ld	r24, Z
 6b6:	91 81       	ldd	r25, Z+1	; 0x01
 6b8:	bc 01       	movw	r22, r24
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	41 2f       	mov	r20, r17
 6c0:	0e 94 a9 01 	call	0x352	; 0x352 <UART_TxHexNumber>
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;			

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u16 = va_arg(argp, uint16_t);
 6c4:	67 01       	movw	r12, r14
#if (Enable_UART_TxHexNumber == 1)				
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 6c6:	55 c0       	rjmp	.+170    	; 0x772 <UART_Printf+0x28a>

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u32 = va_arg(argp, uint32_t);
 6c8:	ee 24       	eor	r14, r14
 6ca:	ff 24       	eor	r15, r15
 6cc:	68 94       	set
 6ce:	e2 f8       	bld	r14, 2
 6d0:	ec 0c       	add	r14, r12
 6d2:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxHexNumber == 1)						
				UART_TxHexNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 6d4:	d6 01       	movw	r26, r12
 6d6:	6d 91       	ld	r22, X+
 6d8:	7d 91       	ld	r23, X+
 6da:	8d 91       	ld	r24, X+
 6dc:	9c 91       	ld	r25, X
 6de:	41 2f       	mov	r20, r17
 6e0:	0e 94 a9 01 	call	0x352	; 0x352 <UART_TxHexNumber>
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u32 = va_arg(argp, uint32_t);
 6e4:	67 01       	movw	r12, r14
#if (Enable_UART_TxHexNumber == 1)						
				UART_TxHexNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 6e6:	45 c0       	rjmp	.+138    	; 0x772 <UART_Printf+0x28a>

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
 6e8:	ee 24       	eor	r14, r14
 6ea:	ff 24       	eor	r15, r15
 6ec:	68 94       	set
 6ee:	e1 f8       	bld	r14, 1
 6f0:	ec 0c       	add	r14, r12
 6f2:	fd 1c       	adc	r15, r13
 6f4:	f6 01       	movw	r30, r12
 6f6:	80 81       	ld	r24, Z
 6f8:	91 81       	ldd	r25, Z+1	; 0x01
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 6fa:	1f 3f       	cpi	r17, 0xFF	; 255
 6fc:	09 f4       	brne	.+2      	; 0x700 <UART_Printf+0x218>
				   var_numOfDigitsToTransmit_u8 = 16;
 6fe:	15 2d       	mov	r17, r5
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 700:	bc 01       	movw	r22, r24
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	41 2f       	mov	r20, r17
 708:	0e 94 fd 01 	call	0x3fa	; 0x3fa <UART_TxBinaryNumber>
#endif				
				break;

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
 70c:	67 01       	movw	r12, r14
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 70e:	31 c0       	rjmp	.+98     	; 0x772 <UART_Printf+0x28a>

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u32 = va_arg(argp, uint32_t);
 710:	ee 24       	eor	r14, r14
 712:	ff 24       	eor	r15, r15
 714:	68 94       	set
 716:	e2 f8       	bld	r14, 2
 718:	ec 0c       	add	r14, r12
 71a:	fd 1c       	adc	r15, r13
 71c:	d6 01       	movw	r26, r12
 71e:	6d 91       	ld	r22, X+
 720:	7d 91       	ld	r23, X+
 722:	8d 91       	ld	r24, X+
 724:	9c 91       	ld	r25, X
 726:	13 97       	sbiw	r26, 0x03	; 3
#if (Enable_UART_TxBinaryNumber == 1)				
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 728:	1f 3f       	cpi	r17, 0xFF	; 255
 72a:	09 f4       	brne	.+2      	; 0x72e <UART_Printf+0x246>
				   var_numOfDigitsToTransmit_u8 = 16;				
 72c:	15 2d       	mov	r17, r5
				UART_TxBinaryNumber(var_num_u32,var_numOfDigitsToTransmit_u8);	
 72e:	41 2f       	mov	r20, r17
 730:	0e 94 fd 01 	call	0x3fa	; 0x3fa <UART_TxBinaryNumber>
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u32 = va_arg(argp, uint32_t);
 734:	67 01       	movw	r12, r14
#if (Enable_UART_TxBinaryNumber == 1)				
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;				
				UART_TxBinaryNumber(var_num_u32,var_numOfDigitsToTransmit_u8);	
#endif				
				break;
 736:	1d c0       	rjmp	.+58     	; 0x772 <UART_Printf+0x28a>

			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
				var_floatNum_f32 = va_arg(argp, double);
 738:	86 01       	movw	r16, r12
 73a:	0c 5f       	subi	r16, 0xFC	; 252
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
#if (Enable_UART_TxFloatNumber == 1)				
				UART_TxFloatNumber(var_floatNum_f32);
 73e:	f6 01       	movw	r30, r12
 740:	60 81       	ld	r22, Z
 742:	71 81       	ldd	r23, Z+1	; 0x01
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	93 81       	ldd	r25, Z+3	; 0x03
 748:	0e 94 38 02 	call	0x470	; 0x470 <UART_TxFloatNumber>
#endif				
				break;

			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
				var_floatNum_f32 = va_arg(argp, double);
 74c:	68 01       	movw	r12, r16
#if (Enable_UART_TxFloatNumber == 1)				
				UART_TxFloatNumber(var_floatNum_f32);
#endif
				break;
 74e:	11 c0       	rjmp	.+34     	; 0x772 <UART_Printf+0x28a>


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
 750:	f6 01       	movw	r30, r12
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	c8 0e       	add	r12, r24
 758:	d9 1e       	adc	r13, r25
#if (Enable_UART_TxString == 1)
				UART_TxString(str);
 75a:	80 81       	ld	r24, Z
 75c:	91 81       	ldd	r25, Z+1	; 0x01
 75e:	0e 94 16 01 	call	0x22c	; 0x22c <UART_TxString>
#endif				
				break;
 762:	07 c0       	rjmp	.+14     	; 0x772 <UART_Printf+0x28a>

			case '%':
				UART_TxChar('%');
 764:	85 e2       	ldi	r24, 0x25	; 37
 766:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
				break;
 76a:	03 c0       	rjmp	.+6      	; 0x772 <UART_Printf+0x28a>
			}
		}
		else
		{
			/* As '%' is not detected transmit the char passed */
			UART_TxChar(ch);
 76c:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_TxChar>
 770:	58 01       	movw	r10, r16
	uint8_t var_numOfDigitsToTransmit_u8;

	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 772:	85 01       	movw	r16, r10
 774:	0f 5f       	subi	r16, 0xFF	; 255
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	d5 01       	movw	r26, r10
 77a:	11 96       	adiw	r26, 0x01	; 1
 77c:	8c 91       	ld	r24, X
 77e:	11 97       	sbiw	r26, 0x01	; 1
 780:	88 23       	and	r24, r24
 782:	09 f0       	breq	.+2      	; 0x786 <UART_Printf+0x29e>
 784:	d8 ce       	rjmp	.-592    	; 0x536 <UART_Printf+0x4e>
			UART_TxChar(ch);
		}
	}

	va_end(argp);
}
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	ff 90       	pop	r15
 790:	ef 90       	pop	r14
 792:	df 90       	pop	r13
 794:	cf 90       	pop	r12
 796:	bf 90       	pop	r11
 798:	af 90       	pop	r10
 79a:	9f 90       	pop	r9
 79c:	8f 90       	pop	r8
 79e:	7f 90       	pop	r7
 7a0:	6f 90       	pop	r6
 7a2:	5f 90       	pop	r5
 7a4:	08 95       	ret

000007a6 <__subsf3>:
 7a6:	50 58       	subi	r21, 0x80	; 128

000007a8 <__addsf3>:
 7a8:	bb 27       	eor	r27, r27
 7aa:	aa 27       	eor	r26, r26
 7ac:	0e d0       	rcall	.+28     	; 0x7ca <__addsf3x>
 7ae:	e0 c0       	rjmp	.+448    	; 0x970 <__fp_round>
 7b0:	d1 d0       	rcall	.+418    	; 0x954 <__fp_pscA>
 7b2:	30 f0       	brcs	.+12     	; 0x7c0 <__addsf3+0x18>
 7b4:	d6 d0       	rcall	.+428    	; 0x962 <__fp_pscB>
 7b6:	20 f0       	brcs	.+8      	; 0x7c0 <__addsf3+0x18>
 7b8:	31 f4       	brne	.+12     	; 0x7c6 <__addsf3+0x1e>
 7ba:	9f 3f       	cpi	r25, 0xFF	; 255
 7bc:	11 f4       	brne	.+4      	; 0x7c2 <__addsf3+0x1a>
 7be:	1e f4       	brtc	.+6      	; 0x7c6 <__addsf3+0x1e>
 7c0:	c6 c0       	rjmp	.+396    	; 0x94e <__fp_nan>
 7c2:	0e f4       	brtc	.+2      	; 0x7c6 <__addsf3+0x1e>
 7c4:	e0 95       	com	r30
 7c6:	e7 fb       	bst	r30, 7
 7c8:	bc c0       	rjmp	.+376    	; 0x942 <__fp_inf>

000007ca <__addsf3x>:
 7ca:	e9 2f       	mov	r30, r25
 7cc:	e2 d0       	rcall	.+452    	; 0x992 <__fp_split3>
 7ce:	80 f3       	brcs	.-32     	; 0x7b0 <__addsf3+0x8>
 7d0:	ba 17       	cp	r27, r26
 7d2:	62 07       	cpc	r22, r18
 7d4:	73 07       	cpc	r23, r19
 7d6:	84 07       	cpc	r24, r20
 7d8:	95 07       	cpc	r25, r21
 7da:	18 f0       	brcs	.+6      	; 0x7e2 <__addsf3x+0x18>
 7dc:	71 f4       	brne	.+28     	; 0x7fa <__addsf3x+0x30>
 7de:	9e f5       	brtc	.+102    	; 0x846 <__addsf3x+0x7c>
 7e0:	fa c0       	rjmp	.+500    	; 0x9d6 <__fp_zero>
 7e2:	0e f4       	brtc	.+2      	; 0x7e6 <__addsf3x+0x1c>
 7e4:	e0 95       	com	r30
 7e6:	0b 2e       	mov	r0, r27
 7e8:	ba 2f       	mov	r27, r26
 7ea:	a0 2d       	mov	r26, r0
 7ec:	0b 01       	movw	r0, r22
 7ee:	b9 01       	movw	r22, r18
 7f0:	90 01       	movw	r18, r0
 7f2:	0c 01       	movw	r0, r24
 7f4:	ca 01       	movw	r24, r20
 7f6:	a0 01       	movw	r20, r0
 7f8:	11 24       	eor	r1, r1
 7fa:	ff 27       	eor	r31, r31
 7fc:	59 1b       	sub	r21, r25
 7fe:	99 f0       	breq	.+38     	; 0x826 <__addsf3x+0x5c>
 800:	59 3f       	cpi	r21, 0xF9	; 249
 802:	50 f4       	brcc	.+20     	; 0x818 <__addsf3x+0x4e>
 804:	50 3e       	cpi	r21, 0xE0	; 224
 806:	68 f1       	brcs	.+90     	; 0x862 <__addsf3x+0x98>
 808:	1a 16       	cp	r1, r26
 80a:	f0 40       	sbci	r31, 0x00	; 0
 80c:	a2 2f       	mov	r26, r18
 80e:	23 2f       	mov	r18, r19
 810:	34 2f       	mov	r19, r20
 812:	44 27       	eor	r20, r20
 814:	58 5f       	subi	r21, 0xF8	; 248
 816:	f3 cf       	rjmp	.-26     	; 0x7fe <__addsf3x+0x34>
 818:	46 95       	lsr	r20
 81a:	37 95       	ror	r19
 81c:	27 95       	ror	r18
 81e:	a7 95       	ror	r26
 820:	f0 40       	sbci	r31, 0x00	; 0
 822:	53 95       	inc	r21
 824:	c9 f7       	brne	.-14     	; 0x818 <__addsf3x+0x4e>
 826:	7e f4       	brtc	.+30     	; 0x846 <__addsf3x+0x7c>
 828:	1f 16       	cp	r1, r31
 82a:	ba 0b       	sbc	r27, r26
 82c:	62 0b       	sbc	r22, r18
 82e:	73 0b       	sbc	r23, r19
 830:	84 0b       	sbc	r24, r20
 832:	ba f0       	brmi	.+46     	; 0x862 <__addsf3x+0x98>
 834:	91 50       	subi	r25, 0x01	; 1
 836:	a1 f0       	breq	.+40     	; 0x860 <__addsf3x+0x96>
 838:	ff 0f       	add	r31, r31
 83a:	bb 1f       	adc	r27, r27
 83c:	66 1f       	adc	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	c2 f7       	brpl	.-16     	; 0x834 <__addsf3x+0x6a>
 844:	0e c0       	rjmp	.+28     	; 0x862 <__addsf3x+0x98>
 846:	ba 0f       	add	r27, r26
 848:	62 1f       	adc	r22, r18
 84a:	73 1f       	adc	r23, r19
 84c:	84 1f       	adc	r24, r20
 84e:	48 f4       	brcc	.+18     	; 0x862 <__addsf3x+0x98>
 850:	87 95       	ror	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f7 95       	ror	r31
 85a:	9e 3f       	cpi	r25, 0xFE	; 254
 85c:	08 f0       	brcs	.+2      	; 0x860 <__addsf3x+0x96>
 85e:	b3 cf       	rjmp	.-154    	; 0x7c6 <__addsf3+0x1e>
 860:	93 95       	inc	r25
 862:	88 0f       	add	r24, r24
 864:	08 f0       	brcs	.+2      	; 0x868 <__addsf3x+0x9e>
 866:	99 27       	eor	r25, r25
 868:	ee 0f       	add	r30, r30
 86a:	97 95       	ror	r25
 86c:	87 95       	ror	r24
 86e:	08 95       	ret

00000870 <__fixunssfsi>:
 870:	98 d0       	rcall	.+304    	; 0x9a2 <__fp_splitA>
 872:	88 f0       	brcs	.+34     	; 0x896 <__fixunssfsi+0x26>
 874:	9f 57       	subi	r25, 0x7F	; 127
 876:	90 f0       	brcs	.+36     	; 0x89c <__fixunssfsi+0x2c>
 878:	b9 2f       	mov	r27, r25
 87a:	99 27       	eor	r25, r25
 87c:	b7 51       	subi	r27, 0x17	; 23
 87e:	a0 f0       	brcs	.+40     	; 0x8a8 <__fixunssfsi+0x38>
 880:	d1 f0       	breq	.+52     	; 0x8b6 <__fixunssfsi+0x46>
 882:	66 0f       	add	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	1a f0       	brmi	.+6      	; 0x892 <__fixunssfsi+0x22>
 88c:	ba 95       	dec	r27
 88e:	c9 f7       	brne	.-14     	; 0x882 <__fixunssfsi+0x12>
 890:	12 c0       	rjmp	.+36     	; 0x8b6 <__fixunssfsi+0x46>
 892:	b1 30       	cpi	r27, 0x01	; 1
 894:	81 f0       	breq	.+32     	; 0x8b6 <__fixunssfsi+0x46>
 896:	9f d0       	rcall	.+318    	; 0x9d6 <__fp_zero>
 898:	b1 e0       	ldi	r27, 0x01	; 1
 89a:	08 95       	ret
 89c:	9c c0       	rjmp	.+312    	; 0x9d6 <__fp_zero>
 89e:	67 2f       	mov	r22, r23
 8a0:	78 2f       	mov	r23, r24
 8a2:	88 27       	eor	r24, r24
 8a4:	b8 5f       	subi	r27, 0xF8	; 248
 8a6:	39 f0       	breq	.+14     	; 0x8b6 <__fixunssfsi+0x46>
 8a8:	b9 3f       	cpi	r27, 0xF9	; 249
 8aa:	cc f3       	brlt	.-14     	; 0x89e <__fixunssfsi+0x2e>
 8ac:	86 95       	lsr	r24
 8ae:	77 95       	ror	r23
 8b0:	67 95       	ror	r22
 8b2:	b3 95       	inc	r27
 8b4:	d9 f7       	brne	.-10     	; 0x8ac <__fixunssfsi+0x3c>
 8b6:	3e f4       	brtc	.+14     	; 0x8c6 <__fixunssfsi+0x56>
 8b8:	90 95       	com	r25
 8ba:	80 95       	com	r24
 8bc:	70 95       	com	r23
 8be:	61 95       	neg	r22
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__floatunsisf>:
 8c8:	e8 94       	clt
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <__floatsisf+0x12>

000008cc <__floatsisf>:
 8cc:	97 fb       	bst	r25, 7
 8ce:	3e f4       	brtc	.+14     	; 0x8de <__floatsisf+0x12>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	99 23       	and	r25, r25
 8e0:	a9 f0       	breq	.+42     	; 0x90c <__stack+0xd>
 8e2:	f9 2f       	mov	r31, r25
 8e4:	96 e9       	ldi	r25, 0x96	; 150
 8e6:	bb 27       	eor	r27, r27
 8e8:	93 95       	inc	r25
 8ea:	f6 95       	lsr	r31
 8ec:	87 95       	ror	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b7 95       	ror	r27
 8f4:	f1 11       	cpse	r31, r1
 8f6:	f8 cf       	rjmp	.-16     	; 0x8e8 <__floatsisf+0x1c>
 8f8:	fa f4       	brpl	.+62     	; 0x938 <__stack+0x39>
 8fa:	bb 0f       	add	r27, r27
 8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
 8fe:	60 ff       	sbrs	r22, 0
 900:	1b c0       	rjmp	.+54     	; 0x938 <__stack+0x39>
 902:	6f 5f       	subi	r22, 0xFF	; 255
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	8f 4f       	sbci	r24, 0xFF	; 255
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	16 c0       	rjmp	.+44     	; 0x938 <__stack+0x39>
 90c:	88 23       	and	r24, r24
 90e:	11 f0       	breq	.+4      	; 0x914 <__stack+0x15>
 910:	96 e9       	ldi	r25, 0x96	; 150
 912:	11 c0       	rjmp	.+34     	; 0x936 <__stack+0x37>
 914:	77 23       	and	r23, r23
 916:	21 f0       	breq	.+8      	; 0x920 <__stack+0x21>
 918:	9e e8       	ldi	r25, 0x8E	; 142
 91a:	87 2f       	mov	r24, r23
 91c:	76 2f       	mov	r23, r22
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0x2b>
 920:	66 23       	and	r22, r22
 922:	71 f0       	breq	.+28     	; 0x940 <__stack+0x41>
 924:	96 e8       	ldi	r25, 0x86	; 134
 926:	86 2f       	mov	r24, r22
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	2a f0       	brmi	.+10     	; 0x938 <__stack+0x39>
 92e:	9a 95       	dec	r25
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	88 1f       	adc	r24, r24
 936:	da f7       	brpl	.-10     	; 0x92e <__stack+0x2f>
 938:	88 0f       	add	r24, r24
 93a:	96 95       	lsr	r25
 93c:	87 95       	ror	r24
 93e:	97 f9       	bld	r25, 7
 940:	08 95       	ret

00000942 <__fp_inf>:
 942:	97 f9       	bld	r25, 7
 944:	9f 67       	ori	r25, 0x7F	; 127
 946:	80 e8       	ldi	r24, 0x80	; 128
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	08 95       	ret

0000094e <__fp_nan>:
 94e:	9f ef       	ldi	r25, 0xFF	; 255
 950:	80 ec       	ldi	r24, 0xC0	; 192
 952:	08 95       	ret

00000954 <__fp_pscA>:
 954:	00 24       	eor	r0, r0
 956:	0a 94       	dec	r0
 958:	16 16       	cp	r1, r22
 95a:	17 06       	cpc	r1, r23
 95c:	18 06       	cpc	r1, r24
 95e:	09 06       	cpc	r0, r25
 960:	08 95       	ret

00000962 <__fp_pscB>:
 962:	00 24       	eor	r0, r0
 964:	0a 94       	dec	r0
 966:	12 16       	cp	r1, r18
 968:	13 06       	cpc	r1, r19
 96a:	14 06       	cpc	r1, r20
 96c:	05 06       	cpc	r0, r21
 96e:	08 95       	ret

00000970 <__fp_round>:
 970:	09 2e       	mov	r0, r25
 972:	03 94       	inc	r0
 974:	00 0c       	add	r0, r0
 976:	11 f4       	brne	.+4      	; 0x97c <__fp_round+0xc>
 978:	88 23       	and	r24, r24
 97a:	52 f0       	brmi	.+20     	; 0x990 <__fp_round+0x20>
 97c:	bb 0f       	add	r27, r27
 97e:	40 f4       	brcc	.+16     	; 0x990 <__fp_round+0x20>
 980:	bf 2b       	or	r27, r31
 982:	11 f4       	brne	.+4      	; 0x988 <__fp_round+0x18>
 984:	60 ff       	sbrs	r22, 0
 986:	04 c0       	rjmp	.+8      	; 0x990 <__fp_round+0x20>
 988:	6f 5f       	subi	r22, 0xFF	; 255
 98a:	7f 4f       	sbci	r23, 0xFF	; 255
 98c:	8f 4f       	sbci	r24, 0xFF	; 255
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	08 95       	ret

00000992 <__fp_split3>:
 992:	57 fd       	sbrc	r21, 7
 994:	90 58       	subi	r25, 0x80	; 128
 996:	44 0f       	add	r20, r20
 998:	55 1f       	adc	r21, r21
 99a:	59 f0       	breq	.+22     	; 0x9b2 <__fp_splitA+0x10>
 99c:	5f 3f       	cpi	r21, 0xFF	; 255
 99e:	71 f0       	breq	.+28     	; 0x9bc <__fp_splitA+0x1a>
 9a0:	47 95       	ror	r20

000009a2 <__fp_splitA>:
 9a2:	88 0f       	add	r24, r24
 9a4:	97 fb       	bst	r25, 7
 9a6:	99 1f       	adc	r25, r25
 9a8:	61 f0       	breq	.+24     	; 0x9c2 <__fp_splitA+0x20>
 9aa:	9f 3f       	cpi	r25, 0xFF	; 255
 9ac:	79 f0       	breq	.+30     	; 0x9cc <__fp_splitA+0x2a>
 9ae:	87 95       	ror	r24
 9b0:	08 95       	ret
 9b2:	12 16       	cp	r1, r18
 9b4:	13 06       	cpc	r1, r19
 9b6:	14 06       	cpc	r1, r20
 9b8:	55 1f       	adc	r21, r21
 9ba:	f2 cf       	rjmp	.-28     	; 0x9a0 <__fp_split3+0xe>
 9bc:	46 95       	lsr	r20
 9be:	f1 df       	rcall	.-30     	; 0x9a2 <__fp_splitA>
 9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__fp_splitA+0x30>
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	18 06       	cpc	r1, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	f1 cf       	rjmp	.-30     	; 0x9ae <__fp_splitA+0xc>
 9cc:	86 95       	lsr	r24
 9ce:	71 05       	cpc	r23, r1
 9d0:	61 05       	cpc	r22, r1
 9d2:	08 94       	sec
 9d4:	08 95       	ret

000009d6 <__fp_zero>:
 9d6:	e8 94       	clt

000009d8 <__fp_szero>:
 9d8:	bb 27       	eor	r27, r27
 9da:	66 27       	eor	r22, r22
 9dc:	77 27       	eor	r23, r23
 9de:	cb 01       	movw	r24, r22
 9e0:	97 f9       	bld	r25, 7
 9e2:	08 95       	ret

000009e4 <__mulsf3>:
 9e4:	0b d0       	rcall	.+22     	; 0x9fc <__mulsf3x>
 9e6:	c4 cf       	rjmp	.-120    	; 0x970 <__fp_round>
 9e8:	b5 df       	rcall	.-150    	; 0x954 <__fp_pscA>
 9ea:	28 f0       	brcs	.+10     	; 0x9f6 <__mulsf3+0x12>
 9ec:	ba df       	rcall	.-140    	; 0x962 <__fp_pscB>
 9ee:	18 f0       	brcs	.+6      	; 0x9f6 <__mulsf3+0x12>
 9f0:	95 23       	and	r25, r21
 9f2:	09 f0       	breq	.+2      	; 0x9f6 <__mulsf3+0x12>
 9f4:	a6 cf       	rjmp	.-180    	; 0x942 <__fp_inf>
 9f6:	ab cf       	rjmp	.-170    	; 0x94e <__fp_nan>
 9f8:	11 24       	eor	r1, r1
 9fa:	ee cf       	rjmp	.-36     	; 0x9d8 <__fp_szero>

000009fc <__mulsf3x>:
 9fc:	ca df       	rcall	.-108    	; 0x992 <__fp_split3>
 9fe:	a0 f3       	brcs	.-24     	; 0x9e8 <__mulsf3+0x4>

00000a00 <__mulsf3_pse>:
 a00:	95 9f       	mul	r25, r21
 a02:	d1 f3       	breq	.-12     	; 0x9f8 <__mulsf3+0x14>
 a04:	95 0f       	add	r25, r21
 a06:	50 e0       	ldi	r21, 0x00	; 0
 a08:	55 1f       	adc	r21, r21
 a0a:	62 9f       	mul	r22, r18
 a0c:	f0 01       	movw	r30, r0
 a0e:	72 9f       	mul	r23, r18
 a10:	bb 27       	eor	r27, r27
 a12:	f0 0d       	add	r31, r0
 a14:	b1 1d       	adc	r27, r1
 a16:	63 9f       	mul	r22, r19
 a18:	aa 27       	eor	r26, r26
 a1a:	f0 0d       	add	r31, r0
 a1c:	b1 1d       	adc	r27, r1
 a1e:	aa 1f       	adc	r26, r26
 a20:	64 9f       	mul	r22, r20
 a22:	66 27       	eor	r22, r22
 a24:	b0 0d       	add	r27, r0
 a26:	a1 1d       	adc	r26, r1
 a28:	66 1f       	adc	r22, r22
 a2a:	82 9f       	mul	r24, r18
 a2c:	22 27       	eor	r18, r18
 a2e:	b0 0d       	add	r27, r0
 a30:	a1 1d       	adc	r26, r1
 a32:	62 1f       	adc	r22, r18
 a34:	73 9f       	mul	r23, r19
 a36:	b0 0d       	add	r27, r0
 a38:	a1 1d       	adc	r26, r1
 a3a:	62 1f       	adc	r22, r18
 a3c:	83 9f       	mul	r24, r19
 a3e:	a0 0d       	add	r26, r0
 a40:	61 1d       	adc	r22, r1
 a42:	22 1f       	adc	r18, r18
 a44:	74 9f       	mul	r23, r20
 a46:	33 27       	eor	r19, r19
 a48:	a0 0d       	add	r26, r0
 a4a:	61 1d       	adc	r22, r1
 a4c:	23 1f       	adc	r18, r19
 a4e:	84 9f       	mul	r24, r20
 a50:	60 0d       	add	r22, r0
 a52:	21 1d       	adc	r18, r1
 a54:	82 2f       	mov	r24, r18
 a56:	76 2f       	mov	r23, r22
 a58:	6a 2f       	mov	r22, r26
 a5a:	11 24       	eor	r1, r1
 a5c:	9f 57       	subi	r25, 0x7F	; 127
 a5e:	50 40       	sbci	r21, 0x00	; 0
 a60:	8a f0       	brmi	.+34     	; 0xa84 <__mulsf3_pse+0x84>
 a62:	e1 f0       	breq	.+56     	; 0xa9c <__mulsf3_pse+0x9c>
 a64:	88 23       	and	r24, r24
 a66:	4a f0       	brmi	.+18     	; 0xa7a <__mulsf3_pse+0x7a>
 a68:	ee 0f       	add	r30, r30
 a6a:	ff 1f       	adc	r31, r31
 a6c:	bb 1f       	adc	r27, r27
 a6e:	66 1f       	adc	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	91 50       	subi	r25, 0x01	; 1
 a76:	50 40       	sbci	r21, 0x00	; 0
 a78:	a9 f7       	brne	.-22     	; 0xa64 <__mulsf3_pse+0x64>
 a7a:	9e 3f       	cpi	r25, 0xFE	; 254
 a7c:	51 05       	cpc	r21, r1
 a7e:	70 f0       	brcs	.+28     	; 0xa9c <__mulsf3_pse+0x9c>
 a80:	60 cf       	rjmp	.-320    	; 0x942 <__fp_inf>
 a82:	aa cf       	rjmp	.-172    	; 0x9d8 <__fp_szero>
 a84:	5f 3f       	cpi	r21, 0xFF	; 255
 a86:	ec f3       	brlt	.-6      	; 0xa82 <__mulsf3_pse+0x82>
 a88:	98 3e       	cpi	r25, 0xE8	; 232
 a8a:	dc f3       	brlt	.-10     	; 0xa82 <__mulsf3_pse+0x82>
 a8c:	86 95       	lsr	r24
 a8e:	77 95       	ror	r23
 a90:	67 95       	ror	r22
 a92:	b7 95       	ror	r27
 a94:	f7 95       	ror	r31
 a96:	e7 95       	ror	r30
 a98:	9f 5f       	subi	r25, 0xFF	; 255
 a9a:	c1 f7       	brne	.-16     	; 0xa8c <__mulsf3_pse+0x8c>
 a9c:	fe 2b       	or	r31, r30
 a9e:	88 0f       	add	r24, r24
 aa0:	91 1d       	adc	r25, r1
 aa2:	96 95       	lsr	r25
 aa4:	87 95       	ror	r24
 aa6:	97 f9       	bld	r25, 7
 aa8:	08 95       	ret

00000aaa <__mulsi3>:
 aaa:	62 9f       	mul	r22, r18
 aac:	d0 01       	movw	r26, r0
 aae:	73 9f       	mul	r23, r19
 ab0:	f0 01       	movw	r30, r0
 ab2:	82 9f       	mul	r24, r18
 ab4:	e0 0d       	add	r30, r0
 ab6:	f1 1d       	adc	r31, r1
 ab8:	64 9f       	mul	r22, r20
 aba:	e0 0d       	add	r30, r0
 abc:	f1 1d       	adc	r31, r1
 abe:	92 9f       	mul	r25, r18
 ac0:	f0 0d       	add	r31, r0
 ac2:	83 9f       	mul	r24, r19
 ac4:	f0 0d       	add	r31, r0
 ac6:	74 9f       	mul	r23, r20
 ac8:	f0 0d       	add	r31, r0
 aca:	65 9f       	mul	r22, r21
 acc:	f0 0d       	add	r31, r0
 ace:	99 27       	eor	r25, r25
 ad0:	72 9f       	mul	r23, r18
 ad2:	b0 0d       	add	r27, r0
 ad4:	e1 1d       	adc	r30, r1
 ad6:	f9 1f       	adc	r31, r25
 ad8:	63 9f       	mul	r22, r19
 ada:	b0 0d       	add	r27, r0
 adc:	e1 1d       	adc	r30, r1
 ade:	f9 1f       	adc	r31, r25
 ae0:	bd 01       	movw	r22, r26
 ae2:	cf 01       	movw	r24, r30
 ae4:	11 24       	eor	r1, r1
 ae6:	08 95       	ret

00000ae8 <__udivmodsi4>:
 ae8:	a1 e2       	ldi	r26, 0x21	; 33
 aea:	1a 2e       	mov	r1, r26
 aec:	aa 1b       	sub	r26, r26
 aee:	bb 1b       	sub	r27, r27
 af0:	fd 01       	movw	r30, r26
 af2:	0d c0       	rjmp	.+26     	; 0xb0e <__udivmodsi4_ep>

00000af4 <__udivmodsi4_loop>:
 af4:	aa 1f       	adc	r26, r26
 af6:	bb 1f       	adc	r27, r27
 af8:	ee 1f       	adc	r30, r30
 afa:	ff 1f       	adc	r31, r31
 afc:	a2 17       	cp	r26, r18
 afe:	b3 07       	cpc	r27, r19
 b00:	e4 07       	cpc	r30, r20
 b02:	f5 07       	cpc	r31, r21
 b04:	20 f0       	brcs	.+8      	; 0xb0e <__udivmodsi4_ep>
 b06:	a2 1b       	sub	r26, r18
 b08:	b3 0b       	sbc	r27, r19
 b0a:	e4 0b       	sbc	r30, r20
 b0c:	f5 0b       	sbc	r31, r21

00000b0e <__udivmodsi4_ep>:
 b0e:	66 1f       	adc	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	99 1f       	adc	r25, r25
 b16:	1a 94       	dec	r1
 b18:	69 f7       	brne	.-38     	; 0xaf4 <__udivmodsi4_loop>
 b1a:	60 95       	com	r22
 b1c:	70 95       	com	r23
 b1e:	80 95       	com	r24
 b20:	90 95       	com	r25
 b22:	9b 01       	movw	r18, r22
 b24:	ac 01       	movw	r20, r24
 b26:	bd 01       	movw	r22, r26
 b28:	cf 01       	movw	r24, r30
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
