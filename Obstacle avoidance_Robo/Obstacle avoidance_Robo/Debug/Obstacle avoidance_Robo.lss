
Obstacle avoidance_Robo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000c36  00000cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000ccc  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00002df8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c13  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ee  00000000  00000000  00003aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000731  00000000  00000000  00003dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  0000450c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000373  00000000  00000000  0000473c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da4  00000000  00000000  00004aaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  9e:	0c 94 19 06 	jmp	0xc32	; 0xc32 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:


volatile unsigned char cnt=0, Prev_Dirn=0,duty=40,new_value,old_value;

ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	
	cnt++;          // Increment the cnt value each time the isr is executed
  b4:	80 91 03 01 	lds	r24, 0x0103
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 03 01 	sts	0x0103, r24

	if(cnt > duty)
  be:	90 91 03 01 	lds	r25, 0x0103
  c2:	80 91 00 01 	lds	r24, 0x0100
  c6:	89 17       	cp	r24, r25
  c8:	10 f4       	brcc	.+4      	; 0xce <__vector_13+0x28>
	{
		Robot = Stop;
  ca:	18 b8       	out	0x08, r1	; 8
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__vector_13+0x4e>
	}
	else if(cnt < duty)
  ce:	90 91 03 01 	lds	r25, 0x0103
  d2:	80 91 00 01 	lds	r24, 0x0100
  d6:	98 17       	cp	r25, r24
  d8:	20 f4       	brcc	.+8      	; 0xe2 <__vector_13+0x3c>
	{
		Robot = Prev_Dirn;
  da:	80 91 02 01 	lds	r24, 0x0102
  de:	88 b9       	out	0x08, r24	; 8
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__vector_13+0x4e>
	}
	else if(cnt==100)
  e2:	80 91 03 01 	lds	r24, 0x0103
  e6:	84 36       	cpi	r24, 0x64	; 100
  e8:	29 f4       	brne	.+10     	; 0xf4 <__vector_13+0x4e>
	{
		Robot = Prev_Dirn;
  ea:	80 91 02 01 	lds	r24, 0x0102
  ee:	88 b9       	out	0x08, r24	; 8
		cnt =0;
  f0:	10 92 03 01 	sts	0x0103, r1
	}
	
	TCNT1H=0xff;    // Reload the 16-bit count value
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0x00;    // in timer1 count registers
  fa:	10 92 84 00 	sts	0x0084, r1
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:

void main(void)
{


	DDRC = 0xff; //making port c output
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;// inputs
 110:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0X00;// sensor inputs.
 112:	14 b8       	out	0x04, r1	; 4

	UART_Init(9600);
 114:	60 e8       	ldi	r22, 0x80	; 128
 116:	75 e2       	ldi	r23, 0x25	; 37
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_Init>

	PORTB = 0X07;
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	85 b9       	out	0x05, r24	; 5
			case 0: Prev_Dirn=Robot=Forward; break;
			case 1: Prev_Dirn=Robot = Left;_delay_ms(100); break;
			case 2: Prev_Dirn=Robot = Backward;_delay_ms(500);Robot = Left;_delay_ms(100); break;
			case 3: Prev_Dirn=Robot = Left;_delay_ms(100); break;
			case 4: Prev_Dirn=Robot = Right; _delay_ms(100); break;
			case 5: Prev_Dirn=Robot = Backward;_delay_ms(500);Robot = Left;_delay_ms(100); break;
 124:	d9 e0       	ldi	r29, 0x09	; 9
 126:	ca e0       	ldi	r28, 0x0A	; 10
		{
			case 0: Prev_Dirn=Robot=Forward; break;
			case 1: Prev_Dirn=Robot = Left;_delay_ms(100); break;
			case 2: Prev_Dirn=Robot = Backward;_delay_ms(500);Robot = Left;_delay_ms(100); break;
			case 3: Prev_Dirn=Robot = Left;_delay_ms(100); break;
			case 4: Prev_Dirn=Robot = Right; _delay_ms(100); break;
 128:	15 e0       	ldi	r17, 0x05	; 5
		UART_TxChar((PINB & 0X07)+0x30);

		switch(PINB & 0X07)

		{
			case 0: Prev_Dirn=Robot=Forward; break;
 12a:	06 e0       	ldi	r16, 0x06	; 6
	PORTB = 0X07;


	while(1)
	{
		UART_TxChar((PINB & 0X07)+0x30);
 12c:	83 b1       	in	r24, 0x03	; 3
 12e:	87 70       	andi	r24, 0x07	; 7
 130:	80 5d       	subi	r24, 0xD0	; 208
 132:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>

		switch(PINB & 0X07)
 136:	83 b1       	in	r24, 0x03	; 3
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	87 70       	andi	r24, 0x07	; 7
 13c:	90 70       	andi	r25, 0x00	; 0
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	91 05       	cpc	r25, r1
 142:	09 f4       	brne	.+2      	; 0x146 <main+0x3a>
 144:	44 c0       	rjmp	.+136    	; 0x1ce <main+0xc2>
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	91 05       	cpc	r25, r1
 14a:	4c f4       	brge	.+18     	; 0x15e <main+0x52>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	91 05       	cpc	r25, r1
 150:	d1 f0       	breq	.+52     	; 0x186 <main+0x7a>
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	91 05       	cpc	r25, r1
 156:	24 f5       	brge	.+72     	; 0x1a0 <main+0x94>
 158:	00 97       	sbiw	r24, 0x00	; 0
 15a:	89 f0       	breq	.+34     	; 0x17e <main+0x72>
 15c:	8d c0       	rjmp	.+282    	; 0x278 <main+0x16c>
 15e:	85 30       	cpi	r24, 0x05	; 5
 160:	91 05       	cpc	r25, r1
 162:	09 f4       	brne	.+2      	; 0x166 <main+0x5a>
 164:	4e c0       	rjmp	.+156    	; 0x202 <main+0xf6>
 166:	85 30       	cpi	r24, 0x05	; 5
 168:	91 05       	cpc	r25, r1
 16a:	f4 f1       	brlt	.+124    	; 0x1e8 <main+0xdc>
 16c:	86 30       	cpi	r24, 0x06	; 6
 16e:	91 05       	cpc	r25, r1
 170:	09 f4       	brne	.+2      	; 0x174 <main+0x68>
 172:	5e c0       	rjmp	.+188    	; 0x230 <main+0x124>
 174:	87 30       	cpi	r24, 0x07	; 7
 176:	91 05       	cpc	r25, r1
 178:	09 f0       	breq	.+2      	; 0x17c <main+0x70>
 17a:	7e c0       	rjmp	.+252    	; 0x278 <main+0x16c>
 17c:	66 c0       	rjmp	.+204    	; 0x24a <main+0x13e>

		{
			case 0: Prev_Dirn=Robot=Forward; break;
 17e:	08 b9       	out	0x08, r16	; 8
 180:	00 93 02 01 	sts	0x0102, r16
 184:	d3 cf       	rjmp	.-90     	; 0x12c <main+0x20>
			case 1: Prev_Dirn=Robot = Left;_delay_ms(100); break;
 186:	c8 b9       	out	0x08, r28	; 8
 188:	c0 93 02 01 	sts	0x0102, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	91 ee       	ldi	r25, 0xE1	; 225
 190:	a4 e0       	ldi	r26, 0x04	; 4
 192:	81 50       	subi	r24, 0x01	; 1
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	a0 40       	sbci	r26, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x86>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x90>
 19c:	00 00       	nop
 19e:	c6 cf       	rjmp	.-116    	; 0x12c <main+0x20>
			case 2: Prev_Dirn=Robot = Backward;_delay_ms(500);Robot = Left;_delay_ms(100); break;
 1a0:	d8 b9       	out	0x08, r29	; 8
 1a2:	d0 93 02 01 	sts	0x0102, r29
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	99 e6       	ldi	r25, 0x69	; 105
 1aa:	a8 e1       	ldi	r26, 0x18	; 24
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	a0 40       	sbci	r26, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0xa0>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xaa>
 1b6:	00 00       	nop
 1b8:	c8 b9       	out	0x08, r28	; 8
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	91 ee       	ldi	r25, 0xE1	; 225
 1be:	a4 e0       	ldi	r26, 0x04	; 4
 1c0:	81 50       	subi	r24, 0x01	; 1
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	a0 40       	sbci	r26, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0xb4>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0xbe>
 1ca:	00 00       	nop
 1cc:	af cf       	rjmp	.-162    	; 0x12c <main+0x20>
			case 3: Prev_Dirn=Robot = Left;_delay_ms(100); break;
 1ce:	c8 b9       	out	0x08, r28	; 8
 1d0:	c0 93 02 01 	sts	0x0102, r28
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	91 ee       	ldi	r25, 0xE1	; 225
 1d8:	a4 e0       	ldi	r26, 0x04	; 4
 1da:	81 50       	subi	r24, 0x01	; 1
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	a0 40       	sbci	r26, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xce>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xd8>
 1e4:	00 00       	nop
 1e6:	a2 cf       	rjmp	.-188    	; 0x12c <main+0x20>
			case 4: Prev_Dirn=Robot = Right; _delay_ms(100); break;
 1e8:	18 b9       	out	0x08, r17	; 8
 1ea:	10 93 02 01 	sts	0x0102, r17
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	91 ee       	ldi	r25, 0xE1	; 225
 1f2:	a4 e0       	ldi	r26, 0x04	; 4
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	a0 40       	sbci	r26, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0xe8>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0xf2>
 1fe:	00 00       	nop
 200:	95 cf       	rjmp	.-214    	; 0x12c <main+0x20>
			case 5: Prev_Dirn=Robot = Backward;_delay_ms(500);Robot = Left;_delay_ms(100); break;
 202:	d8 b9       	out	0x08, r29	; 8
 204:	d0 93 02 01 	sts	0x0102, r29
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	99 e6       	ldi	r25, 0x69	; 105
 20c:	a8 e1       	ldi	r26, 0x18	; 24
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	a0 40       	sbci	r26, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x102>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x10c>
 218:	00 00       	nop
 21a:	c8 b9       	out	0x08, r28	; 8
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	91 ee       	ldi	r25, 0xE1	; 225
 220:	a4 e0       	ldi	r26, 0x04	; 4
 222:	81 50       	subi	r24, 0x01	; 1
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	a0 40       	sbci	r26, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x116>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x120>
 22c:	00 00       	nop
 22e:	7e cf       	rjmp	.-260    	; 0x12c <main+0x20>
			case 6: Prev_Dirn=Robot = Right; _delay_ms(100); break;
 230:	18 b9       	out	0x08, r17	; 8
 232:	10 93 02 01 	sts	0x0102, r17
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	91 ee       	ldi	r25, 0xE1	; 225
 23a:	a4 e0       	ldi	r26, 0x04	; 4
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	a0 40       	sbci	r26, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x130>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x13a>
 246:	00 00       	nop
 248:	71 cf       	rjmp	.-286    	; 0x12c <main+0x20>
			case 7: Prev_Dirn=Robot = Backward;_delay_ms(500);Robot = Left;_delay_ms(100); break;
 24a:	d8 b9       	out	0x08, r29	; 8
 24c:	d0 93 02 01 	sts	0x0102, r29
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	99 e6       	ldi	r25, 0x69	; 105
 254:	a8 e1       	ldi	r26, 0x18	; 24
 256:	81 50       	subi	r24, 0x01	; 1
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	a0 40       	sbci	r26, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x14a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x154>
 260:	00 00       	nop
 262:	c8 b9       	out	0x08, r28	; 8
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	91 ee       	ldi	r25, 0xE1	; 225
 268:	a4 e0       	ldi	r26, 0x04	; 4
 26a:	81 50       	subi	r24, 0x01	; 1
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	a0 40       	sbci	r26, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x15e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x168>
 274:	00 00       	nop
 276:	5a cf       	rjmp	.-332    	; 0x12c <main+0x20>
			default: Robot = Stop; break;
 278:	18 b8       	out	0x08, r1	; 8
 27a:	58 cf       	rjmp	.-336    	; 0x12c <main+0x20>

0000027c <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	6b 01       	movw	r12, r22
 286:	7c 01       	movw	r14, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
 288:	dc 01       	movw	r26, r24
 28a:	cb 01       	movw	r24, r22
 28c:	80 56       	subi	r24, 0x60	; 96
 28e:	99 40       	sbci	r25, 0x09	; 9
 290:	a0 40       	sbci	r26, 0x00	; 0
 292:	b0 40       	sbci	r27, 0x00	; 0
 294:	81 3a       	cpi	r24, 0xA1	; 161
 296:	28 eb       	ldi	r18, 0xB8	; 184
 298:	92 07       	cpc	r25, r18
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	a2 07       	cpc	r26, r18
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	b2 07       	cpc	r27, r18
 2a2:	08 f5       	brcc	.+66     	; 0x2e6 <UART_SetBaudRate+0x6a>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
 2a4:	c7 01       	movw	r24, r14
 2a6:	b6 01       	movw	r22, r12
 2a8:	28 ef       	ldi	r18, 0xF8	; 248
 2aa:	3f ef       	ldi	r19, 0xFF	; 255
 2ac:	4f ef       	ldi	r20, 0xFF	; 255
 2ae:	5f ef       	ldi	r21, 0xFF	; 255
 2b0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsi3>
 2b4:	60 50       	subi	r22, 0x00	; 0
 2b6:	7c 4d       	sbci	r23, 0xDC	; 220
 2b8:	8b 40       	sbci	r24, 0x0B	; 11
 2ba:	9f 4f       	sbci	r25, 0xFF	; 255
 2bc:	cc 0c       	add	r12, r12
 2be:	dd 1c       	adc	r13, r13
 2c0:	ee 1c       	adc	r14, r14
 2c2:	ff 1c       	adc	r15, r15
 2c4:	cc 0c       	add	r12, r12
 2c6:	dd 1c       	adc	r13, r13
 2c8:	ee 1c       	adc	r14, r14
 2ca:	ff 1c       	adc	r15, r15
 2cc:	a7 01       	movw	r20, r14
 2ce:	96 01       	movw	r18, r12
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	44 1f       	adc	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	44 1f       	adc	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	0e 94 f7 05 	call	0xbee	; 0xbee <__udivmodsi4>
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <UART_SetBaudRate+0x6e>
	}
	else
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
 2e6:	27 e6       	ldi	r18, 0x67	; 103
 2e8:	30 e0       	ldi	r19, 0x00	; 0
	}

	UBRR0L = util_ExtractByte0to8(RegValue);
 2ea:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H = util_ExtractByte8to16(RegValue);
 2ee:	30 93 c5 00 	sts	0x00C5, r19
}
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	df 90       	pop	r13
 2f8:	cf 90       	pop	r12
 2fa:	08 95       	ret

000002fc <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSR0B= (1<<RXEN0) | (1<<TXEN0);                  // Enable Receiver and Transmitter
 2fc:	28 e1       	ldi	r18, 0x18	; 24
 2fe:	20 93 c1 00 	sts	0x00C1, r18
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00);   // Asynchronous mode 8-bit data and 1-stop bit
 302:	26 e0       	ldi	r18, 0x06	; 6
 304:	20 93 c2 00 	sts	0x00C2, r18
	UCSR0A= 0x00;                                   // Clear the UASRT status register
 308:	10 92 c0 00 	sts	0x00C0, r1
	UART_SetBaudRate(var_baudRate_u32);
 30c:	0e 94 3e 01 	call	0x27c	; 0x27c <UART_SetBaudRate>
}
 310:	08 95       	ret

00000312 <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSR0A,RXC0));  // Wait till the data is received
 312:	e0 ec       	ldi	r30, 0xC0	; 192
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	88 23       	and	r24, r24
 31a:	ec f7       	brge	.-6      	; 0x316 <UART_RxChar+0x4>
	return(UDR0);                          // return the received char
 31c:	80 91 c6 00 	lds	r24, 0x00C6
}
 320:	08 95       	ret

00000322 <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSR0A,UDRE0)); // Wait till Transmitter(UDR) register becomes Empty
 322:	e0 ec       	ldi	r30, 0xC0	; 192
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	90 81       	ld	r25, Z
 328:	95 ff       	sbrs	r25, 5
 32a:	fd cf       	rjmp	.-6      	; 0x326 <UART_TxChar+0x4>
	UDR0 =var_uartData_u8;                              // Load the data to be transmitted
 32c:	80 93 c6 00 	sts	0x00C6, r24
}
 330:	08 95       	ret

00000332 <UART_TxString>:
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ec 01       	movw	r28, r24
	while(*ptr_stringPointer_u8)
 338:	88 81       	ld	r24, Y
 33a:	88 23       	and	r24, r24
 33c:	31 f0       	breq	.+12     	; 0x34a <UART_TxString+0x18>
 * description :This function is used to transmit a NULL terminated string through UART.
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
 33e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr_stringPointer_u8)
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 340:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
 344:	89 91       	ld	r24, Y+
 346:	88 23       	and	r24, r24
 348:	d9 f7       	brne	.-10     	; 0x340 <UART_TxString+0xe>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <UART_RxString>:
    if not required then comment UART_TxChar(ch) in the code.
  2.BackSlash is not taken care.
***************************************************************************************************/
#if (Enable_UART_RxString==1)
void UART_RxString(char *ptr_stringPointer_u8)
{
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
	char ch;
	while(1)
	{
		ch=UART_RxChar();    //Receive a char
 358:	0e 94 89 01 	call	0x312	; 0x312 <UART_RxChar>
 35c:	18 2f       	mov	r17, r24
		UART_TxChar(ch);     //Echo back the received char
 35e:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>

		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
 362:	1d 30       	cpi	r17, 0x0D	; 13
 364:	11 f0       	breq	.+4      	; 0x36a <UART_RxString+0x1a>
 366:	1a 30       	cpi	r17, 0x0A	; 10
 368:	29 f4       	brne	.+10     	; 0x374 <UART_RxString+0x24>
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
 36a:	18 82       	st	Y, r1
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
		ptr_stringPointer_u8++;
	}
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	08 95       	ret
		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
 374:	19 93       	st	Y+, r17
		ptr_stringPointer_u8++;
	}
 376:	f0 cf       	rjmp	.-32     	; 0x358 <UART_RxString+0x8>

00000378 <UART_TxDecimalNumber>:
				2.(12345,6) then 6-digits ie. 012345 will be transmitted
				3.(12345,C_DefaultDigitsToTransmit_U8) then 12345 will be transmitted.
***************************************************************************************************/
#if ((Enable_UART_TxDecimalNumber==1) || (Enable_UART_TxFloatNumber==1))
void UART_TxDecimalNumber(uint32_t var_decNumber_u32, uint8_t var_numOfDigitsToTransmit_u8)
{
 378:	8f 92       	push	r8
 37a:	9f 92       	push	r9
 37c:	af 92       	push	r10
 37e:	bf 92       	push	r11
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	2a 97       	sbiw	r28, 0x0a	; 10
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	dc 01       	movw	r26, r24
 39e:	cb 01       	movw	r24, r22
 3a0:	04 2f       	mov	r16, r20
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
 3a2:	00 97       	sbiw	r24, 0x00	; 0
 3a4:	a1 05       	cpc	r26, r1
 3a6:	b1 05       	cpc	r27, r1
 3a8:	19 f0       	breq	.+6      	; 0x3b0 <UART_TxDecimalNumber+0x38>
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 3aa:	44 23       	and	r20, r20
 3ac:	71 f4       	brne	.+28     	; 0x3ca <UART_TxDecimalNumber+0x52>
 3ae:	43 c0       	rjmp	.+134    	; 0x436 <UART_TxDecimalNumber+0xbe>
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 3b0:	44 23       	and	r20, r20
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <UART_TxDecimalNumber+0x3e>
 3b4:	40 c0       	rjmp	.+128    	; 0x436 <UART_TxDecimalNumber+0xbe>
 3b6:	fe 01       	movw	r30, r28
 3b8:	31 96       	adiw	r30, 0x01	; 1
 3ba:	10 e0       	ldi	r17, 0x00	; 0
		   a[i] = 0x00;
 3bc:	11 92       	st	Z+, r1
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 3be:	1f 5f       	subi	r17, 0xFF	; 255
 3c0:	10 17       	cp	r17, r16
 3c2:	81 f1       	breq	.+96     	; 0x424 <UART_TxDecimalNumber+0xac>
 3c4:	1a 30       	cpi	r17, 0x0A	; 10
 3c6:	d1 f7       	brne	.-12     	; 0x3bc <UART_TxDecimalNumber+0x44>
 3c8:	2d c0       	rjmp	.+90     	; 0x424 <UART_TxDecimalNumber+0xac>
 3ca:	7e 01       	movw	r14, r28
 3cc:	08 94       	sec
 3ce:	e1 1c       	adc	r14, r1
 3d0:	f1 1c       	adc	r15, r1
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 3d2:	10 e0       	ldi	r17, 0x00	; 0
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the remainder and divide the number by 10 each time.
                If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
				The process continues till it becomes zero or max digits reached*/
				a[i]=util_GetMod32(var_decNumber_u32,10);
 3d4:	0f 2e       	mov	r0, r31
 3d6:	fa e0       	ldi	r31, 0x0A	; 10
 3d8:	8f 2e       	mov	r8, r31
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	9f 2e       	mov	r9, r31
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	af 2e       	mov	r10, r31
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	bf 2e       	mov	r11, r31
 3e6:	f0 2d       	mov	r31, r0
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
		{
			/* Continue extracting the digits from right side
			   till the Specified var_numOfDigitsToTransmit_u8 */
			if(var_decNumber_u32!=0)
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	a1 05       	cpc	r26, r1
 3ec:	b1 05       	cpc	r27, r1
 3ee:	69 f0       	breq	.+26     	; 0x40a <UART_TxDecimalNumber+0x92>
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the remainder and divide the number by 10 each time.
                If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
				The process continues till it becomes zero or max digits reached*/
				a[i]=util_GetMod32(var_decNumber_u32,10);
 3f0:	bc 01       	movw	r22, r24
 3f2:	cd 01       	movw	r24, r26
 3f4:	a5 01       	movw	r20, r10
 3f6:	94 01       	movw	r18, r8
 3f8:	0e 94 f7 05 	call	0xbee	; 0xbee <__udivmodsi4>
 3fc:	f7 01       	movw	r30, r14
 3fe:	60 83       	st	Z, r22
				var_decNumber_u32=var_decNumber_u32/10;
 400:	82 2f       	mov	r24, r18
 402:	93 2f       	mov	r25, r19
 404:	a4 2f       	mov	r26, r20
 406:	b5 2f       	mov	r27, r21
 408:	04 c0       	rjmp	.+8      	; 0x412 <UART_TxDecimalNumber+0x9a>
			}
			else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 40a:	0b 30       	cpi	r16, 0x0B	; 11
 40c:	48 f4       	brcc	.+18     	; 0x420 <UART_TxDecimalNumber+0xa8>
			else
			{
				/*In case user expects more digits to be transmitted than the actual digits in number,
  			    then update the remaining digits with zero.
                Ex: var_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0;
 40e:	f7 01       	movw	r30, r14
 410:	10 82       	st	Z, r1
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 412:	1f 5f       	subi	r17, 0xFF	; 255
 414:	08 94       	sec
 416:	e1 1c       	adc	r14, r1
 418:	f1 1c       	adc	r15, r1
 41a:	10 17       	cp	r17, r16
 41c:	29 f7       	brne	.-54     	; 0x3e8 <UART_TxDecimalNumber+0x70>
 41e:	02 c0       	rjmp	.+4      	; 0x424 <UART_TxDecimalNumber+0xac>
				a[i]=0;
			}
		}
	}

	while(i)
 420:	11 23       	and	r17, r17
 422:	49 f0       	breq	.+18     	; 0x436 <UART_TxDecimalNumber+0xbe>
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
 424:	fe 01       	movw	r30, r28
 426:	e1 0f       	add	r30, r17
 428:	f1 1d       	adc	r31, r1
 42a:	80 81       	ld	r24, Z
 42c:	80 5d       	subi	r24, 0xD0	; 208
 42e:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>
		i--;
 432:	11 50       	subi	r17, 0x01	; 1
				a[i]=0;
			}
		}
	}

	while(i)
 434:	b9 f7       	brne	.-18     	; 0x424 <UART_TxDecimalNumber+0xac>
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
		i--;
	}
}
 436:	2a 96       	adiw	r28, 0x0a	; 10
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	bf 90       	pop	r11
 450:	af 90       	pop	r10
 452:	9f 90       	pop	r9
 454:	8f 90       	pop	r8
 456:	08 95       	ret

00000458 <UART_TxHexNumber>:
				2.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
				3.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.
***************************************************************************************************/
#if (Enable_UART_TxHexNumber==1)
void UART_TxHexNumber(uint32_t var_hexNumber_u32,uint8_t var_numOfDigitsToTransmit_u8)
{
 458:	1f 93       	push	r17
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	2a 97       	sbiw	r28, 0x0a	; 10
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	de bf       	out	0x3e, r29	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	dc 01       	movw	r26, r24
 470:	cb 01       	movw	r24, r22
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
 472:	00 97       	sbiw	r24, 0x00	; 0
 474:	a1 05       	cpc	r26, r1
 476:	b1 05       	cpc	r27, r1
 478:	19 f0       	breq	.+6      	; 0x480 <UART_TxHexNumber+0x28>
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 47a:	44 23       	and	r20, r20
 47c:	69 f4       	brne	.+26     	; 0x498 <UART_TxHexNumber+0x40>
 47e:	36 c0       	rjmp	.+108    	; 0x4ec <UART_TxHexNumber+0x94>
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
	{
		/* If the number zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 480:	44 23       	and	r20, r20
 482:	a1 f1       	breq	.+104    	; 0x4ec <UART_TxHexNumber+0x94>
 484:	fe 01       	movw	r30, r28
 486:	31 96       	adiw	r30, 0x01	; 1
 488:	10 e0       	ldi	r17, 0x00	; 0
		  a[i]=0x00;
 48a:	11 92       	st	Z+, r1
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
	{
		/* If the number zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 48c:	1f 5f       	subi	r17, 0xFF	; 255
 48e:	14 17       	cp	r17, r20
 490:	01 f1       	breq	.+64     	; 0x4d2 <UART_TxHexNumber+0x7a>
 492:	1a 30       	cpi	r17, 0x0A	; 10
 494:	d1 f7       	brne	.-12     	; 0x48a <UART_TxHexNumber+0x32>
 496:	1d c0       	rjmp	.+58     	; 0x4d2 <UART_TxHexNumber+0x7a>
 498:	fe 01       	movw	r30, r28
 49a:	31 96       	adiw	r30, 0x01	; 1
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 49c:	10 e0       	ldi	r17, 0x00	; 0
		{
			/* Continue extracting the digits from right side till the Specified var_numOfDigitsToTransmit_u8 */
			if(var_hexNumber_u32!=0)
 49e:	00 97       	sbiw	r24, 0x00	; 0
 4a0:	a1 05       	cpc	r26, r1
 4a2:	b1 05       	cpc	r27, r1
 4a4:	61 f0       	breq	.+24     	; 0x4be <UART_TxHexNumber+0x66>
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the lower nibble and shift the number 4 times.
			   If var_number_u32 = 0xABC then extracted digit will be 0x0C and number will become 0xAB.
			   The process continues till it becomes zero or max digits reached*/
				a[i]=(uint8_t)(var_hexNumber_u32 & 0x0f);
 4a6:	28 2f       	mov	r18, r24
 4a8:	2f 70       	andi	r18, 0x0F	; 15
 4aa:	20 83       	st	Z, r18
				var_hexNumber_u32=var_hexNumber_u32 >> 4;
 4ac:	68 94       	set
 4ae:	13 f8       	bld	r1, 3
 4b0:	b6 95       	lsr	r27
 4b2:	a7 95       	ror	r26
 4b4:	97 95       	ror	r25
 4b6:	87 95       	ror	r24
 4b8:	16 94       	lsr	r1
 4ba:	d1 f7       	brne	.-12     	; 0x4b0 <UART_TxHexNumber+0x58>
 4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <UART_TxHexNumber+0x6c>
			}
			else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 4be:	4b 30       	cpi	r20, 0x0B	; 11
 4c0:	30 f4       	brcc	.+12     	; 0x4ce <UART_TxHexNumber+0x76>
			else
			{
				/* In case user expects more digits to be transmitted than the actual digits in number,
  			           then update the remaining digits with zero.
                Ex: var_number_u32 is 0x123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0x00;
 4c2:	10 82       	st	Z, r1
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 4c4:	1f 5f       	subi	r17, 0xFF	; 255
 4c6:	31 96       	adiw	r30, 0x01	; 1
 4c8:	14 17       	cp	r17, r20
 4ca:	49 f7       	brne	.-46     	; 0x49e <UART_TxHexNumber+0x46>
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <UART_TxHexNumber+0x7a>
				a[i]=0x00;
			}
		}
	}

	while(i!=0)
 4ce:	11 23       	and	r17, r17
 4d0:	69 f0       	breq	.+26     	; 0x4ec <UART_TxHexNumber+0x94>
	{
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Hex2Ascii(a[i-1]));
 4d2:	fe 01       	movw	r30, r28
 4d4:	e1 0f       	add	r30, r17
 4d6:	f1 1d       	adc	r31, r1
 4d8:	80 81       	ld	r24, Z
 4da:	8a 30       	cpi	r24, 0x0A	; 10
 4dc:	10 f0       	brcs	.+4      	; 0x4e2 <UART_TxHexNumber+0x8a>
 4de:	89 5c       	subi	r24, 0xC9	; 201
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <UART_TxHexNumber+0x8c>
 4e2:	80 5d       	subi	r24, 0xD0	; 208
 4e4:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>
		i--;
 4e8:	11 50       	subi	r17, 0x01	; 1
				a[i]=0x00;
			}
		}
	}

	while(i!=0)
 4ea:	99 f7       	brne	.-26     	; 0x4d2 <UART_TxHexNumber+0x7a>
	{
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Hex2Ascii(a[i-1]));
		i--;
	}
}
 4ec:	2a 96       	adiw	r28, 0x0a	; 10
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	08 95       	ret

00000500 <UART_TxBinaryNumber>:
				2.(10,8) then 8-LSB will be transmitted ie. 00001010
				3.(10,2) then 2-LSB will be transmitted ie. 10
***************************************************************************************************/
#if (Enable_UART_TxBinaryNumber==1)
void UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
{
 500:	bf 92       	push	r11
 502:	cf 92       	push	r12
 504:	df 92       	push	r13
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	6b 01       	movw	r12, r22
 514:	7c 01       	movw	r14, r24
 516:	c4 2f       	mov	r28, r20
	uint8_t ch;

	while(var_numOfBitsToTransmit_u8!=0)
 518:	44 23       	and	r20, r20
 51a:	19 f1       	breq	.+70     	; 0x562 <UART_TxBinaryNumber+0x62>
	{
		/* Start Extracting the bits from the specified bit positions.
	     Get the Acsii values of the bits and transmit */
		ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToTransmit_u8-1));
 51c:	01 e0       	ldi	r16, 0x01	; 1
 51e:	10 e0       	ldi	r17, 0x00	; 0
 520:	d1 e0       	ldi	r29, 0x01	; 1
 522:	bb 24       	eor	r11, r11
 524:	4c 2f       	mov	r20, r28
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	41 50       	subi	r20, 0x01	; 1
 52a:	50 40       	sbci	r21, 0x00	; 0
 52c:	c8 01       	movw	r24, r16
 52e:	02 c0       	rjmp	.+4      	; 0x534 <UART_TxBinaryNumber+0x34>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	4a 95       	dec	r20
 536:	e2 f7       	brpl	.-8      	; 0x530 <UART_TxBinaryNumber+0x30>
 538:	ac 01       	movw	r20, r24
 53a:	66 27       	eor	r22, r22
 53c:	57 fd       	sbrc	r21, 7
 53e:	60 95       	com	r22
 540:	76 2f       	mov	r23, r22
 542:	4c 21       	and	r20, r12
 544:	5d 21       	and	r21, r13
 546:	6e 21       	and	r22, r14
 548:	7f 21       	and	r23, r15
 54a:	8d 2f       	mov	r24, r29
 54c:	41 15       	cp	r20, r1
 54e:	51 05       	cpc	r21, r1
 550:	61 05       	cpc	r22, r1
 552:	71 05       	cpc	r23, r1
 554:	09 f4       	brne	.+2      	; 0x558 <UART_TxBinaryNumber+0x58>
 556:	8b 2d       	mov	r24, r11
		UART_TxChar(util_Dec2Ascii(ch));
 558:	80 5d       	subi	r24, 0xD0	; 208
 55a:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>
		var_numOfBitsToTransmit_u8--;
 55e:	c1 50       	subi	r28, 0x01	; 1
#if (Enable_UART_TxBinaryNumber==1)
void UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
{
	uint8_t ch;

	while(var_numOfBitsToTransmit_u8!=0)
 560:	09 f7       	brne	.-62     	; 0x524 <UART_TxBinaryNumber+0x24>
	     Get the Acsii values of the bits and transmit */
		ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToTransmit_u8-1));
		UART_TxChar(util_Dec2Ascii(ch));
		var_numOfBitsToTransmit_u8--;
	}
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	bf 90       	pop	r11
 574:	08 95       	ret

00000576 <UART_TxFloatNumber>:
         Float will be disabled by default as it takes huge controller resources
	     It can be enabled by changing value of Enable_UART_TxFloatNumber to 1 in uart.h	 
 ***************************************************************************************************/
#if (Enable_UART_TxFloatNumber==1)
void UART_TxFloatNumber(float var_floatNumber_f32)
{
 576:	cf 92       	push	r12
 578:	df 92       	push	r13
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	6b 01       	movw	r12, r22
 588:	7c 01       	movw	r14, r24
      1.Type cast the number to int to get the integer part.
	  2.transmit the extracted integer part followed by a decimal point(.).
	  3.Later the integer part is made zero by subtracting with the extracted integer value.
	  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

	var_tempNumber_u32 = (uint32_t) var_floatNumber_f32;
 58a:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 58e:	06 2f       	mov	r16, r22
 590:	17 2f       	mov	r17, r23
 592:	d8 2f       	mov	r29, r24
 594:	c9 2f       	mov	r28, r25
	UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 596:	4f ef       	ldi	r20, 0xFF	; 255
 598:	0e 94 bc 01 	call	0x378	; 0x378 <UART_TxDecimalNumber>

	UART_TxChar('.');
 59c:	8e e2       	ldi	r24, 0x2E	; 46
 59e:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>

	var_floatNumber_f32 = var_floatNumber_f32 - var_tempNumber_u32;
 5a2:	60 2f       	mov	r22, r16
 5a4:	71 2f       	mov	r23, r17
 5a6:	8d 2f       	mov	r24, r29
 5a8:	9c 2f       	mov	r25, r28
 5aa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__floatunsisf>
 5ae:	9b 01       	movw	r18, r22
 5b0:	ac 01       	movw	r20, r24
 5b2:	c7 01       	movw	r24, r14
 5b4:	b6 01       	movw	r22, r12
 5b6:	0e 94 56 04 	call	0x8ac	; 0x8ac <__subsf3>
	var_tempNumber_u32 = var_floatNumber_f32 * 1000000;
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	34 e2       	ldi	r19, 0x24	; 36
 5be:	44 e7       	ldi	r20, 0x74	; 116
 5c0:	59 e4       	ldi	r21, 0x49	; 73
 5c2:	0e 94 75 05 	call	0xaea	; 0xaea <__mulsf3>
 5c6:	46 2f       	mov	r20, r22
 5c8:	57 2f       	mov	r21, r23
 5ca:	68 2f       	mov	r22, r24
 5cc:	79 2f       	mov	r23, r25
 5ce:	cb 01       	movw	r24, r22
 5d0:	ba 01       	movw	r22, r20
 5d2:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
	UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 5d6:	4f ef       	ldi	r20, 0xFF	; 255
 5d8:	0e 94 bc 01 	call	0x378	; 0x378 <UART_TxDecimalNumber>
}
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	ff 90       	pop	r15
 5e6:	ef 90       	pop	r14
 5e8:	df 90       	pop	r13
 5ea:	cf 90       	pop	r12
 5ec:	08 95       	ret

000005ee <UART_Printf>:
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
{
 5ee:	5f 92       	push	r5
 5f0:	6f 92       	push	r6
 5f2:	7f 92       	push	r7
 5f4:	8f 92       	push	r8
 5f6:	9f 92       	push	r9
 5f8:	af 92       	push	r10
 5fa:	bf 92       	push	r11
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	0f 2e       	mov	r0, r31
 612:	f2 e1       	ldi	r31, 0x12	; 18
 614:	cf 2e       	mov	r12, r31
 616:	dd 24       	eor	r13, r13
 618:	f0 2d       	mov	r31, r0
 61a:	cc 0e       	add	r12, r28
 61c:	dd 1e       	adc	r13, r29
 61e:	d6 01       	movw	r26, r12
 620:	ed 91       	ld	r30, X+
 622:	fd 91       	ld	r31, X+
 624:	6d 01       	movw	r12, r26
	uint8_t var_numOfDigitsToTransmit_u8;

	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 626:	80 81       	ld	r24, Z
 628:	88 23       	and	r24, r24
 62a:	09 f4       	brne	.+2      	; 0x62e <UART_Printf+0x40>
 62c:	2f c1       	rjmp	.+606    	; 0x88c <UART_Printf+0x29e>
 62e:	8f 01       	movw	r16, r30
			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;
 630:	55 24       	eor	r5, r5
 632:	68 94       	set
 634:	54 f8       	bld	r5, 4
				   ch = *ptr;
				}
			}
			else
			{
			  var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 636:	99 24       	eor	r9, r9
 638:	9a 94       	dec	r9
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
 63a:	88 24       	eor	r8, r8
	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
	{

		ch= *ptr;
		if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 63c:	85 32       	cpi	r24, 0x25	; 37
 63e:	09 f0       	breq	.+2      	; 0x642 <UART_Printf+0x54>
 640:	18 c1       	rjmp	.+560    	; 0x872 <UART_Printf+0x284>
		{
		    ptr++;
 642:	58 01       	movw	r10, r16
 644:	08 94       	sec
 646:	a1 1c       	adc	r10, r1
 648:	b1 1c       	adc	r11, r1
		    ch = *ptr;
 64a:	f8 01       	movw	r30, r16
 64c:	81 81       	ldd	r24, Z+1	; 0x01
		   if((ch>=0x30) && (ch<=0x39))
 64e:	98 2f       	mov	r25, r24
 650:	90 53       	subi	r25, 0x30	; 48
 652:	9a 30       	cpi	r25, 0x0A	; 10
 654:	80 f4       	brcc	.+32     	; 0x676 <UART_Printf+0x88>
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
 656:	32 96       	adiw	r30, 0x02	; 2
 658:	18 2d       	mov	r17, r8
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   var_numOfDigitsToTransmit_u8 = (var_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 65a:	11 0f       	add	r17, r17
 65c:	91 2f       	mov	r25, r17
 65e:	99 0f       	add	r25, r25
 660:	99 0f       	add	r25, r25
 662:	19 0f       	add	r17, r25
 664:	80 53       	subi	r24, 0x30	; 48
 666:	18 0f       	add	r17, r24
				   ptr++;
 668:	5f 01       	movw	r10, r30
				   ch = *ptr;
 66a:	81 91       	ld	r24, Z+
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
 66c:	98 2f       	mov	r25, r24
 66e:	90 53       	subi	r25, 0x30	; 48
 670:	9a 30       	cpi	r25, 0x0A	; 10
 672:	98 f3       	brcs	.-26     	; 0x65a <UART_Printf+0x6c>
 674:	01 c0       	rjmp	.+2      	; 0x678 <UART_Printf+0x8a>
				   ch = *ptr;
				}
			}
			else
			{
			  var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 676:	19 2d       	mov	r17, r9
			}				


			switch(ch)       /* Decode the type of the argument */
 678:	88 35       	cpi	r24, 0x58	; 88
 67a:	09 f4       	brne	.+2      	; 0x67e <UART_Printf+0x90>
 67c:	a8 c0       	rjmp	.+336    	; 0x7ce <UART_Printf+0x1e0>
 67e:	89 35       	cpi	r24, 0x59	; 89
 680:	c0 f4       	brcc	.+48     	; 0x6b2 <UART_Printf+0xc4>
 682:	84 34       	cpi	r24, 0x44	; 68
 684:	09 f4       	brne	.+2      	; 0x688 <UART_Printf+0x9a>
 686:	51 c0       	rjmp	.+162    	; 0x72a <UART_Printf+0x13c>
 688:	85 34       	cpi	r24, 0x45	; 69
 68a:	48 f4       	brcc	.+18     	; 0x69e <UART_Printf+0xb0>
 68c:	82 34       	cpi	r24, 0x42	; 66
 68e:	09 f4       	brne	.+2      	; 0x692 <UART_Printf+0xa4>
 690:	c2 c0       	rjmp	.+388    	; 0x816 <UART_Printf+0x228>
 692:	83 34       	cpi	r24, 0x43	; 67
 694:	28 f5       	brcc	.+74     	; 0x6e0 <UART_Printf+0xf2>
 696:	85 32       	cpi	r24, 0x25	; 37
 698:	09 f0       	breq	.+2      	; 0x69c <UART_Printf+0xae>
 69a:	ee c0       	rjmp	.+476    	; 0x878 <UART_Printf+0x28a>
 69c:	e6 c0       	rjmp	.+460    	; 0x86a <UART_Printf+0x27c>
 69e:	83 35       	cpi	r24, 0x53	; 83
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <UART_Printf+0xb6>
 6a2:	d9 c0       	rjmp	.+434    	; 0x856 <UART_Printf+0x268>
 6a4:	85 35       	cpi	r24, 0x55	; 85
 6a6:	09 f4       	brne	.+2      	; 0x6aa <UART_Printf+0xbc>
 6a8:	71 c0       	rjmp	.+226    	; 0x78c <UART_Printf+0x19e>
 6aa:	86 34       	cpi	r24, 0x46	; 70
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <UART_Printf+0xc2>
 6ae:	e4 c0       	rjmp	.+456    	; 0x878 <UART_Printf+0x28a>
 6b0:	c6 c0       	rjmp	.+396    	; 0x83e <UART_Printf+0x250>
 6b2:	86 36       	cpi	r24, 0x66	; 102
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <UART_Printf+0xca>
 6b6:	c3 c0       	rjmp	.+390    	; 0x83e <UART_Printf+0x250>
 6b8:	87 36       	cpi	r24, 0x67	; 103
 6ba:	40 f4       	brcc	.+16     	; 0x6cc <UART_Printf+0xde>
 6bc:	83 36       	cpi	r24, 0x63	; 99
 6be:	81 f0       	breq	.+32     	; 0x6e0 <UART_Printf+0xf2>
 6c0:	84 36       	cpi	r24, 0x64	; 100
 6c2:	b9 f0       	breq	.+46     	; 0x6f2 <UART_Printf+0x104>
 6c4:	82 36       	cpi	r24, 0x62	; 98
 6c6:	09 f0       	breq	.+2      	; 0x6ca <UART_Printf+0xdc>
 6c8:	d7 c0       	rjmp	.+430    	; 0x878 <UART_Printf+0x28a>
 6ca:	91 c0       	rjmp	.+290    	; 0x7ee <UART_Printf+0x200>
 6cc:	85 37       	cpi	r24, 0x75	; 117
 6ce:	09 f4       	brne	.+2      	; 0x6d2 <UART_Printf+0xe4>
 6d0:	4c c0       	rjmp	.+152    	; 0x76a <UART_Printf+0x17c>
 6d2:	88 37       	cpi	r24, 0x78	; 120
 6d4:	09 f4       	brne	.+2      	; 0x6d8 <UART_Printf+0xea>
 6d6:	6a c0       	rjmp	.+212    	; 0x7ac <UART_Printf+0x1be>
 6d8:	83 37       	cpi	r24, 0x73	; 115
 6da:	09 f0       	breq	.+2      	; 0x6de <UART_Printf+0xf0>
 6dc:	cd c0       	rjmp	.+410    	; 0x878 <UART_Printf+0x28a>
 6de:	bb c0       	rjmp	.+374    	; 0x856 <UART_Printf+0x268>
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 6e0:	86 01       	movw	r16, r12
 6e2:	0e 5f       	subi	r16, 0xFE	; 254
 6e4:	1f 4f       	sbci	r17, 0xFF	; 255
				UART_TxChar(ch);
 6e6:	d6 01       	movw	r26, r12
 6e8:	8c 91       	ld	r24, X
 6ea:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>

			switch(ch)       /* Decode the type of the argument */
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 6ee:	68 01       	movw	r12, r16
				UART_TxChar(ch);
				break;
 6f0:	c3 c0       	rjmp	.+390    	; 0x878 <UART_Printf+0x28a>

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 6f2:	ee 24       	eor	r14, r14
 6f4:	ff 24       	eor	r15, r15
 6f6:	68 94       	set
 6f8:	e1 f8       	bld	r14, 1
 6fa:	ec 0c       	add	r14, r12
 6fc:	fd 1c       	adc	r15, r13
 6fe:	f6 01       	movw	r30, r12
 700:	c0 80       	ld	r12, Z
 702:	d1 80       	ldd	r13, Z+1	; 0x01
#if (Enable_UART_TxDecimalNumber == 1)
				if(var_num_s16<0)
 704:	dd 20       	and	r13, r13
 706:	3c f4       	brge	.+14     	; 0x716 <UART_Printf+0x128>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   var_num_s16 = -var_num_s16;
 708:	d0 94       	com	r13
 70a:	c1 94       	neg	r12
 70c:	d1 08       	sbc	r13, r1
 70e:	d3 94       	inc	r13
				   UART_TxChar('-');
 710:	8d e2       	ldi	r24, 0x2D	; 45
 712:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>
				 }
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
 716:	b6 01       	movw	r22, r12
 718:	88 27       	eor	r24, r24
 71a:	77 fd       	sbrc	r23, 7
 71c:	80 95       	com	r24
 71e:	98 2f       	mov	r25, r24
 720:	41 2f       	mov	r20, r17
 722:	0e 94 bc 01 	call	0x378	; 0x378 <UART_TxDecimalNumber>
				ch = va_arg(argp, uint16_t);
				UART_TxChar(ch);
				break;

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 726:	67 01       	movw	r12, r14
				   var_num_s16 = -var_num_s16;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
#endif
				break;
 728:	a7 c0       	rjmp	.+334    	; 0x878 <UART_Printf+0x28a>
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 72a:	66 24       	eor	r6, r6
 72c:	77 24       	eor	r7, r7
 72e:	68 94       	set
 730:	62 f8       	bld	r6, 2
 732:	6c 0c       	add	r6, r12
 734:	7d 1c       	adc	r7, r13
 736:	d6 01       	movw	r26, r12
 738:	cd 90       	ld	r12, X+
 73a:	dd 90       	ld	r13, X+
 73c:	ed 90       	ld	r14, X+
 73e:	fc 90       	ld	r15, X
 740:	13 97       	sbiw	r26, 0x03	; 3
#if (Enable_UART_TxDecimalNumber == 1)				
				if(var_num_s32<0)
 742:	ff 20       	and	r15, r15
 744:	5c f4       	brge	.+22     	; 0x75c <UART_Printf+0x16e>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   var_num_s32 = -var_num_s32;
 746:	f0 94       	com	r15
 748:	e0 94       	com	r14
 74a:	d0 94       	com	r13
 74c:	c0 94       	com	r12
 74e:	c1 1c       	adc	r12, r1
 750:	d1 1c       	adc	r13, r1
 752:	e1 1c       	adc	r14, r1
 754:	f1 1c       	adc	r15, r1
				   UART_TxChar('-');
 756:	8d e2       	ldi	r24, 0x2D	; 45
 758:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>
				 }
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
 75c:	c7 01       	movw	r24, r14
 75e:	b6 01       	movw	r22, r12
 760:	41 2f       	mov	r20, r17
 762:	0e 94 bc 01 	call	0x378	; 0x378 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
#endif
				break;
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 766:	63 01       	movw	r12, r6
				   var_num_s32 = -var_num_s32;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
#endif				
				break;	
 768:	87 c0       	rjmp	.+270    	; 0x878 <UART_Printf+0x28a>

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				var_num_u16 = va_arg(argp, uint16_t);
 76a:	ee 24       	eor	r14, r14
 76c:	ff 24       	eor	r15, r15
 76e:	68 94       	set
 770:	e1 f8       	bld	r14, 1
 772:	ec 0c       	add	r14, r12
 774:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 776:	f6 01       	movw	r30, r12
 778:	80 81       	ld	r24, Z
 77a:	91 81       	ldd	r25, Z+1	; 0x01
 77c:	bc 01       	movw	r22, r24
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	41 2f       	mov	r20, r17
 784:	0e 94 bc 01 	call	0x378	; 0x378 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
#endif				
				break;	

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				var_num_u16 = va_arg(argp, uint16_t);
 788:	67 01       	movw	r12, r14
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 78a:	76 c0       	rjmp	.+236    	; 0x878 <UART_Printf+0x28a>
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				var_num_u32 = va_arg(argp, uint32_t);
 78c:	ee 24       	eor	r14, r14
 78e:	ff 24       	eor	r15, r15
 790:	68 94       	set
 792:	e2 f8       	bld	r14, 2
 794:	ec 0c       	add	r14, r12
 796:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 798:	d6 01       	movw	r26, r12
 79a:	6d 91       	ld	r22, X+
 79c:	7d 91       	ld	r23, X+
 79e:	8d 91       	ld	r24, X+
 7a0:	9c 91       	ld	r25, X
 7a2:	41 2f       	mov	r20, r17
 7a4:	0e 94 bc 01 	call	0x378	; 0x378 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				var_num_u32 = va_arg(argp, uint32_t);
 7a8:	67 01       	movw	r12, r14
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;			
 7aa:	66 c0       	rjmp	.+204    	; 0x878 <UART_Printf+0x28a>

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u16 = va_arg(argp, uint16_t);
 7ac:	ee 24       	eor	r14, r14
 7ae:	ff 24       	eor	r15, r15
 7b0:	68 94       	set
 7b2:	e1 f8       	bld	r14, 1
 7b4:	ec 0c       	add	r14, r12
 7b6:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxHexNumber == 1)				
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 7b8:	f6 01       	movw	r30, r12
 7ba:	80 81       	ld	r24, Z
 7bc:	91 81       	ldd	r25, Z+1	; 0x01
 7be:	bc 01       	movw	r22, r24
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	41 2f       	mov	r20, r17
 7c6:	0e 94 2c 02 	call	0x458	; 0x458 <UART_TxHexNumber>
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;			

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u16 = va_arg(argp, uint16_t);
 7ca:	67 01       	movw	r12, r14
#if (Enable_UART_TxHexNumber == 1)				
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 7cc:	55 c0       	rjmp	.+170    	; 0x878 <UART_Printf+0x28a>

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u32 = va_arg(argp, uint32_t);
 7ce:	ee 24       	eor	r14, r14
 7d0:	ff 24       	eor	r15, r15
 7d2:	68 94       	set
 7d4:	e2 f8       	bld	r14, 2
 7d6:	ec 0c       	add	r14, r12
 7d8:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxHexNumber == 1)						
				UART_TxHexNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 7da:	d6 01       	movw	r26, r12
 7dc:	6d 91       	ld	r22, X+
 7de:	7d 91       	ld	r23, X+
 7e0:	8d 91       	ld	r24, X+
 7e2:	9c 91       	ld	r25, X
 7e4:	41 2f       	mov	r20, r17
 7e6:	0e 94 2c 02 	call	0x458	; 0x458 <UART_TxHexNumber>
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u32 = va_arg(argp, uint32_t);
 7ea:	67 01       	movw	r12, r14
#if (Enable_UART_TxHexNumber == 1)						
				UART_TxHexNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 7ec:	45 c0       	rjmp	.+138    	; 0x878 <UART_Printf+0x28a>

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
 7ee:	ee 24       	eor	r14, r14
 7f0:	ff 24       	eor	r15, r15
 7f2:	68 94       	set
 7f4:	e1 f8       	bld	r14, 1
 7f6:	ec 0c       	add	r14, r12
 7f8:	fd 1c       	adc	r15, r13
 7fa:	f6 01       	movw	r30, r12
 7fc:	80 81       	ld	r24, Z
 7fe:	91 81       	ldd	r25, Z+1	; 0x01
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 800:	1f 3f       	cpi	r17, 0xFF	; 255
 802:	09 f4       	brne	.+2      	; 0x806 <UART_Printf+0x218>
				   var_numOfDigitsToTransmit_u8 = 16;
 804:	15 2d       	mov	r17, r5
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 806:	bc 01       	movw	r22, r24
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	41 2f       	mov	r20, r17
 80e:	0e 94 80 02 	call	0x500	; 0x500 <UART_TxBinaryNumber>
#endif				
				break;

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
 812:	67 01       	movw	r12, r14
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 814:	31 c0       	rjmp	.+98     	; 0x878 <UART_Printf+0x28a>

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u32 = va_arg(argp, uint32_t);
 816:	ee 24       	eor	r14, r14
 818:	ff 24       	eor	r15, r15
 81a:	68 94       	set
 81c:	e2 f8       	bld	r14, 2
 81e:	ec 0c       	add	r14, r12
 820:	fd 1c       	adc	r15, r13
 822:	d6 01       	movw	r26, r12
 824:	6d 91       	ld	r22, X+
 826:	7d 91       	ld	r23, X+
 828:	8d 91       	ld	r24, X+
 82a:	9c 91       	ld	r25, X
 82c:	13 97       	sbiw	r26, 0x03	; 3
#if (Enable_UART_TxBinaryNumber == 1)				
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 82e:	1f 3f       	cpi	r17, 0xFF	; 255
 830:	09 f4       	brne	.+2      	; 0x834 <UART_Printf+0x246>
				   var_numOfDigitsToTransmit_u8 = 16;				
 832:	15 2d       	mov	r17, r5
				UART_TxBinaryNumber(var_num_u32,var_numOfDigitsToTransmit_u8);	
 834:	41 2f       	mov	r20, r17
 836:	0e 94 80 02 	call	0x500	; 0x500 <UART_TxBinaryNumber>
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u32 = va_arg(argp, uint32_t);
 83a:	67 01       	movw	r12, r14
#if (Enable_UART_TxBinaryNumber == 1)				
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;				
				UART_TxBinaryNumber(var_num_u32,var_numOfDigitsToTransmit_u8);	
#endif				
				break;
 83c:	1d c0       	rjmp	.+58     	; 0x878 <UART_Printf+0x28a>

			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
				var_floatNum_f32 = va_arg(argp, double);
 83e:	86 01       	movw	r16, r12
 840:	0c 5f       	subi	r16, 0xFC	; 252
 842:	1f 4f       	sbci	r17, 0xFF	; 255
#if (Enable_UART_TxFloatNumber == 1)				
				UART_TxFloatNumber(var_floatNum_f32);
 844:	f6 01       	movw	r30, r12
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	82 81       	ldd	r24, Z+2	; 0x02
 84c:	93 81       	ldd	r25, Z+3	; 0x03
 84e:	0e 94 bb 02 	call	0x576	; 0x576 <UART_TxFloatNumber>
#endif				
				break;

			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
				var_floatNum_f32 = va_arg(argp, double);
 852:	68 01       	movw	r12, r16
#if (Enable_UART_TxFloatNumber == 1)				
				UART_TxFloatNumber(var_floatNum_f32);
#endif
				break;
 854:	11 c0       	rjmp	.+34     	; 0x878 <UART_Printf+0x28a>


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
 856:	f6 01       	movw	r30, r12
 858:	82 e0       	ldi	r24, 0x02	; 2
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	c8 0e       	add	r12, r24
 85e:	d9 1e       	adc	r13, r25
#if (Enable_UART_TxString == 1)
				UART_TxString(str);
 860:	80 81       	ld	r24, Z
 862:	91 81       	ldd	r25, Z+1	; 0x01
 864:	0e 94 99 01 	call	0x332	; 0x332 <UART_TxString>
#endif				
				break;
 868:	07 c0       	rjmp	.+14     	; 0x878 <UART_Printf+0x28a>

			case '%':
				UART_TxChar('%');
 86a:	85 e2       	ldi	r24, 0x25	; 37
 86c:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>
				break;
 870:	03 c0       	rjmp	.+6      	; 0x878 <UART_Printf+0x28a>
			}
		}
		else
		{
			/* As '%' is not detected transmit the char passed */
			UART_TxChar(ch);
 872:	0e 94 91 01 	call	0x322	; 0x322 <UART_TxChar>
 876:	58 01       	movw	r10, r16
	uint8_t var_numOfDigitsToTransmit_u8;

	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 878:	85 01       	movw	r16, r10
 87a:	0f 5f       	subi	r16, 0xFF	; 255
 87c:	1f 4f       	sbci	r17, 0xFF	; 255
 87e:	d5 01       	movw	r26, r10
 880:	11 96       	adiw	r26, 0x01	; 1
 882:	8c 91       	ld	r24, X
 884:	11 97       	sbiw	r26, 0x01	; 1
 886:	88 23       	and	r24, r24
 888:	09 f0       	breq	.+2      	; 0x88c <UART_Printf+0x29e>
 88a:	d8 ce       	rjmp	.-592    	; 0x63c <UART_Printf+0x4e>
			UART_TxChar(ch);
		}
	}

	va_end(argp);
}
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	1f 91       	pop	r17
 892:	0f 91       	pop	r16
 894:	ff 90       	pop	r15
 896:	ef 90       	pop	r14
 898:	df 90       	pop	r13
 89a:	cf 90       	pop	r12
 89c:	bf 90       	pop	r11
 89e:	af 90       	pop	r10
 8a0:	9f 90       	pop	r9
 8a2:	8f 90       	pop	r8
 8a4:	7f 90       	pop	r7
 8a6:	6f 90       	pop	r6
 8a8:	5f 90       	pop	r5
 8aa:	08 95       	ret

000008ac <__subsf3>:
 8ac:	50 58       	subi	r21, 0x80	; 128

000008ae <__addsf3>:
 8ae:	bb 27       	eor	r27, r27
 8b0:	aa 27       	eor	r26, r26
 8b2:	0e d0       	rcall	.+28     	; 0x8d0 <__addsf3x>
 8b4:	e0 c0       	rjmp	.+448    	; 0xa76 <__fp_round>
 8b6:	d1 d0       	rcall	.+418    	; 0xa5a <__fp_pscA>
 8b8:	30 f0       	brcs	.+12     	; 0x8c6 <__addsf3+0x18>
 8ba:	d6 d0       	rcall	.+428    	; 0xa68 <__fp_pscB>
 8bc:	20 f0       	brcs	.+8      	; 0x8c6 <__addsf3+0x18>
 8be:	31 f4       	brne	.+12     	; 0x8cc <__addsf3+0x1e>
 8c0:	9f 3f       	cpi	r25, 0xFF	; 255
 8c2:	11 f4       	brne	.+4      	; 0x8c8 <__addsf3+0x1a>
 8c4:	1e f4       	brtc	.+6      	; 0x8cc <__addsf3+0x1e>
 8c6:	c6 c0       	rjmp	.+396    	; 0xa54 <__fp_nan>
 8c8:	0e f4       	brtc	.+2      	; 0x8cc <__addsf3+0x1e>
 8ca:	e0 95       	com	r30
 8cc:	e7 fb       	bst	r30, 7
 8ce:	bc c0       	rjmp	.+376    	; 0xa48 <__fp_inf>

000008d0 <__addsf3x>:
 8d0:	e9 2f       	mov	r30, r25
 8d2:	e2 d0       	rcall	.+452    	; 0xa98 <__fp_split3>
 8d4:	80 f3       	brcs	.-32     	; 0x8b6 <__addsf3+0x8>
 8d6:	ba 17       	cp	r27, r26
 8d8:	62 07       	cpc	r22, r18
 8da:	73 07       	cpc	r23, r19
 8dc:	84 07       	cpc	r24, r20
 8de:	95 07       	cpc	r25, r21
 8e0:	18 f0       	brcs	.+6      	; 0x8e8 <__addsf3x+0x18>
 8e2:	71 f4       	brne	.+28     	; 0x900 <__stack+0x1>
 8e4:	9e f5       	brtc	.+102    	; 0x94c <__stack+0x4d>
 8e6:	fa c0       	rjmp	.+500    	; 0xadc <__fp_zero>
 8e8:	0e f4       	brtc	.+2      	; 0x8ec <__addsf3x+0x1c>
 8ea:	e0 95       	com	r30
 8ec:	0b 2e       	mov	r0, r27
 8ee:	ba 2f       	mov	r27, r26
 8f0:	a0 2d       	mov	r26, r0
 8f2:	0b 01       	movw	r0, r22
 8f4:	b9 01       	movw	r22, r18
 8f6:	90 01       	movw	r18, r0
 8f8:	0c 01       	movw	r0, r24
 8fa:	ca 01       	movw	r24, r20
 8fc:	a0 01       	movw	r20, r0
 8fe:	11 24       	eor	r1, r1
 900:	ff 27       	eor	r31, r31
 902:	59 1b       	sub	r21, r25
 904:	99 f0       	breq	.+38     	; 0x92c <__stack+0x2d>
 906:	59 3f       	cpi	r21, 0xF9	; 249
 908:	50 f4       	brcc	.+20     	; 0x91e <__stack+0x1f>
 90a:	50 3e       	cpi	r21, 0xE0	; 224
 90c:	68 f1       	brcs	.+90     	; 0x968 <__stack+0x69>
 90e:	1a 16       	cp	r1, r26
 910:	f0 40       	sbci	r31, 0x00	; 0
 912:	a2 2f       	mov	r26, r18
 914:	23 2f       	mov	r18, r19
 916:	34 2f       	mov	r19, r20
 918:	44 27       	eor	r20, r20
 91a:	58 5f       	subi	r21, 0xF8	; 248
 91c:	f3 cf       	rjmp	.-26     	; 0x904 <__stack+0x5>
 91e:	46 95       	lsr	r20
 920:	37 95       	ror	r19
 922:	27 95       	ror	r18
 924:	a7 95       	ror	r26
 926:	f0 40       	sbci	r31, 0x00	; 0
 928:	53 95       	inc	r21
 92a:	c9 f7       	brne	.-14     	; 0x91e <__stack+0x1f>
 92c:	7e f4       	brtc	.+30     	; 0x94c <__stack+0x4d>
 92e:	1f 16       	cp	r1, r31
 930:	ba 0b       	sbc	r27, r26
 932:	62 0b       	sbc	r22, r18
 934:	73 0b       	sbc	r23, r19
 936:	84 0b       	sbc	r24, r20
 938:	ba f0       	brmi	.+46     	; 0x968 <__stack+0x69>
 93a:	91 50       	subi	r25, 0x01	; 1
 93c:	a1 f0       	breq	.+40     	; 0x966 <__stack+0x67>
 93e:	ff 0f       	add	r31, r31
 940:	bb 1f       	adc	r27, r27
 942:	66 1f       	adc	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	c2 f7       	brpl	.-16     	; 0x93a <__stack+0x3b>
 94a:	0e c0       	rjmp	.+28     	; 0x968 <__stack+0x69>
 94c:	ba 0f       	add	r27, r26
 94e:	62 1f       	adc	r22, r18
 950:	73 1f       	adc	r23, r19
 952:	84 1f       	adc	r24, r20
 954:	48 f4       	brcc	.+18     	; 0x968 <__stack+0x69>
 956:	87 95       	ror	r24
 958:	77 95       	ror	r23
 95a:	67 95       	ror	r22
 95c:	b7 95       	ror	r27
 95e:	f7 95       	ror	r31
 960:	9e 3f       	cpi	r25, 0xFE	; 254
 962:	08 f0       	brcs	.+2      	; 0x966 <__stack+0x67>
 964:	b3 cf       	rjmp	.-154    	; 0x8cc <__addsf3+0x1e>
 966:	93 95       	inc	r25
 968:	88 0f       	add	r24, r24
 96a:	08 f0       	brcs	.+2      	; 0x96e <__stack+0x6f>
 96c:	99 27       	eor	r25, r25
 96e:	ee 0f       	add	r30, r30
 970:	97 95       	ror	r25
 972:	87 95       	ror	r24
 974:	08 95       	ret

00000976 <__fixunssfsi>:
 976:	98 d0       	rcall	.+304    	; 0xaa8 <__fp_splitA>
 978:	88 f0       	brcs	.+34     	; 0x99c <__fixunssfsi+0x26>
 97a:	9f 57       	subi	r25, 0x7F	; 127
 97c:	90 f0       	brcs	.+36     	; 0x9a2 <__fixunssfsi+0x2c>
 97e:	b9 2f       	mov	r27, r25
 980:	99 27       	eor	r25, r25
 982:	b7 51       	subi	r27, 0x17	; 23
 984:	a0 f0       	brcs	.+40     	; 0x9ae <__fixunssfsi+0x38>
 986:	d1 f0       	breq	.+52     	; 0x9bc <__fixunssfsi+0x46>
 988:	66 0f       	add	r22, r22
 98a:	77 1f       	adc	r23, r23
 98c:	88 1f       	adc	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	1a f0       	brmi	.+6      	; 0x998 <__fixunssfsi+0x22>
 992:	ba 95       	dec	r27
 994:	c9 f7       	brne	.-14     	; 0x988 <__fixunssfsi+0x12>
 996:	12 c0       	rjmp	.+36     	; 0x9bc <__fixunssfsi+0x46>
 998:	b1 30       	cpi	r27, 0x01	; 1
 99a:	81 f0       	breq	.+32     	; 0x9bc <__fixunssfsi+0x46>
 99c:	9f d0       	rcall	.+318    	; 0xadc <__fp_zero>
 99e:	b1 e0       	ldi	r27, 0x01	; 1
 9a0:	08 95       	ret
 9a2:	9c c0       	rjmp	.+312    	; 0xadc <__fp_zero>
 9a4:	67 2f       	mov	r22, r23
 9a6:	78 2f       	mov	r23, r24
 9a8:	88 27       	eor	r24, r24
 9aa:	b8 5f       	subi	r27, 0xF8	; 248
 9ac:	39 f0       	breq	.+14     	; 0x9bc <__fixunssfsi+0x46>
 9ae:	b9 3f       	cpi	r27, 0xF9	; 249
 9b0:	cc f3       	brlt	.-14     	; 0x9a4 <__fixunssfsi+0x2e>
 9b2:	86 95       	lsr	r24
 9b4:	77 95       	ror	r23
 9b6:	67 95       	ror	r22
 9b8:	b3 95       	inc	r27
 9ba:	d9 f7       	brne	.-10     	; 0x9b2 <__fixunssfsi+0x3c>
 9bc:	3e f4       	brtc	.+14     	; 0x9cc <__fixunssfsi+0x56>
 9be:	90 95       	com	r25
 9c0:	80 95       	com	r24
 9c2:	70 95       	com	r23
 9c4:	61 95       	neg	r22
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__floatunsisf>:
 9ce:	e8 94       	clt
 9d0:	09 c0       	rjmp	.+18     	; 0x9e4 <__floatsisf+0x12>

000009d2 <__floatsisf>:
 9d2:	97 fb       	bst	r25, 7
 9d4:	3e f4       	brtc	.+14     	; 0x9e4 <__floatsisf+0x12>
 9d6:	90 95       	com	r25
 9d8:	80 95       	com	r24
 9da:	70 95       	com	r23
 9dc:	61 95       	neg	r22
 9de:	7f 4f       	sbci	r23, 0xFF	; 255
 9e0:	8f 4f       	sbci	r24, 0xFF	; 255
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	99 23       	and	r25, r25
 9e6:	a9 f0       	breq	.+42     	; 0xa12 <__floatsisf+0x40>
 9e8:	f9 2f       	mov	r31, r25
 9ea:	96 e9       	ldi	r25, 0x96	; 150
 9ec:	bb 27       	eor	r27, r27
 9ee:	93 95       	inc	r25
 9f0:	f6 95       	lsr	r31
 9f2:	87 95       	ror	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f1 11       	cpse	r31, r1
 9fc:	f8 cf       	rjmp	.-16     	; 0x9ee <__floatsisf+0x1c>
 9fe:	fa f4       	brpl	.+62     	; 0xa3e <__floatsisf+0x6c>
 a00:	bb 0f       	add	r27, r27
 a02:	11 f4       	brne	.+4      	; 0xa08 <__floatsisf+0x36>
 a04:	60 ff       	sbrs	r22, 0
 a06:	1b c0       	rjmp	.+54     	; 0xa3e <__floatsisf+0x6c>
 a08:	6f 5f       	subi	r22, 0xFF	; 255
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	16 c0       	rjmp	.+44     	; 0xa3e <__floatsisf+0x6c>
 a12:	88 23       	and	r24, r24
 a14:	11 f0       	breq	.+4      	; 0xa1a <__floatsisf+0x48>
 a16:	96 e9       	ldi	r25, 0x96	; 150
 a18:	11 c0       	rjmp	.+34     	; 0xa3c <__floatsisf+0x6a>
 a1a:	77 23       	and	r23, r23
 a1c:	21 f0       	breq	.+8      	; 0xa26 <__floatsisf+0x54>
 a1e:	9e e8       	ldi	r25, 0x8E	; 142
 a20:	87 2f       	mov	r24, r23
 a22:	76 2f       	mov	r23, r22
 a24:	05 c0       	rjmp	.+10     	; 0xa30 <__floatsisf+0x5e>
 a26:	66 23       	and	r22, r22
 a28:	71 f0       	breq	.+28     	; 0xa46 <__floatsisf+0x74>
 a2a:	96 e8       	ldi	r25, 0x86	; 134
 a2c:	86 2f       	mov	r24, r22
 a2e:	70 e0       	ldi	r23, 0x00	; 0
 a30:	60 e0       	ldi	r22, 0x00	; 0
 a32:	2a f0       	brmi	.+10     	; 0xa3e <__floatsisf+0x6c>
 a34:	9a 95       	dec	r25
 a36:	66 0f       	add	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	da f7       	brpl	.-10     	; 0xa34 <__floatsisf+0x62>
 a3e:	88 0f       	add	r24, r24
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__fp_inf>:
 a48:	97 f9       	bld	r25, 7
 a4a:	9f 67       	ori	r25, 0x7F	; 127
 a4c:	80 e8       	ldi	r24, 0x80	; 128
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	08 95       	ret

00000a54 <__fp_nan>:
 a54:	9f ef       	ldi	r25, 0xFF	; 255
 a56:	80 ec       	ldi	r24, 0xC0	; 192
 a58:	08 95       	ret

00000a5a <__fp_pscA>:
 a5a:	00 24       	eor	r0, r0
 a5c:	0a 94       	dec	r0
 a5e:	16 16       	cp	r1, r22
 a60:	17 06       	cpc	r1, r23
 a62:	18 06       	cpc	r1, r24
 a64:	09 06       	cpc	r0, r25
 a66:	08 95       	ret

00000a68 <__fp_pscB>:
 a68:	00 24       	eor	r0, r0
 a6a:	0a 94       	dec	r0
 a6c:	12 16       	cp	r1, r18
 a6e:	13 06       	cpc	r1, r19
 a70:	14 06       	cpc	r1, r20
 a72:	05 06       	cpc	r0, r21
 a74:	08 95       	ret

00000a76 <__fp_round>:
 a76:	09 2e       	mov	r0, r25
 a78:	03 94       	inc	r0
 a7a:	00 0c       	add	r0, r0
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__fp_round+0xc>
 a7e:	88 23       	and	r24, r24
 a80:	52 f0       	brmi	.+20     	; 0xa96 <__fp_round+0x20>
 a82:	bb 0f       	add	r27, r27
 a84:	40 f4       	brcc	.+16     	; 0xa96 <__fp_round+0x20>
 a86:	bf 2b       	or	r27, r31
 a88:	11 f4       	brne	.+4      	; 0xa8e <__fp_round+0x18>
 a8a:	60 ff       	sbrs	r22, 0
 a8c:	04 c0       	rjmp	.+8      	; 0xa96 <__fp_round+0x20>
 a8e:	6f 5f       	subi	r22, 0xFF	; 255
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	08 95       	ret

00000a98 <__fp_split3>:
 a98:	57 fd       	sbrc	r21, 7
 a9a:	90 58       	subi	r25, 0x80	; 128
 a9c:	44 0f       	add	r20, r20
 a9e:	55 1f       	adc	r21, r21
 aa0:	59 f0       	breq	.+22     	; 0xab8 <__fp_splitA+0x10>
 aa2:	5f 3f       	cpi	r21, 0xFF	; 255
 aa4:	71 f0       	breq	.+28     	; 0xac2 <__fp_splitA+0x1a>
 aa6:	47 95       	ror	r20

00000aa8 <__fp_splitA>:
 aa8:	88 0f       	add	r24, r24
 aaa:	97 fb       	bst	r25, 7
 aac:	99 1f       	adc	r25, r25
 aae:	61 f0       	breq	.+24     	; 0xac8 <__fp_splitA+0x20>
 ab0:	9f 3f       	cpi	r25, 0xFF	; 255
 ab2:	79 f0       	breq	.+30     	; 0xad2 <__fp_splitA+0x2a>
 ab4:	87 95       	ror	r24
 ab6:	08 95       	ret
 ab8:	12 16       	cp	r1, r18
 aba:	13 06       	cpc	r1, r19
 abc:	14 06       	cpc	r1, r20
 abe:	55 1f       	adc	r21, r21
 ac0:	f2 cf       	rjmp	.-28     	; 0xaa6 <__fp_split3+0xe>
 ac2:	46 95       	lsr	r20
 ac4:	f1 df       	rcall	.-30     	; 0xaa8 <__fp_splitA>
 ac6:	08 c0       	rjmp	.+16     	; 0xad8 <__fp_splitA+0x30>
 ac8:	16 16       	cp	r1, r22
 aca:	17 06       	cpc	r1, r23
 acc:	18 06       	cpc	r1, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	f1 cf       	rjmp	.-30     	; 0xab4 <__fp_splitA+0xc>
 ad2:	86 95       	lsr	r24
 ad4:	71 05       	cpc	r23, r1
 ad6:	61 05       	cpc	r22, r1
 ad8:	08 94       	sec
 ada:	08 95       	ret

00000adc <__fp_zero>:
 adc:	e8 94       	clt

00000ade <__fp_szero>:
 ade:	bb 27       	eor	r27, r27
 ae0:	66 27       	eor	r22, r22
 ae2:	77 27       	eor	r23, r23
 ae4:	cb 01       	movw	r24, r22
 ae6:	97 f9       	bld	r25, 7
 ae8:	08 95       	ret

00000aea <__mulsf3>:
 aea:	0b d0       	rcall	.+22     	; 0xb02 <__mulsf3x>
 aec:	c4 cf       	rjmp	.-120    	; 0xa76 <__fp_round>
 aee:	b5 df       	rcall	.-150    	; 0xa5a <__fp_pscA>
 af0:	28 f0       	brcs	.+10     	; 0xafc <__mulsf3+0x12>
 af2:	ba df       	rcall	.-140    	; 0xa68 <__fp_pscB>
 af4:	18 f0       	brcs	.+6      	; 0xafc <__mulsf3+0x12>
 af6:	95 23       	and	r25, r21
 af8:	09 f0       	breq	.+2      	; 0xafc <__mulsf3+0x12>
 afa:	a6 cf       	rjmp	.-180    	; 0xa48 <__fp_inf>
 afc:	ab cf       	rjmp	.-170    	; 0xa54 <__fp_nan>
 afe:	11 24       	eor	r1, r1
 b00:	ee cf       	rjmp	.-36     	; 0xade <__fp_szero>

00000b02 <__mulsf3x>:
 b02:	ca df       	rcall	.-108    	; 0xa98 <__fp_split3>
 b04:	a0 f3       	brcs	.-24     	; 0xaee <__mulsf3+0x4>

00000b06 <__mulsf3_pse>:
 b06:	95 9f       	mul	r25, r21
 b08:	d1 f3       	breq	.-12     	; 0xafe <__mulsf3+0x14>
 b0a:	95 0f       	add	r25, r21
 b0c:	50 e0       	ldi	r21, 0x00	; 0
 b0e:	55 1f       	adc	r21, r21
 b10:	62 9f       	mul	r22, r18
 b12:	f0 01       	movw	r30, r0
 b14:	72 9f       	mul	r23, r18
 b16:	bb 27       	eor	r27, r27
 b18:	f0 0d       	add	r31, r0
 b1a:	b1 1d       	adc	r27, r1
 b1c:	63 9f       	mul	r22, r19
 b1e:	aa 27       	eor	r26, r26
 b20:	f0 0d       	add	r31, r0
 b22:	b1 1d       	adc	r27, r1
 b24:	aa 1f       	adc	r26, r26
 b26:	64 9f       	mul	r22, r20
 b28:	66 27       	eor	r22, r22
 b2a:	b0 0d       	add	r27, r0
 b2c:	a1 1d       	adc	r26, r1
 b2e:	66 1f       	adc	r22, r22
 b30:	82 9f       	mul	r24, r18
 b32:	22 27       	eor	r18, r18
 b34:	b0 0d       	add	r27, r0
 b36:	a1 1d       	adc	r26, r1
 b38:	62 1f       	adc	r22, r18
 b3a:	73 9f       	mul	r23, r19
 b3c:	b0 0d       	add	r27, r0
 b3e:	a1 1d       	adc	r26, r1
 b40:	62 1f       	adc	r22, r18
 b42:	83 9f       	mul	r24, r19
 b44:	a0 0d       	add	r26, r0
 b46:	61 1d       	adc	r22, r1
 b48:	22 1f       	adc	r18, r18
 b4a:	74 9f       	mul	r23, r20
 b4c:	33 27       	eor	r19, r19
 b4e:	a0 0d       	add	r26, r0
 b50:	61 1d       	adc	r22, r1
 b52:	23 1f       	adc	r18, r19
 b54:	84 9f       	mul	r24, r20
 b56:	60 0d       	add	r22, r0
 b58:	21 1d       	adc	r18, r1
 b5a:	82 2f       	mov	r24, r18
 b5c:	76 2f       	mov	r23, r22
 b5e:	6a 2f       	mov	r22, r26
 b60:	11 24       	eor	r1, r1
 b62:	9f 57       	subi	r25, 0x7F	; 127
 b64:	50 40       	sbci	r21, 0x00	; 0
 b66:	8a f0       	brmi	.+34     	; 0xb8a <__mulsf3_pse+0x84>
 b68:	e1 f0       	breq	.+56     	; 0xba2 <__mulsf3_pse+0x9c>
 b6a:	88 23       	and	r24, r24
 b6c:	4a f0       	brmi	.+18     	; 0xb80 <__mulsf3_pse+0x7a>
 b6e:	ee 0f       	add	r30, r30
 b70:	ff 1f       	adc	r31, r31
 b72:	bb 1f       	adc	r27, r27
 b74:	66 1f       	adc	r22, r22
 b76:	77 1f       	adc	r23, r23
 b78:	88 1f       	adc	r24, r24
 b7a:	91 50       	subi	r25, 0x01	; 1
 b7c:	50 40       	sbci	r21, 0x00	; 0
 b7e:	a9 f7       	brne	.-22     	; 0xb6a <__mulsf3_pse+0x64>
 b80:	9e 3f       	cpi	r25, 0xFE	; 254
 b82:	51 05       	cpc	r21, r1
 b84:	70 f0       	brcs	.+28     	; 0xba2 <__mulsf3_pse+0x9c>
 b86:	60 cf       	rjmp	.-320    	; 0xa48 <__fp_inf>
 b88:	aa cf       	rjmp	.-172    	; 0xade <__fp_szero>
 b8a:	5f 3f       	cpi	r21, 0xFF	; 255
 b8c:	ec f3       	brlt	.-6      	; 0xb88 <__mulsf3_pse+0x82>
 b8e:	98 3e       	cpi	r25, 0xE8	; 232
 b90:	dc f3       	brlt	.-10     	; 0xb88 <__mulsf3_pse+0x82>
 b92:	86 95       	lsr	r24
 b94:	77 95       	ror	r23
 b96:	67 95       	ror	r22
 b98:	b7 95       	ror	r27
 b9a:	f7 95       	ror	r31
 b9c:	e7 95       	ror	r30
 b9e:	9f 5f       	subi	r25, 0xFF	; 255
 ba0:	c1 f7       	brne	.-16     	; 0xb92 <__mulsf3_pse+0x8c>
 ba2:	fe 2b       	or	r31, r30
 ba4:	88 0f       	add	r24, r24
 ba6:	91 1d       	adc	r25, r1
 ba8:	96 95       	lsr	r25
 baa:	87 95       	ror	r24
 bac:	97 f9       	bld	r25, 7
 bae:	08 95       	ret

00000bb0 <__mulsi3>:
 bb0:	62 9f       	mul	r22, r18
 bb2:	d0 01       	movw	r26, r0
 bb4:	73 9f       	mul	r23, r19
 bb6:	f0 01       	movw	r30, r0
 bb8:	82 9f       	mul	r24, r18
 bba:	e0 0d       	add	r30, r0
 bbc:	f1 1d       	adc	r31, r1
 bbe:	64 9f       	mul	r22, r20
 bc0:	e0 0d       	add	r30, r0
 bc2:	f1 1d       	adc	r31, r1
 bc4:	92 9f       	mul	r25, r18
 bc6:	f0 0d       	add	r31, r0
 bc8:	83 9f       	mul	r24, r19
 bca:	f0 0d       	add	r31, r0
 bcc:	74 9f       	mul	r23, r20
 bce:	f0 0d       	add	r31, r0
 bd0:	65 9f       	mul	r22, r21
 bd2:	f0 0d       	add	r31, r0
 bd4:	99 27       	eor	r25, r25
 bd6:	72 9f       	mul	r23, r18
 bd8:	b0 0d       	add	r27, r0
 bda:	e1 1d       	adc	r30, r1
 bdc:	f9 1f       	adc	r31, r25
 bde:	63 9f       	mul	r22, r19
 be0:	b0 0d       	add	r27, r0
 be2:	e1 1d       	adc	r30, r1
 be4:	f9 1f       	adc	r31, r25
 be6:	bd 01       	movw	r22, r26
 be8:	cf 01       	movw	r24, r30
 bea:	11 24       	eor	r1, r1
 bec:	08 95       	ret

00000bee <__udivmodsi4>:
 bee:	a1 e2       	ldi	r26, 0x21	; 33
 bf0:	1a 2e       	mov	r1, r26
 bf2:	aa 1b       	sub	r26, r26
 bf4:	bb 1b       	sub	r27, r27
 bf6:	fd 01       	movw	r30, r26
 bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__udivmodsi4_ep>

00000bfa <__udivmodsi4_loop>:
 bfa:	aa 1f       	adc	r26, r26
 bfc:	bb 1f       	adc	r27, r27
 bfe:	ee 1f       	adc	r30, r30
 c00:	ff 1f       	adc	r31, r31
 c02:	a2 17       	cp	r26, r18
 c04:	b3 07       	cpc	r27, r19
 c06:	e4 07       	cpc	r30, r20
 c08:	f5 07       	cpc	r31, r21
 c0a:	20 f0       	brcs	.+8      	; 0xc14 <__udivmodsi4_ep>
 c0c:	a2 1b       	sub	r26, r18
 c0e:	b3 0b       	sbc	r27, r19
 c10:	e4 0b       	sbc	r30, r20
 c12:	f5 0b       	sbc	r31, r21

00000c14 <__udivmodsi4_ep>:
 c14:	66 1f       	adc	r22, r22
 c16:	77 1f       	adc	r23, r23
 c18:	88 1f       	adc	r24, r24
 c1a:	99 1f       	adc	r25, r25
 c1c:	1a 94       	dec	r1
 c1e:	69 f7       	brne	.-38     	; 0xbfa <__udivmodsi4_loop>
 c20:	60 95       	com	r22
 c22:	70 95       	com	r23
 c24:	80 95       	com	r24
 c26:	90 95       	com	r25
 c28:	9b 01       	movw	r18, r22
 c2a:	ac 01       	movw	r20, r24
 c2c:	bd 01       	movw	r22, r26
 c2e:	cf 01       	movw	r24, r30
 c30:	08 95       	ret

00000c32 <_exit>:
 c32:	f8 94       	cli

00000c34 <__stop_program>:
 c34:	ff cf       	rjmp	.-2      	; 0xc34 <__stop_program>
