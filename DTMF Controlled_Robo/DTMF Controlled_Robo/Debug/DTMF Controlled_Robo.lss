
DTMF Controlled_Robo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000b98  2**0
                  ALLOC
  2 .stab         00001ba8  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000583  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00002cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009fc  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000309  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006da  00000000  00000000  00003aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00004188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  000043b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b57  00000000  00000000  000046fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9e:	0c 94 90 05 	jmp	0xb20	; 0xb20 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_2>:

unsigned char volatile key;
unsigned char volatile F_NewKey=0;

ISR(INT1_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	
	F_NewKey = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 00 01 	sts	0x0100, r24

}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:
{

	//UART_Init();

	//aUART_TxString("AVR Robo TEST\n\r");
	DDRC = 0xff; //making port c output
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;// inputs
  c8:	1a b8       	out	0x0a, r1	; 10

	PORTC = 0xff;
  ca:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	91 ee       	ldi	r25, 0xE1	; 225
  d0:	a4 e0       	ldi	r26, 0x04	; 4
  d2:	81 50       	subi	r24, 0x01	; 1
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	a0 40       	sbci	r26, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x18>
  dc:	00 00       	nop
	_delay_ms(100);

	EICRA |= (1 << ISC00) | (1 << ISC01);    // The rising edge of INTx generates an interrupt request
  de:	e9 e6       	ldi	r30, 0x69	; 105
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	83 60       	ori	r24, 0x03	; 3
  e6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
  e8:	e9 9a       	sbi	0x1d, 1	; 29

	MCUCR = 0x0c;
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	85 bf       	out	0x35, r24	; 53
	SREG = 0X80;
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	8f bf       	out	0x3f, r24	; 63
	sei(); //global interrupt enable
  f2:	78 94       	sei

		{
			
			case 0x20 :Robot = Forward;break;
			case 0x80 :Robot = Backward;break;
			case 0x40 :Robot = Left;_delay_ms(5); Robot = 0x00; key=0;break ;
  f4:	5a e0       	ldi	r21, 0x0A	; 10
			case 0x60 :Robot = Right;_delay_ms(5); Robot = 0x00;key=0;break;
			
			default:Robot = Stop; key=0;; break;
  f6:	4f ef       	ldi	r20, 0xFF	; 255
		{
			
			case 0x20 :Robot = Forward;break;
			case 0x80 :Robot = Backward;break;
			case 0x40 :Robot = Left;_delay_ms(5); Robot = 0x00; key=0;break ;
			case 0x60 :Robot = Right;_delay_ms(5); Robot = 0x00;key=0;break;
  f8:	35 e0       	ldi	r19, 0x05	; 5
		switch(key)

		{
			
			case 0x20 :Robot = Forward;break;
			case 0x80 :Robot = Backward;break;
  fa:	29 e0       	ldi	r18, 0x09	; 9

		switch(key)

		{
			
			case 0x20 :Robot = Forward;break;
  fc:	96 e0       	ldi	r25, 0x06	; 6
	//key = UART_RxChar();

	while(1)
	{

		if(F_NewKey ==1)
  fe:	80 91 00 01 	lds	r24, 0x0100
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	31 f4       	brne	.+12     	; 0x112 <main+0x4e>
		{
			key = (mobile&0xf0);
 106:	89 b1       	in	r24, 0x09	; 9
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	80 93 01 01 	sts	0x0101, r24
			F_NewKey =0;
 10e:	10 92 00 01 	sts	0x0100, r1
		}


		switch(key)
 112:	80 91 01 01 	lds	r24, 0x0101
 116:	80 34       	cpi	r24, 0x40	; 64
 118:	71 f0       	breq	.+28     	; 0x136 <main+0x72>
 11a:	81 34       	cpi	r24, 0x41	; 65
 11c:	18 f4       	brcc	.+6      	; 0x124 <main+0x60>
 11e:	80 32       	cpi	r24, 0x20	; 32
 120:	01 f5       	brne	.+64     	; 0x162 <main+0x9e>
 122:	05 c0       	rjmp	.+10     	; 0x12e <main+0x6a>
 124:	80 36       	cpi	r24, 0x60	; 96
 126:	91 f0       	breq	.+36     	; 0x14c <main+0x88>
 128:	80 38       	cpi	r24, 0x80	; 128
 12a:	d9 f4       	brne	.+54     	; 0x162 <main+0x9e>
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0x6e>

		{
			
			case 0x20 :Robot = Forward;break;
 12e:	98 b9       	out	0x08, r25	; 8
 130:	e6 cf       	rjmp	.-52     	; 0xfe <main+0x3a>
			case 0x80 :Robot = Backward;break;
 132:	28 b9       	out	0x08, r18	; 8
 134:	e4 cf       	rjmp	.-56     	; 0xfe <main+0x3a>
			case 0x40 :Robot = Left;_delay_ms(5); Robot = 0x00; key=0;break ;
 136:	58 b9       	out	0x08, r21	; 8
 138:	af e1       	ldi	r26, 0x1F	; 31
 13a:	be e4       	ldi	r27, 0x4E	; 78
 13c:	11 97       	sbiw	r26, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x78>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x7e>
 142:	00 00       	nop
 144:	18 b8       	out	0x08, r1	; 8
 146:	10 92 01 01 	sts	0x0101, r1
 14a:	d9 cf       	rjmp	.-78     	; 0xfe <main+0x3a>
			case 0x60 :Robot = Right;_delay_ms(5); Robot = 0x00;key=0;break;
 14c:	38 b9       	out	0x08, r19	; 8
 14e:	ef e1       	ldi	r30, 0x1F	; 31
 150:	fe e4       	ldi	r31, 0x4E	; 78
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x8e>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x94>
 158:	00 00       	nop
 15a:	18 b8       	out	0x08, r1	; 8
 15c:	10 92 01 01 	sts	0x0101, r1
 160:	ce cf       	rjmp	.-100    	; 0xfe <main+0x3a>
			
			default:Robot = Stop; key=0;; break;
 162:	48 b9       	out	0x08, r20	; 8
 164:	10 92 01 01 	sts	0x0101, r1
 168:	ca cf       	rjmp	.-108    	; 0xfe <main+0x3a>

0000016a <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	6b 01       	movw	r12, r22
 174:	7c 01       	movw	r14, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
 176:	dc 01       	movw	r26, r24
 178:	cb 01       	movw	r24, r22
 17a:	80 56       	subi	r24, 0x60	; 96
 17c:	99 40       	sbci	r25, 0x09	; 9
 17e:	a0 40       	sbci	r26, 0x00	; 0
 180:	b0 40       	sbci	r27, 0x00	; 0
 182:	81 3a       	cpi	r24, 0xA1	; 161
 184:	28 eb       	ldi	r18, 0xB8	; 184
 186:	92 07       	cpc	r25, r18
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	a2 07       	cpc	r26, r18
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	b2 07       	cpc	r27, r18
 190:	08 f5       	brcc	.+66     	; 0x1d4 <UART_SetBaudRate+0x6a>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
 192:	c7 01       	movw	r24, r14
 194:	b6 01       	movw	r22, r12
 196:	28 ef       	ldi	r18, 0xF8	; 248
 198:	3f ef       	ldi	r19, 0xFF	; 255
 19a:	4f ef       	ldi	r20, 0xFF	; 255
 19c:	5f ef       	ldi	r21, 0xFF	; 255
 19e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__mulsi3>
 1a2:	60 50       	subi	r22, 0x00	; 0
 1a4:	7c 4d       	sbci	r23, 0xDC	; 220
 1a6:	8b 40       	sbci	r24, 0x0B	; 11
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	cc 0c       	add	r12, r12
 1ac:	dd 1c       	adc	r13, r13
 1ae:	ee 1c       	adc	r14, r14
 1b0:	ff 1c       	adc	r15, r15
 1b2:	cc 0c       	add	r12, r12
 1b4:	dd 1c       	adc	r13, r13
 1b6:	ee 1c       	adc	r14, r14
 1b8:	ff 1c       	adc	r15, r15
 1ba:	a7 01       	movw	r20, r14
 1bc:	96 01       	movw	r18, r12
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	44 1f       	adc	r20, r20
 1c4:	55 1f       	adc	r21, r21
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	44 1f       	adc	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodsi4>
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <UART_SetBaudRate+0x6e>
	}
	else
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
 1d4:	27 e6       	ldi	r18, 0x67	; 103
 1d6:	30 e0       	ldi	r19, 0x00	; 0
	}

	UBRR0L = util_ExtractByte0to8(RegValue);
 1d8:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H = util_ExtractByte8to16(RegValue);
 1dc:	30 93 c5 00 	sts	0x00C5, r19
}
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	08 95       	ret

000001ea <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSR0B= (1<<RXEN0) | (1<<TXEN0);                  // Enable Receiver and Transmitter
 1ea:	28 e1       	ldi	r18, 0x18	; 24
 1ec:	20 93 c1 00 	sts	0x00C1, r18
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00);   // Asynchronous mode 8-bit data and 1-stop bit
 1f0:	26 e0       	ldi	r18, 0x06	; 6
 1f2:	20 93 c2 00 	sts	0x00C2, r18
	UCSR0A= 0x00;                                   // Clear the UASRT status register
 1f6:	10 92 c0 00 	sts	0x00C0, r1
	UART_SetBaudRate(var_baudRate_u32);
 1fa:	0e 94 b5 00 	call	0x16a	; 0x16a <UART_SetBaudRate>
}
 1fe:	08 95       	ret

00000200 <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSR0A,RXC0));  // Wait till the data is received
 200:	e0 ec       	ldi	r30, 0xC0	; 192
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	88 23       	and	r24, r24
 208:	ec f7       	brge	.-6      	; 0x204 <UART_RxChar+0x4>
	return(UDR0);                          // return the received char
 20a:	80 91 c6 00 	lds	r24, 0x00C6
}
 20e:	08 95       	ret

00000210 <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSR0A,UDRE0)); // Wait till Transmitter(UDR) register becomes Empty
 210:	e0 ec       	ldi	r30, 0xC0	; 192
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	90 81       	ld	r25, Z
 216:	95 ff       	sbrs	r25, 5
 218:	fd cf       	rjmp	.-6      	; 0x214 <UART_TxChar+0x4>
	UDR0 =var_uartData_u8;                              // Load the data to be transmitted
 21a:	80 93 c6 00 	sts	0x00C6, r24
}
 21e:	08 95       	ret

00000220 <UART_TxString>:
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
	while(*ptr_stringPointer_u8)
 226:	88 81       	ld	r24, Y
 228:	88 23       	and	r24, r24
 22a:	31 f0       	breq	.+12     	; 0x238 <UART_TxString+0x18>
 * description :This function is used to transmit a NULL terminated string through UART.
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
 22c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr_stringPointer_u8)
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 22e:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
 232:	89 91       	ld	r24, Y+
 234:	88 23       	and	r24, r24
 236:	d9 f7       	brne	.-10     	; 0x22e <UART_TxString+0xe>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <UART_RxString>:
    if not required then comment UART_TxChar(ch) in the code.
  2.BackSlash is not taken care.
***************************************************************************************************/
#if (Enable_UART_RxString==1)
void UART_RxString(char *ptr_stringPointer_u8)
{
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
	char ch;
	while(1)
	{
		ch=UART_RxChar();    //Receive a char
 246:	0e 94 00 01 	call	0x200	; 0x200 <UART_RxChar>
 24a:	18 2f       	mov	r17, r24
		UART_TxChar(ch);     //Echo back the received char
 24c:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>

		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
 250:	1d 30       	cpi	r17, 0x0D	; 13
 252:	11 f0       	breq	.+4      	; 0x258 <UART_RxString+0x1a>
 254:	1a 30       	cpi	r17, 0x0A	; 10
 256:	29 f4       	brne	.+10     	; 0x262 <UART_RxString+0x24>
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
 258:	18 82       	st	Y, r1
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
		ptr_stringPointer_u8++;
	}
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	08 95       	ret
		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
 262:	19 93       	st	Y+, r17
		ptr_stringPointer_u8++;
	}
 264:	f0 cf       	rjmp	.-32     	; 0x246 <UART_RxString+0x8>

00000266 <UART_TxDecimalNumber>:
				2.(12345,6) then 6-digits ie. 012345 will be transmitted
				3.(12345,C_DefaultDigitsToTransmit_U8) then 12345 will be transmitted.
***************************************************************************************************/
#if ((Enable_UART_TxDecimalNumber==1) || (Enable_UART_TxFloatNumber==1))
void UART_TxDecimalNumber(uint32_t var_decNumber_u32, uint8_t var_numOfDigitsToTransmit_u8)
{
 266:	8f 92       	push	r8
 268:	9f 92       	push	r9
 26a:	af 92       	push	r10
 26c:	bf 92       	push	r11
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	2a 97       	sbiw	r28, 0x0a	; 10
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	dc 01       	movw	r26, r24
 28c:	cb 01       	movw	r24, r22
 28e:	04 2f       	mov	r16, r20
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	a1 05       	cpc	r26, r1
 294:	b1 05       	cpc	r27, r1
 296:	19 f0       	breq	.+6      	; 0x29e <UART_TxDecimalNumber+0x38>
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 298:	44 23       	and	r20, r20
 29a:	71 f4       	brne	.+28     	; 0x2b8 <UART_TxDecimalNumber+0x52>
 29c:	43 c0       	rjmp	.+134    	; 0x324 <UART_TxDecimalNumber+0xbe>
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 29e:	44 23       	and	r20, r20
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <UART_TxDecimalNumber+0x3e>
 2a2:	40 c0       	rjmp	.+128    	; 0x324 <UART_TxDecimalNumber+0xbe>
 2a4:	fe 01       	movw	r30, r28
 2a6:	31 96       	adiw	r30, 0x01	; 1
 2a8:	10 e0       	ldi	r17, 0x00	; 0
		   a[i] = 0x00;
 2aa:	11 92       	st	Z+, r1
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 2ac:	1f 5f       	subi	r17, 0xFF	; 255
 2ae:	10 17       	cp	r17, r16
 2b0:	81 f1       	breq	.+96     	; 0x312 <UART_TxDecimalNumber+0xac>
 2b2:	1a 30       	cpi	r17, 0x0A	; 10
 2b4:	d1 f7       	brne	.-12     	; 0x2aa <UART_TxDecimalNumber+0x44>
 2b6:	2d c0       	rjmp	.+90     	; 0x312 <UART_TxDecimalNumber+0xac>
 2b8:	7e 01       	movw	r14, r28
 2ba:	08 94       	sec
 2bc:	e1 1c       	adc	r14, r1
 2be:	f1 1c       	adc	r15, r1
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 2c0:	10 e0       	ldi	r17, 0x00	; 0
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the remainder and divide the number by 10 each time.
                If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
				The process continues till it becomes zero or max digits reached*/
				a[i]=util_GetMod32(var_decNumber_u32,10);
 2c2:	0f 2e       	mov	r0, r31
 2c4:	fa e0       	ldi	r31, 0x0A	; 10
 2c6:	8f 2e       	mov	r8, r31
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	9f 2e       	mov	r9, r31
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	af 2e       	mov	r10, r31
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	bf 2e       	mov	r11, r31
 2d4:	f0 2d       	mov	r31, r0
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
		{
			/* Continue extracting the digits from right side
			   till the Specified var_numOfDigitsToTransmit_u8 */
			if(var_decNumber_u32!=0)
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	a1 05       	cpc	r26, r1
 2da:	b1 05       	cpc	r27, r1
 2dc:	69 f0       	breq	.+26     	; 0x2f8 <UART_TxDecimalNumber+0x92>
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the remainder and divide the number by 10 each time.
                If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
				The process continues till it becomes zero or max digits reached*/
				a[i]=util_GetMod32(var_decNumber_u32,10);
 2de:	bc 01       	movw	r22, r24
 2e0:	cd 01       	movw	r24, r26
 2e2:	a5 01       	movw	r20, r10
 2e4:	94 01       	movw	r18, r8
 2e6:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodsi4>
 2ea:	f7 01       	movw	r30, r14
 2ec:	60 83       	st	Z, r22
				var_decNumber_u32=var_decNumber_u32/10;
 2ee:	82 2f       	mov	r24, r18
 2f0:	93 2f       	mov	r25, r19
 2f2:	a4 2f       	mov	r26, r20
 2f4:	b5 2f       	mov	r27, r21
 2f6:	04 c0       	rjmp	.+8      	; 0x300 <UART_TxDecimalNumber+0x9a>
			}
			else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 2f8:	0b 30       	cpi	r16, 0x0B	; 11
 2fa:	48 f4       	brcc	.+18     	; 0x30e <UART_TxDecimalNumber+0xa8>
			else
			{
				/*In case user expects more digits to be transmitted than the actual digits in number,
  			    then update the remaining digits with zero.
                Ex: var_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0;
 2fc:	f7 01       	movw	r30, r14
 2fe:	10 82       	st	Z, r1
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 300:	1f 5f       	subi	r17, 0xFF	; 255
 302:	08 94       	sec
 304:	e1 1c       	adc	r14, r1
 306:	f1 1c       	adc	r15, r1
 308:	10 17       	cp	r17, r16
 30a:	29 f7       	brne	.-54     	; 0x2d6 <UART_TxDecimalNumber+0x70>
 30c:	02 c0       	rjmp	.+4      	; 0x312 <UART_TxDecimalNumber+0xac>
				a[i]=0;
			}
		}
	}

	while(i)
 30e:	11 23       	and	r17, r17
 310:	49 f0       	breq	.+18     	; 0x324 <UART_TxDecimalNumber+0xbe>
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
 312:	fe 01       	movw	r30, r28
 314:	e1 0f       	add	r30, r17
 316:	f1 1d       	adc	r31, r1
 318:	80 81       	ld	r24, Z
 31a:	80 5d       	subi	r24, 0xD0	; 208
 31c:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>
		i--;
 320:	11 50       	subi	r17, 0x01	; 1
				a[i]=0;
			}
		}
	}

	while(i)
 322:	b9 f7       	brne	.-18     	; 0x312 <UART_TxDecimalNumber+0xac>
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
		i--;
	}
}
 324:	2a 96       	adiw	r28, 0x0a	; 10
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	bf 90       	pop	r11
 33e:	af 90       	pop	r10
 340:	9f 90       	pop	r9
 342:	8f 90       	pop	r8
 344:	08 95       	ret

00000346 <UART_TxHexNumber>:
				2.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
				3.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.
***************************************************************************************************/
#if (Enable_UART_TxHexNumber==1)
void UART_TxHexNumber(uint32_t var_hexNumber_u32,uint8_t var_numOfDigitsToTransmit_u8)
{
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	2a 97       	sbiw	r28, 0x0a	; 10
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	dc 01       	movw	r26, r24
 35e:	cb 01       	movw	r24, r22
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	a1 05       	cpc	r26, r1
 364:	b1 05       	cpc	r27, r1
 366:	19 f0       	breq	.+6      	; 0x36e <UART_TxHexNumber+0x28>
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 368:	44 23       	and	r20, r20
 36a:	69 f4       	brne	.+26     	; 0x386 <UART_TxHexNumber+0x40>
 36c:	36 c0       	rjmp	.+108    	; 0x3da <UART_TxHexNumber+0x94>
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
	{
		/* If the number zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 36e:	44 23       	and	r20, r20
 370:	a1 f1       	breq	.+104    	; 0x3da <UART_TxHexNumber+0x94>
 372:	fe 01       	movw	r30, r28
 374:	31 96       	adiw	r30, 0x01	; 1
 376:	10 e0       	ldi	r17, 0x00	; 0
		  a[i]=0x00;
 378:	11 92       	st	Z+, r1
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
	{
		/* If the number zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 37a:	1f 5f       	subi	r17, 0xFF	; 255
 37c:	14 17       	cp	r17, r20
 37e:	01 f1       	breq	.+64     	; 0x3c0 <UART_TxHexNumber+0x7a>
 380:	1a 30       	cpi	r17, 0x0A	; 10
 382:	d1 f7       	brne	.-12     	; 0x378 <UART_TxHexNumber+0x32>
 384:	1d c0       	rjmp	.+58     	; 0x3c0 <UART_TxHexNumber+0x7a>
 386:	fe 01       	movw	r30, r28
 388:	31 96       	adiw	r30, 0x01	; 1
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 38a:	10 e0       	ldi	r17, 0x00	; 0
		{
			/* Continue extracting the digits from right side till the Specified var_numOfDigitsToTransmit_u8 */
			if(var_hexNumber_u32!=0)
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	a1 05       	cpc	r26, r1
 390:	b1 05       	cpc	r27, r1
 392:	61 f0       	breq	.+24     	; 0x3ac <UART_TxHexNumber+0x66>
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the lower nibble and shift the number 4 times.
			   If var_number_u32 = 0xABC then extracted digit will be 0x0C and number will become 0xAB.
			   The process continues till it becomes zero or max digits reached*/
				a[i]=(uint8_t)(var_hexNumber_u32 & 0x0f);
 394:	28 2f       	mov	r18, r24
 396:	2f 70       	andi	r18, 0x0F	; 15
 398:	20 83       	st	Z, r18
				var_hexNumber_u32=var_hexNumber_u32 >> 4;
 39a:	68 94       	set
 39c:	13 f8       	bld	r1, 3
 39e:	b6 95       	lsr	r27
 3a0:	a7 95       	ror	r26
 3a2:	97 95       	ror	r25
 3a4:	87 95       	ror	r24
 3a6:	16 94       	lsr	r1
 3a8:	d1 f7       	brne	.-12     	; 0x39e <UART_TxHexNumber+0x58>
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <UART_TxHexNumber+0x6c>
			}
			else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 3ac:	4b 30       	cpi	r20, 0x0B	; 11
 3ae:	30 f4       	brcc	.+12     	; 0x3bc <UART_TxHexNumber+0x76>
			else
			{
				/* In case user expects more digits to be transmitted than the actual digits in number,
  			           then update the remaining digits with zero.
                Ex: var_number_u32 is 0x123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0x00;
 3b0:	10 82       	st	Z, r1
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 3b2:	1f 5f       	subi	r17, 0xFF	; 255
 3b4:	31 96       	adiw	r30, 0x01	; 1
 3b6:	14 17       	cp	r17, r20
 3b8:	49 f7       	brne	.-46     	; 0x38c <UART_TxHexNumber+0x46>
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <UART_TxHexNumber+0x7a>
				a[i]=0x00;
			}
		}
	}

	while(i!=0)
 3bc:	11 23       	and	r17, r17
 3be:	69 f0       	breq	.+26     	; 0x3da <UART_TxHexNumber+0x94>
	{
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Hex2Ascii(a[i-1]));
 3c0:	fe 01       	movw	r30, r28
 3c2:	e1 0f       	add	r30, r17
 3c4:	f1 1d       	adc	r31, r1
 3c6:	80 81       	ld	r24, Z
 3c8:	8a 30       	cpi	r24, 0x0A	; 10
 3ca:	10 f0       	brcs	.+4      	; 0x3d0 <UART_TxHexNumber+0x8a>
 3cc:	89 5c       	subi	r24, 0xC9	; 201
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <UART_TxHexNumber+0x8c>
 3d0:	80 5d       	subi	r24, 0xD0	; 208
 3d2:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>
		i--;
 3d6:	11 50       	subi	r17, 0x01	; 1
				a[i]=0x00;
			}
		}
	}

	while(i!=0)
 3d8:	99 f7       	brne	.-26     	; 0x3c0 <UART_TxHexNumber+0x7a>
	{
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Hex2Ascii(a[i-1]));
		i--;
	}
}
 3da:	2a 96       	adiw	r28, 0x0a	; 10
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	08 95       	ret

000003ee <UART_TxBinaryNumber>:
				2.(10,8) then 8-LSB will be transmitted ie. 00001010
				3.(10,2) then 2-LSB will be transmitted ie. 10
***************************************************************************************************/
#if (Enable_UART_TxBinaryNumber==1)
void UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
{
 3ee:	bf 92       	push	r11
 3f0:	cf 92       	push	r12
 3f2:	df 92       	push	r13
 3f4:	ef 92       	push	r14
 3f6:	ff 92       	push	r15
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	6b 01       	movw	r12, r22
 402:	7c 01       	movw	r14, r24
 404:	c4 2f       	mov	r28, r20
	uint8_t ch;

	while(var_numOfBitsToTransmit_u8!=0)
 406:	44 23       	and	r20, r20
 408:	19 f1       	breq	.+70     	; 0x450 <UART_TxBinaryNumber+0x62>
	{
		/* Start Extracting the bits from the specified bit positions.
	     Get the Acsii values of the bits and transmit */
		ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToTransmit_u8-1));
 40a:	01 e0       	ldi	r16, 0x01	; 1
 40c:	10 e0       	ldi	r17, 0x00	; 0
 40e:	d1 e0       	ldi	r29, 0x01	; 1
 410:	bb 24       	eor	r11, r11
 412:	4c 2f       	mov	r20, r28
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	41 50       	subi	r20, 0x01	; 1
 418:	50 40       	sbci	r21, 0x00	; 0
 41a:	c8 01       	movw	r24, r16
 41c:	02 c0       	rjmp	.+4      	; 0x422 <UART_TxBinaryNumber+0x34>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	4a 95       	dec	r20
 424:	e2 f7       	brpl	.-8      	; 0x41e <UART_TxBinaryNumber+0x30>
 426:	ac 01       	movw	r20, r24
 428:	66 27       	eor	r22, r22
 42a:	57 fd       	sbrc	r21, 7
 42c:	60 95       	com	r22
 42e:	76 2f       	mov	r23, r22
 430:	4c 21       	and	r20, r12
 432:	5d 21       	and	r21, r13
 434:	6e 21       	and	r22, r14
 436:	7f 21       	and	r23, r15
 438:	8d 2f       	mov	r24, r29
 43a:	41 15       	cp	r20, r1
 43c:	51 05       	cpc	r21, r1
 43e:	61 05       	cpc	r22, r1
 440:	71 05       	cpc	r23, r1
 442:	09 f4       	brne	.+2      	; 0x446 <UART_TxBinaryNumber+0x58>
 444:	8b 2d       	mov	r24, r11
		UART_TxChar(util_Dec2Ascii(ch));
 446:	80 5d       	subi	r24, 0xD0	; 208
 448:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>
		var_numOfBitsToTransmit_u8--;
 44c:	c1 50       	subi	r28, 0x01	; 1
#if (Enable_UART_TxBinaryNumber==1)
void UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
{
	uint8_t ch;

	while(var_numOfBitsToTransmit_u8!=0)
 44e:	09 f7       	brne	.-62     	; 0x412 <UART_TxBinaryNumber+0x24>
	     Get the Acsii values of the bits and transmit */
		ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToTransmit_u8-1));
		UART_TxChar(util_Dec2Ascii(ch));
		var_numOfBitsToTransmit_u8--;
	}
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	df 90       	pop	r13
 45e:	cf 90       	pop	r12
 460:	bf 90       	pop	r11
 462:	08 95       	ret

00000464 <UART_TxFloatNumber>:
         Float will be disabled by default as it takes huge controller resources
	     It can be enabled by changing value of Enable_UART_TxFloatNumber to 1 in uart.h	 
 ***************************************************************************************************/
#if (Enable_UART_TxFloatNumber==1)
void UART_TxFloatNumber(float var_floatNumber_f32)
{
 464:	cf 92       	push	r12
 466:	df 92       	push	r13
 468:	ef 92       	push	r14
 46a:	ff 92       	push	r15
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	6b 01       	movw	r12, r22
 476:	7c 01       	movw	r14, r24
      1.Type cast the number to int to get the integer part.
	  2.transmit the extracted integer part followed by a decimal point(.).
	  3.Later the integer part is made zero by subtracting with the extracted integer value.
	  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

	var_tempNumber_u32 = (uint32_t) var_floatNumber_f32;
 478:	0e 94 32 04 	call	0x864	; 0x864 <__fixunssfsi>
 47c:	06 2f       	mov	r16, r22
 47e:	17 2f       	mov	r17, r23
 480:	d8 2f       	mov	r29, r24
 482:	c9 2f       	mov	r28, r25
	UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 484:	4f ef       	ldi	r20, 0xFF	; 255
 486:	0e 94 33 01 	call	0x266	; 0x266 <UART_TxDecimalNumber>

	UART_TxChar('.');
 48a:	8e e2       	ldi	r24, 0x2E	; 46
 48c:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>

	var_floatNumber_f32 = var_floatNumber_f32 - var_tempNumber_u32;
 490:	60 2f       	mov	r22, r16
 492:	71 2f       	mov	r23, r17
 494:	8d 2f       	mov	r24, r29
 496:	9c 2f       	mov	r25, r28
 498:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatunsisf>
 49c:	9b 01       	movw	r18, r22
 49e:	ac 01       	movw	r20, r24
 4a0:	c7 01       	movw	r24, r14
 4a2:	b6 01       	movw	r22, r12
 4a4:	0e 94 cd 03 	call	0x79a	; 0x79a <__subsf3>
	var_tempNumber_u32 = var_floatNumber_f32 * 1000000;
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	34 e2       	ldi	r19, 0x24	; 36
 4ac:	44 e7       	ldi	r20, 0x74	; 116
 4ae:	59 e4       	ldi	r21, 0x49	; 73
 4b0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__mulsf3>
 4b4:	46 2f       	mov	r20, r22
 4b6:	57 2f       	mov	r21, r23
 4b8:	68 2f       	mov	r22, r24
 4ba:	79 2f       	mov	r23, r25
 4bc:	cb 01       	movw	r24, r22
 4be:	ba 01       	movw	r22, r20
 4c0:	0e 94 32 04 	call	0x864	; 0x864 <__fixunssfsi>
	UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 4c4:	4f ef       	ldi	r20, 0xFF	; 255
 4c6:	0e 94 33 01 	call	0x266	; 0x266 <UART_TxDecimalNumber>
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	cf 90       	pop	r12
 4da:	08 95       	ret

000004dc <UART_Printf>:
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
{
 4dc:	5f 92       	push	r5
 4de:	6f 92       	push	r6
 4e0:	7f 92       	push	r7
 4e2:	8f 92       	push	r8
 4e4:	9f 92       	push	r9
 4e6:	af 92       	push	r10
 4e8:	bf 92       	push	r11
 4ea:	cf 92       	push	r12
 4ec:	df 92       	push	r13
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	0f 2e       	mov	r0, r31
 500:	f2 e1       	ldi	r31, 0x12	; 18
 502:	cf 2e       	mov	r12, r31
 504:	dd 24       	eor	r13, r13
 506:	f0 2d       	mov	r31, r0
 508:	cc 0e       	add	r12, r28
 50a:	dd 1e       	adc	r13, r29
 50c:	d6 01       	movw	r26, r12
 50e:	ed 91       	ld	r30, X+
 510:	fd 91       	ld	r31, X+
 512:	6d 01       	movw	r12, r26
	uint8_t var_numOfDigitsToTransmit_u8;

	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 514:	80 81       	ld	r24, Z
 516:	88 23       	and	r24, r24
 518:	09 f4       	brne	.+2      	; 0x51c <UART_Printf+0x40>
 51a:	2f c1       	rjmp	.+606    	; 0x77a <UART_Printf+0x29e>
 51c:	8f 01       	movw	r16, r30
			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;
 51e:	55 24       	eor	r5, r5
 520:	68 94       	set
 522:	54 f8       	bld	r5, 4
				   ch = *ptr;
				}
			}
			else
			{
			  var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 524:	99 24       	eor	r9, r9
 526:	9a 94       	dec	r9
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
 528:	88 24       	eor	r8, r8
	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
	{

		ch= *ptr;
		if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 52a:	85 32       	cpi	r24, 0x25	; 37
 52c:	09 f0       	breq	.+2      	; 0x530 <UART_Printf+0x54>
 52e:	18 c1       	rjmp	.+560    	; 0x760 <UART_Printf+0x284>
		{
		    ptr++;
 530:	58 01       	movw	r10, r16
 532:	08 94       	sec
 534:	a1 1c       	adc	r10, r1
 536:	b1 1c       	adc	r11, r1
		    ch = *ptr;
 538:	f8 01       	movw	r30, r16
 53a:	81 81       	ldd	r24, Z+1	; 0x01
		   if((ch>=0x30) && (ch<=0x39))
 53c:	98 2f       	mov	r25, r24
 53e:	90 53       	subi	r25, 0x30	; 48
 540:	9a 30       	cpi	r25, 0x0A	; 10
 542:	80 f4       	brcc	.+32     	; 0x564 <UART_Printf+0x88>
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
 544:	32 96       	adiw	r30, 0x02	; 2
 546:	18 2d       	mov	r17, r8
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   var_numOfDigitsToTransmit_u8 = (var_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 548:	11 0f       	add	r17, r17
 54a:	91 2f       	mov	r25, r17
 54c:	99 0f       	add	r25, r25
 54e:	99 0f       	add	r25, r25
 550:	19 0f       	add	r17, r25
 552:	80 53       	subi	r24, 0x30	; 48
 554:	18 0f       	add	r17, r24
				   ptr++;
 556:	5f 01       	movw	r10, r30
				   ch = *ptr;
 558:	81 91       	ld	r24, Z+
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
 55a:	98 2f       	mov	r25, r24
 55c:	90 53       	subi	r25, 0x30	; 48
 55e:	9a 30       	cpi	r25, 0x0A	; 10
 560:	98 f3       	brcs	.-26     	; 0x548 <UART_Printf+0x6c>
 562:	01 c0       	rjmp	.+2      	; 0x566 <UART_Printf+0x8a>
				   ch = *ptr;
				}
			}
			else
			{
			  var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 564:	19 2d       	mov	r17, r9
			}				


			switch(ch)       /* Decode the type of the argument */
 566:	88 35       	cpi	r24, 0x58	; 88
 568:	09 f4       	brne	.+2      	; 0x56c <UART_Printf+0x90>
 56a:	a8 c0       	rjmp	.+336    	; 0x6bc <UART_Printf+0x1e0>
 56c:	89 35       	cpi	r24, 0x59	; 89
 56e:	c0 f4       	brcc	.+48     	; 0x5a0 <UART_Printf+0xc4>
 570:	84 34       	cpi	r24, 0x44	; 68
 572:	09 f4       	brne	.+2      	; 0x576 <UART_Printf+0x9a>
 574:	51 c0       	rjmp	.+162    	; 0x618 <UART_Printf+0x13c>
 576:	85 34       	cpi	r24, 0x45	; 69
 578:	48 f4       	brcc	.+18     	; 0x58c <UART_Printf+0xb0>
 57a:	82 34       	cpi	r24, 0x42	; 66
 57c:	09 f4       	brne	.+2      	; 0x580 <UART_Printf+0xa4>
 57e:	c2 c0       	rjmp	.+388    	; 0x704 <UART_Printf+0x228>
 580:	83 34       	cpi	r24, 0x43	; 67
 582:	28 f5       	brcc	.+74     	; 0x5ce <UART_Printf+0xf2>
 584:	85 32       	cpi	r24, 0x25	; 37
 586:	09 f0       	breq	.+2      	; 0x58a <UART_Printf+0xae>
 588:	ee c0       	rjmp	.+476    	; 0x766 <UART_Printf+0x28a>
 58a:	e6 c0       	rjmp	.+460    	; 0x758 <UART_Printf+0x27c>
 58c:	83 35       	cpi	r24, 0x53	; 83
 58e:	09 f4       	brne	.+2      	; 0x592 <UART_Printf+0xb6>
 590:	d9 c0       	rjmp	.+434    	; 0x744 <UART_Printf+0x268>
 592:	85 35       	cpi	r24, 0x55	; 85
 594:	09 f4       	brne	.+2      	; 0x598 <UART_Printf+0xbc>
 596:	71 c0       	rjmp	.+226    	; 0x67a <UART_Printf+0x19e>
 598:	86 34       	cpi	r24, 0x46	; 70
 59a:	09 f0       	breq	.+2      	; 0x59e <UART_Printf+0xc2>
 59c:	e4 c0       	rjmp	.+456    	; 0x766 <UART_Printf+0x28a>
 59e:	c6 c0       	rjmp	.+396    	; 0x72c <UART_Printf+0x250>
 5a0:	86 36       	cpi	r24, 0x66	; 102
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <UART_Printf+0xca>
 5a4:	c3 c0       	rjmp	.+390    	; 0x72c <UART_Printf+0x250>
 5a6:	87 36       	cpi	r24, 0x67	; 103
 5a8:	40 f4       	brcc	.+16     	; 0x5ba <UART_Printf+0xde>
 5aa:	83 36       	cpi	r24, 0x63	; 99
 5ac:	81 f0       	breq	.+32     	; 0x5ce <UART_Printf+0xf2>
 5ae:	84 36       	cpi	r24, 0x64	; 100
 5b0:	b9 f0       	breq	.+46     	; 0x5e0 <UART_Printf+0x104>
 5b2:	82 36       	cpi	r24, 0x62	; 98
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <UART_Printf+0xdc>
 5b6:	d7 c0       	rjmp	.+430    	; 0x766 <UART_Printf+0x28a>
 5b8:	91 c0       	rjmp	.+290    	; 0x6dc <UART_Printf+0x200>
 5ba:	85 37       	cpi	r24, 0x75	; 117
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <UART_Printf+0xe4>
 5be:	4c c0       	rjmp	.+152    	; 0x658 <UART_Printf+0x17c>
 5c0:	88 37       	cpi	r24, 0x78	; 120
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <UART_Printf+0xea>
 5c4:	6a c0       	rjmp	.+212    	; 0x69a <UART_Printf+0x1be>
 5c6:	83 37       	cpi	r24, 0x73	; 115
 5c8:	09 f0       	breq	.+2      	; 0x5cc <UART_Printf+0xf0>
 5ca:	cd c0       	rjmp	.+410    	; 0x766 <UART_Printf+0x28a>
 5cc:	bb c0       	rjmp	.+374    	; 0x744 <UART_Printf+0x268>
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 5ce:	86 01       	movw	r16, r12
 5d0:	0e 5f       	subi	r16, 0xFE	; 254
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
				UART_TxChar(ch);
 5d4:	d6 01       	movw	r26, r12
 5d6:	8c 91       	ld	r24, X
 5d8:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>

			switch(ch)       /* Decode the type of the argument */
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 5dc:	68 01       	movw	r12, r16
				UART_TxChar(ch);
				break;
 5de:	c3 c0       	rjmp	.+390    	; 0x766 <UART_Printf+0x28a>

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 5e0:	ee 24       	eor	r14, r14
 5e2:	ff 24       	eor	r15, r15
 5e4:	68 94       	set
 5e6:	e1 f8       	bld	r14, 1
 5e8:	ec 0c       	add	r14, r12
 5ea:	fd 1c       	adc	r15, r13
 5ec:	f6 01       	movw	r30, r12
 5ee:	c0 80       	ld	r12, Z
 5f0:	d1 80       	ldd	r13, Z+1	; 0x01
#if (Enable_UART_TxDecimalNumber == 1)
				if(var_num_s16<0)
 5f2:	dd 20       	and	r13, r13
 5f4:	3c f4       	brge	.+14     	; 0x604 <UART_Printf+0x128>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   var_num_s16 = -var_num_s16;
 5f6:	d0 94       	com	r13
 5f8:	c1 94       	neg	r12
 5fa:	d1 08       	sbc	r13, r1
 5fc:	d3 94       	inc	r13
				   UART_TxChar('-');
 5fe:	8d e2       	ldi	r24, 0x2D	; 45
 600:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>
				 }
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
 604:	b6 01       	movw	r22, r12
 606:	88 27       	eor	r24, r24
 608:	77 fd       	sbrc	r23, 7
 60a:	80 95       	com	r24
 60c:	98 2f       	mov	r25, r24
 60e:	41 2f       	mov	r20, r17
 610:	0e 94 33 01 	call	0x266	; 0x266 <UART_TxDecimalNumber>
				ch = va_arg(argp, uint16_t);
				UART_TxChar(ch);
				break;

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 614:	67 01       	movw	r12, r14
				   var_num_s16 = -var_num_s16;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
#endif
				break;
 616:	a7 c0       	rjmp	.+334    	; 0x766 <UART_Printf+0x28a>
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 618:	66 24       	eor	r6, r6
 61a:	77 24       	eor	r7, r7
 61c:	68 94       	set
 61e:	62 f8       	bld	r6, 2
 620:	6c 0c       	add	r6, r12
 622:	7d 1c       	adc	r7, r13
 624:	d6 01       	movw	r26, r12
 626:	cd 90       	ld	r12, X+
 628:	dd 90       	ld	r13, X+
 62a:	ed 90       	ld	r14, X+
 62c:	fc 90       	ld	r15, X
 62e:	13 97       	sbiw	r26, 0x03	; 3
#if (Enable_UART_TxDecimalNumber == 1)				
				if(var_num_s32<0)
 630:	ff 20       	and	r15, r15
 632:	5c f4       	brge	.+22     	; 0x64a <UART_Printf+0x16e>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   var_num_s32 = -var_num_s32;
 634:	f0 94       	com	r15
 636:	e0 94       	com	r14
 638:	d0 94       	com	r13
 63a:	c0 94       	com	r12
 63c:	c1 1c       	adc	r12, r1
 63e:	d1 1c       	adc	r13, r1
 640:	e1 1c       	adc	r14, r1
 642:	f1 1c       	adc	r15, r1
				   UART_TxChar('-');
 644:	8d e2       	ldi	r24, 0x2D	; 45
 646:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>
				 }
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
 64a:	c7 01       	movw	r24, r14
 64c:	b6 01       	movw	r22, r12
 64e:	41 2f       	mov	r20, r17
 650:	0e 94 33 01 	call	0x266	; 0x266 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
#endif
				break;
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 654:	63 01       	movw	r12, r6
				   var_num_s32 = -var_num_s32;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
#endif				
				break;	
 656:	87 c0       	rjmp	.+270    	; 0x766 <UART_Printf+0x28a>

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				var_num_u16 = va_arg(argp, uint16_t);
 658:	ee 24       	eor	r14, r14
 65a:	ff 24       	eor	r15, r15
 65c:	68 94       	set
 65e:	e1 f8       	bld	r14, 1
 660:	ec 0c       	add	r14, r12
 662:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 664:	f6 01       	movw	r30, r12
 666:	80 81       	ld	r24, Z
 668:	91 81       	ldd	r25, Z+1	; 0x01
 66a:	bc 01       	movw	r22, r24
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	41 2f       	mov	r20, r17
 672:	0e 94 33 01 	call	0x266	; 0x266 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
#endif				
				break;	

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				var_num_u16 = va_arg(argp, uint16_t);
 676:	67 01       	movw	r12, r14
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 678:	76 c0       	rjmp	.+236    	; 0x766 <UART_Printf+0x28a>
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				var_num_u32 = va_arg(argp, uint32_t);
 67a:	ee 24       	eor	r14, r14
 67c:	ff 24       	eor	r15, r15
 67e:	68 94       	set
 680:	e2 f8       	bld	r14, 2
 682:	ec 0c       	add	r14, r12
 684:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 686:	d6 01       	movw	r26, r12
 688:	6d 91       	ld	r22, X+
 68a:	7d 91       	ld	r23, X+
 68c:	8d 91       	ld	r24, X+
 68e:	9c 91       	ld	r25, X
 690:	41 2f       	mov	r20, r17
 692:	0e 94 33 01 	call	0x266	; 0x266 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				var_num_u32 = va_arg(argp, uint32_t);
 696:	67 01       	movw	r12, r14
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;			
 698:	66 c0       	rjmp	.+204    	; 0x766 <UART_Printf+0x28a>

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u16 = va_arg(argp, uint16_t);
 69a:	ee 24       	eor	r14, r14
 69c:	ff 24       	eor	r15, r15
 69e:	68 94       	set
 6a0:	e1 f8       	bld	r14, 1
 6a2:	ec 0c       	add	r14, r12
 6a4:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxHexNumber == 1)				
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 6a6:	f6 01       	movw	r30, r12
 6a8:	80 81       	ld	r24, Z
 6aa:	91 81       	ldd	r25, Z+1	; 0x01
 6ac:	bc 01       	movw	r22, r24
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	41 2f       	mov	r20, r17
 6b4:	0e 94 a3 01 	call	0x346	; 0x346 <UART_TxHexNumber>
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;			

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u16 = va_arg(argp, uint16_t);
 6b8:	67 01       	movw	r12, r14
#if (Enable_UART_TxHexNumber == 1)				
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 6ba:	55 c0       	rjmp	.+170    	; 0x766 <UART_Printf+0x28a>

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u32 = va_arg(argp, uint32_t);
 6bc:	ee 24       	eor	r14, r14
 6be:	ff 24       	eor	r15, r15
 6c0:	68 94       	set
 6c2:	e2 f8       	bld	r14, 2
 6c4:	ec 0c       	add	r14, r12
 6c6:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxHexNumber == 1)						
				UART_TxHexNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 6c8:	d6 01       	movw	r26, r12
 6ca:	6d 91       	ld	r22, X+
 6cc:	7d 91       	ld	r23, X+
 6ce:	8d 91       	ld	r24, X+
 6d0:	9c 91       	ld	r25, X
 6d2:	41 2f       	mov	r20, r17
 6d4:	0e 94 a3 01 	call	0x346	; 0x346 <UART_TxHexNumber>
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u32 = va_arg(argp, uint32_t);
 6d8:	67 01       	movw	r12, r14
#if (Enable_UART_TxHexNumber == 1)						
				UART_TxHexNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 6da:	45 c0       	rjmp	.+138    	; 0x766 <UART_Printf+0x28a>

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
 6dc:	ee 24       	eor	r14, r14
 6de:	ff 24       	eor	r15, r15
 6e0:	68 94       	set
 6e2:	e1 f8       	bld	r14, 1
 6e4:	ec 0c       	add	r14, r12
 6e6:	fd 1c       	adc	r15, r13
 6e8:	f6 01       	movw	r30, r12
 6ea:	80 81       	ld	r24, Z
 6ec:	91 81       	ldd	r25, Z+1	; 0x01
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 6ee:	1f 3f       	cpi	r17, 0xFF	; 255
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <UART_Printf+0x218>
				   var_numOfDigitsToTransmit_u8 = 16;
 6f2:	15 2d       	mov	r17, r5
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 6f4:	bc 01       	movw	r22, r24
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	41 2f       	mov	r20, r17
 6fc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_TxBinaryNumber>
#endif				
				break;

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
 700:	67 01       	movw	r12, r14
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 702:	31 c0       	rjmp	.+98     	; 0x766 <UART_Printf+0x28a>

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u32 = va_arg(argp, uint32_t);
 704:	ee 24       	eor	r14, r14
 706:	ff 24       	eor	r15, r15
 708:	68 94       	set
 70a:	e2 f8       	bld	r14, 2
 70c:	ec 0c       	add	r14, r12
 70e:	fd 1c       	adc	r15, r13
 710:	d6 01       	movw	r26, r12
 712:	6d 91       	ld	r22, X+
 714:	7d 91       	ld	r23, X+
 716:	8d 91       	ld	r24, X+
 718:	9c 91       	ld	r25, X
 71a:	13 97       	sbiw	r26, 0x03	; 3
#if (Enable_UART_TxBinaryNumber == 1)				
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 71c:	1f 3f       	cpi	r17, 0xFF	; 255
 71e:	09 f4       	brne	.+2      	; 0x722 <UART_Printf+0x246>
				   var_numOfDigitsToTransmit_u8 = 16;				
 720:	15 2d       	mov	r17, r5
				UART_TxBinaryNumber(var_num_u32,var_numOfDigitsToTransmit_u8);	
 722:	41 2f       	mov	r20, r17
 724:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_TxBinaryNumber>
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u32 = va_arg(argp, uint32_t);
 728:	67 01       	movw	r12, r14
#if (Enable_UART_TxBinaryNumber == 1)				
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;				
				UART_TxBinaryNumber(var_num_u32,var_numOfDigitsToTransmit_u8);	
#endif				
				break;
 72a:	1d c0       	rjmp	.+58     	; 0x766 <UART_Printf+0x28a>

			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
				var_floatNum_f32 = va_arg(argp, double);
 72c:	86 01       	movw	r16, r12
 72e:	0c 5f       	subi	r16, 0xFC	; 252
 730:	1f 4f       	sbci	r17, 0xFF	; 255
#if (Enable_UART_TxFloatNumber == 1)				
				UART_TxFloatNumber(var_floatNum_f32);
 732:	f6 01       	movw	r30, r12
 734:	60 81       	ld	r22, Z
 736:	71 81       	ldd	r23, Z+1	; 0x01
 738:	82 81       	ldd	r24, Z+2	; 0x02
 73a:	93 81       	ldd	r25, Z+3	; 0x03
 73c:	0e 94 32 02 	call	0x464	; 0x464 <UART_TxFloatNumber>
#endif				
				break;

			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
				var_floatNum_f32 = va_arg(argp, double);
 740:	68 01       	movw	r12, r16
#if (Enable_UART_TxFloatNumber == 1)				
				UART_TxFloatNumber(var_floatNum_f32);
#endif
				break;
 742:	11 c0       	rjmp	.+34     	; 0x766 <UART_Printf+0x28a>


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
 744:	f6 01       	movw	r30, r12
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	c8 0e       	add	r12, r24
 74c:	d9 1e       	adc	r13, r25
#if (Enable_UART_TxString == 1)
				UART_TxString(str);
 74e:	80 81       	ld	r24, Z
 750:	91 81       	ldd	r25, Z+1	; 0x01
 752:	0e 94 10 01 	call	0x220	; 0x220 <UART_TxString>
#endif				
				break;
 756:	07 c0       	rjmp	.+14     	; 0x766 <UART_Printf+0x28a>

			case '%':
				UART_TxChar('%');
 758:	85 e2       	ldi	r24, 0x25	; 37
 75a:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>
				break;
 75e:	03 c0       	rjmp	.+6      	; 0x766 <UART_Printf+0x28a>
			}
		}
		else
		{
			/* As '%' is not detected transmit the char passed */
			UART_TxChar(ch);
 760:	0e 94 08 01 	call	0x210	; 0x210 <UART_TxChar>
 764:	58 01       	movw	r10, r16
	uint8_t var_numOfDigitsToTransmit_u8;

	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 766:	85 01       	movw	r16, r10
 768:	0f 5f       	subi	r16, 0xFF	; 255
 76a:	1f 4f       	sbci	r17, 0xFF	; 255
 76c:	d5 01       	movw	r26, r10
 76e:	11 96       	adiw	r26, 0x01	; 1
 770:	8c 91       	ld	r24, X
 772:	11 97       	sbiw	r26, 0x01	; 1
 774:	88 23       	and	r24, r24
 776:	09 f0       	breq	.+2      	; 0x77a <UART_Printf+0x29e>
 778:	d8 ce       	rjmp	.-592    	; 0x52a <UART_Printf+0x4e>
			UART_TxChar(ch);
		}
	}

	va_end(argp);
}
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	1f 91       	pop	r17
 780:	0f 91       	pop	r16
 782:	ff 90       	pop	r15
 784:	ef 90       	pop	r14
 786:	df 90       	pop	r13
 788:	cf 90       	pop	r12
 78a:	bf 90       	pop	r11
 78c:	af 90       	pop	r10
 78e:	9f 90       	pop	r9
 790:	8f 90       	pop	r8
 792:	7f 90       	pop	r7
 794:	6f 90       	pop	r6
 796:	5f 90       	pop	r5
 798:	08 95       	ret

0000079a <__subsf3>:
 79a:	50 58       	subi	r21, 0x80	; 128

0000079c <__addsf3>:
 79c:	bb 27       	eor	r27, r27
 79e:	aa 27       	eor	r26, r26
 7a0:	0e d0       	rcall	.+28     	; 0x7be <__addsf3x>
 7a2:	e0 c0       	rjmp	.+448    	; 0x964 <__fp_round>
 7a4:	d1 d0       	rcall	.+418    	; 0x948 <__fp_pscA>
 7a6:	30 f0       	brcs	.+12     	; 0x7b4 <__addsf3+0x18>
 7a8:	d6 d0       	rcall	.+428    	; 0x956 <__fp_pscB>
 7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__addsf3+0x18>
 7ac:	31 f4       	brne	.+12     	; 0x7ba <__addsf3+0x1e>
 7ae:	9f 3f       	cpi	r25, 0xFF	; 255
 7b0:	11 f4       	brne	.+4      	; 0x7b6 <__addsf3+0x1a>
 7b2:	1e f4       	brtc	.+6      	; 0x7ba <__addsf3+0x1e>
 7b4:	c6 c0       	rjmp	.+396    	; 0x942 <__fp_nan>
 7b6:	0e f4       	brtc	.+2      	; 0x7ba <__addsf3+0x1e>
 7b8:	e0 95       	com	r30
 7ba:	e7 fb       	bst	r30, 7
 7bc:	bc c0       	rjmp	.+376    	; 0x936 <__fp_inf>

000007be <__addsf3x>:
 7be:	e9 2f       	mov	r30, r25
 7c0:	e2 d0       	rcall	.+452    	; 0x986 <__fp_split3>
 7c2:	80 f3       	brcs	.-32     	; 0x7a4 <__addsf3+0x8>
 7c4:	ba 17       	cp	r27, r26
 7c6:	62 07       	cpc	r22, r18
 7c8:	73 07       	cpc	r23, r19
 7ca:	84 07       	cpc	r24, r20
 7cc:	95 07       	cpc	r25, r21
 7ce:	18 f0       	brcs	.+6      	; 0x7d6 <__addsf3x+0x18>
 7d0:	71 f4       	brne	.+28     	; 0x7ee <__addsf3x+0x30>
 7d2:	9e f5       	brtc	.+102    	; 0x83a <__addsf3x+0x7c>
 7d4:	fa c0       	rjmp	.+500    	; 0x9ca <__fp_zero>
 7d6:	0e f4       	brtc	.+2      	; 0x7da <__addsf3x+0x1c>
 7d8:	e0 95       	com	r30
 7da:	0b 2e       	mov	r0, r27
 7dc:	ba 2f       	mov	r27, r26
 7de:	a0 2d       	mov	r26, r0
 7e0:	0b 01       	movw	r0, r22
 7e2:	b9 01       	movw	r22, r18
 7e4:	90 01       	movw	r18, r0
 7e6:	0c 01       	movw	r0, r24
 7e8:	ca 01       	movw	r24, r20
 7ea:	a0 01       	movw	r20, r0
 7ec:	11 24       	eor	r1, r1
 7ee:	ff 27       	eor	r31, r31
 7f0:	59 1b       	sub	r21, r25
 7f2:	99 f0       	breq	.+38     	; 0x81a <__addsf3x+0x5c>
 7f4:	59 3f       	cpi	r21, 0xF9	; 249
 7f6:	50 f4       	brcc	.+20     	; 0x80c <__addsf3x+0x4e>
 7f8:	50 3e       	cpi	r21, 0xE0	; 224
 7fa:	68 f1       	brcs	.+90     	; 0x856 <__addsf3x+0x98>
 7fc:	1a 16       	cp	r1, r26
 7fe:	f0 40       	sbci	r31, 0x00	; 0
 800:	a2 2f       	mov	r26, r18
 802:	23 2f       	mov	r18, r19
 804:	34 2f       	mov	r19, r20
 806:	44 27       	eor	r20, r20
 808:	58 5f       	subi	r21, 0xF8	; 248
 80a:	f3 cf       	rjmp	.-26     	; 0x7f2 <__addsf3x+0x34>
 80c:	46 95       	lsr	r20
 80e:	37 95       	ror	r19
 810:	27 95       	ror	r18
 812:	a7 95       	ror	r26
 814:	f0 40       	sbci	r31, 0x00	; 0
 816:	53 95       	inc	r21
 818:	c9 f7       	brne	.-14     	; 0x80c <__addsf3x+0x4e>
 81a:	7e f4       	brtc	.+30     	; 0x83a <__addsf3x+0x7c>
 81c:	1f 16       	cp	r1, r31
 81e:	ba 0b       	sbc	r27, r26
 820:	62 0b       	sbc	r22, r18
 822:	73 0b       	sbc	r23, r19
 824:	84 0b       	sbc	r24, r20
 826:	ba f0       	brmi	.+46     	; 0x856 <__addsf3x+0x98>
 828:	91 50       	subi	r25, 0x01	; 1
 82a:	a1 f0       	breq	.+40     	; 0x854 <__addsf3x+0x96>
 82c:	ff 0f       	add	r31, r31
 82e:	bb 1f       	adc	r27, r27
 830:	66 1f       	adc	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	c2 f7       	brpl	.-16     	; 0x828 <__addsf3x+0x6a>
 838:	0e c0       	rjmp	.+28     	; 0x856 <__addsf3x+0x98>
 83a:	ba 0f       	add	r27, r26
 83c:	62 1f       	adc	r22, r18
 83e:	73 1f       	adc	r23, r19
 840:	84 1f       	adc	r24, r20
 842:	48 f4       	brcc	.+18     	; 0x856 <__addsf3x+0x98>
 844:	87 95       	ror	r24
 846:	77 95       	ror	r23
 848:	67 95       	ror	r22
 84a:	b7 95       	ror	r27
 84c:	f7 95       	ror	r31
 84e:	9e 3f       	cpi	r25, 0xFE	; 254
 850:	08 f0       	brcs	.+2      	; 0x854 <__addsf3x+0x96>
 852:	b3 cf       	rjmp	.-154    	; 0x7ba <__addsf3+0x1e>
 854:	93 95       	inc	r25
 856:	88 0f       	add	r24, r24
 858:	08 f0       	brcs	.+2      	; 0x85c <__addsf3x+0x9e>
 85a:	99 27       	eor	r25, r25
 85c:	ee 0f       	add	r30, r30
 85e:	97 95       	ror	r25
 860:	87 95       	ror	r24
 862:	08 95       	ret

00000864 <__fixunssfsi>:
 864:	98 d0       	rcall	.+304    	; 0x996 <__fp_splitA>
 866:	88 f0       	brcs	.+34     	; 0x88a <__fixunssfsi+0x26>
 868:	9f 57       	subi	r25, 0x7F	; 127
 86a:	90 f0       	brcs	.+36     	; 0x890 <__fixunssfsi+0x2c>
 86c:	b9 2f       	mov	r27, r25
 86e:	99 27       	eor	r25, r25
 870:	b7 51       	subi	r27, 0x17	; 23
 872:	a0 f0       	brcs	.+40     	; 0x89c <__fixunssfsi+0x38>
 874:	d1 f0       	breq	.+52     	; 0x8aa <__fixunssfsi+0x46>
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	88 1f       	adc	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	1a f0       	brmi	.+6      	; 0x886 <__fixunssfsi+0x22>
 880:	ba 95       	dec	r27
 882:	c9 f7       	brne	.-14     	; 0x876 <__fixunssfsi+0x12>
 884:	12 c0       	rjmp	.+36     	; 0x8aa <__fixunssfsi+0x46>
 886:	b1 30       	cpi	r27, 0x01	; 1
 888:	81 f0       	breq	.+32     	; 0x8aa <__fixunssfsi+0x46>
 88a:	9f d0       	rcall	.+318    	; 0x9ca <__fp_zero>
 88c:	b1 e0       	ldi	r27, 0x01	; 1
 88e:	08 95       	ret
 890:	9c c0       	rjmp	.+312    	; 0x9ca <__fp_zero>
 892:	67 2f       	mov	r22, r23
 894:	78 2f       	mov	r23, r24
 896:	88 27       	eor	r24, r24
 898:	b8 5f       	subi	r27, 0xF8	; 248
 89a:	39 f0       	breq	.+14     	; 0x8aa <__fixunssfsi+0x46>
 89c:	b9 3f       	cpi	r27, 0xF9	; 249
 89e:	cc f3       	brlt	.-14     	; 0x892 <__fixunssfsi+0x2e>
 8a0:	86 95       	lsr	r24
 8a2:	77 95       	ror	r23
 8a4:	67 95       	ror	r22
 8a6:	b3 95       	inc	r27
 8a8:	d9 f7       	brne	.-10     	; 0x8a0 <__fixunssfsi+0x3c>
 8aa:	3e f4       	brtc	.+14     	; 0x8ba <__fixunssfsi+0x56>
 8ac:	90 95       	com	r25
 8ae:	80 95       	com	r24
 8b0:	70 95       	com	r23
 8b2:	61 95       	neg	r22
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	8f 4f       	sbci	r24, 0xFF	; 255
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	08 95       	ret

000008bc <__floatunsisf>:
 8bc:	e8 94       	clt
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__floatsisf+0x12>

000008c0 <__floatsisf>:
 8c0:	97 fb       	bst	r25, 7
 8c2:	3e f4       	brtc	.+14     	; 0x8d2 <__floatsisf+0x12>
 8c4:	90 95       	com	r25
 8c6:	80 95       	com	r24
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	8f 4f       	sbci	r24, 0xFF	; 255
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	99 23       	and	r25, r25
 8d4:	a9 f0       	breq	.+42     	; 0x900 <__stack+0x1>
 8d6:	f9 2f       	mov	r31, r25
 8d8:	96 e9       	ldi	r25, 0x96	; 150
 8da:	bb 27       	eor	r27, r27
 8dc:	93 95       	inc	r25
 8de:	f6 95       	lsr	r31
 8e0:	87 95       	ror	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	b7 95       	ror	r27
 8e8:	f1 11       	cpse	r31, r1
 8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <__floatsisf+0x1c>
 8ec:	fa f4       	brpl	.+62     	; 0x92c <__stack+0x2d>
 8ee:	bb 0f       	add	r27, r27
 8f0:	11 f4       	brne	.+4      	; 0x8f6 <__floatsisf+0x36>
 8f2:	60 ff       	sbrs	r22, 0
 8f4:	1b c0       	rjmp	.+54     	; 0x92c <__stack+0x2d>
 8f6:	6f 5f       	subi	r22, 0xFF	; 255
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	16 c0       	rjmp	.+44     	; 0x92c <__stack+0x2d>
 900:	88 23       	and	r24, r24
 902:	11 f0       	breq	.+4      	; 0x908 <__stack+0x9>
 904:	96 e9       	ldi	r25, 0x96	; 150
 906:	11 c0       	rjmp	.+34     	; 0x92a <__stack+0x2b>
 908:	77 23       	and	r23, r23
 90a:	21 f0       	breq	.+8      	; 0x914 <__stack+0x15>
 90c:	9e e8       	ldi	r25, 0x8E	; 142
 90e:	87 2f       	mov	r24, r23
 910:	76 2f       	mov	r23, r22
 912:	05 c0       	rjmp	.+10     	; 0x91e <__stack+0x1f>
 914:	66 23       	and	r22, r22
 916:	71 f0       	breq	.+28     	; 0x934 <__stack+0x35>
 918:	96 e8       	ldi	r25, 0x86	; 134
 91a:	86 2f       	mov	r24, r22
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	2a f0       	brmi	.+10     	; 0x92c <__stack+0x2d>
 922:	9a 95       	dec	r25
 924:	66 0f       	add	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	da f7       	brpl	.-10     	; 0x922 <__stack+0x23>
 92c:	88 0f       	add	r24, r24
 92e:	96 95       	lsr	r25
 930:	87 95       	ror	r24
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret

00000936 <__fp_inf>:
 936:	97 f9       	bld	r25, 7
 938:	9f 67       	ori	r25, 0x7F	; 127
 93a:	80 e8       	ldi	r24, 0x80	; 128
 93c:	70 e0       	ldi	r23, 0x00	; 0
 93e:	60 e0       	ldi	r22, 0x00	; 0
 940:	08 95       	ret

00000942 <__fp_nan>:
 942:	9f ef       	ldi	r25, 0xFF	; 255
 944:	80 ec       	ldi	r24, 0xC0	; 192
 946:	08 95       	ret

00000948 <__fp_pscA>:
 948:	00 24       	eor	r0, r0
 94a:	0a 94       	dec	r0
 94c:	16 16       	cp	r1, r22
 94e:	17 06       	cpc	r1, r23
 950:	18 06       	cpc	r1, r24
 952:	09 06       	cpc	r0, r25
 954:	08 95       	ret

00000956 <__fp_pscB>:
 956:	00 24       	eor	r0, r0
 958:	0a 94       	dec	r0
 95a:	12 16       	cp	r1, r18
 95c:	13 06       	cpc	r1, r19
 95e:	14 06       	cpc	r1, r20
 960:	05 06       	cpc	r0, r21
 962:	08 95       	ret

00000964 <__fp_round>:
 964:	09 2e       	mov	r0, r25
 966:	03 94       	inc	r0
 968:	00 0c       	add	r0, r0
 96a:	11 f4       	brne	.+4      	; 0x970 <__fp_round+0xc>
 96c:	88 23       	and	r24, r24
 96e:	52 f0       	brmi	.+20     	; 0x984 <__fp_round+0x20>
 970:	bb 0f       	add	r27, r27
 972:	40 f4       	brcc	.+16     	; 0x984 <__fp_round+0x20>
 974:	bf 2b       	or	r27, r31
 976:	11 f4       	brne	.+4      	; 0x97c <__fp_round+0x18>
 978:	60 ff       	sbrs	r22, 0
 97a:	04 c0       	rjmp	.+8      	; 0x984 <__fp_round+0x20>
 97c:	6f 5f       	subi	r22, 0xFF	; 255
 97e:	7f 4f       	sbci	r23, 0xFF	; 255
 980:	8f 4f       	sbci	r24, 0xFF	; 255
 982:	9f 4f       	sbci	r25, 0xFF	; 255
 984:	08 95       	ret

00000986 <__fp_split3>:
 986:	57 fd       	sbrc	r21, 7
 988:	90 58       	subi	r25, 0x80	; 128
 98a:	44 0f       	add	r20, r20
 98c:	55 1f       	adc	r21, r21
 98e:	59 f0       	breq	.+22     	; 0x9a6 <__fp_splitA+0x10>
 990:	5f 3f       	cpi	r21, 0xFF	; 255
 992:	71 f0       	breq	.+28     	; 0x9b0 <__fp_splitA+0x1a>
 994:	47 95       	ror	r20

00000996 <__fp_splitA>:
 996:	88 0f       	add	r24, r24
 998:	97 fb       	bst	r25, 7
 99a:	99 1f       	adc	r25, r25
 99c:	61 f0       	breq	.+24     	; 0x9b6 <__fp_splitA+0x20>
 99e:	9f 3f       	cpi	r25, 0xFF	; 255
 9a0:	79 f0       	breq	.+30     	; 0x9c0 <__fp_splitA+0x2a>
 9a2:	87 95       	ror	r24
 9a4:	08 95       	ret
 9a6:	12 16       	cp	r1, r18
 9a8:	13 06       	cpc	r1, r19
 9aa:	14 06       	cpc	r1, r20
 9ac:	55 1f       	adc	r21, r21
 9ae:	f2 cf       	rjmp	.-28     	; 0x994 <__fp_split3+0xe>
 9b0:	46 95       	lsr	r20
 9b2:	f1 df       	rcall	.-30     	; 0x996 <__fp_splitA>
 9b4:	08 c0       	rjmp	.+16     	; 0x9c6 <__fp_splitA+0x30>
 9b6:	16 16       	cp	r1, r22
 9b8:	17 06       	cpc	r1, r23
 9ba:	18 06       	cpc	r1, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	f1 cf       	rjmp	.-30     	; 0x9a2 <__fp_splitA+0xc>
 9c0:	86 95       	lsr	r24
 9c2:	71 05       	cpc	r23, r1
 9c4:	61 05       	cpc	r22, r1
 9c6:	08 94       	sec
 9c8:	08 95       	ret

000009ca <__fp_zero>:
 9ca:	e8 94       	clt

000009cc <__fp_szero>:
 9cc:	bb 27       	eor	r27, r27
 9ce:	66 27       	eor	r22, r22
 9d0:	77 27       	eor	r23, r23
 9d2:	cb 01       	movw	r24, r22
 9d4:	97 f9       	bld	r25, 7
 9d6:	08 95       	ret

000009d8 <__mulsf3>:
 9d8:	0b d0       	rcall	.+22     	; 0x9f0 <__mulsf3x>
 9da:	c4 cf       	rjmp	.-120    	; 0x964 <__fp_round>
 9dc:	b5 df       	rcall	.-150    	; 0x948 <__fp_pscA>
 9de:	28 f0       	brcs	.+10     	; 0x9ea <__mulsf3+0x12>
 9e0:	ba df       	rcall	.-140    	; 0x956 <__fp_pscB>
 9e2:	18 f0       	brcs	.+6      	; 0x9ea <__mulsf3+0x12>
 9e4:	95 23       	and	r25, r21
 9e6:	09 f0       	breq	.+2      	; 0x9ea <__mulsf3+0x12>
 9e8:	a6 cf       	rjmp	.-180    	; 0x936 <__fp_inf>
 9ea:	ab cf       	rjmp	.-170    	; 0x942 <__fp_nan>
 9ec:	11 24       	eor	r1, r1
 9ee:	ee cf       	rjmp	.-36     	; 0x9cc <__fp_szero>

000009f0 <__mulsf3x>:
 9f0:	ca df       	rcall	.-108    	; 0x986 <__fp_split3>
 9f2:	a0 f3       	brcs	.-24     	; 0x9dc <__mulsf3+0x4>

000009f4 <__mulsf3_pse>:
 9f4:	95 9f       	mul	r25, r21
 9f6:	d1 f3       	breq	.-12     	; 0x9ec <__mulsf3+0x14>
 9f8:	95 0f       	add	r25, r21
 9fa:	50 e0       	ldi	r21, 0x00	; 0
 9fc:	55 1f       	adc	r21, r21
 9fe:	62 9f       	mul	r22, r18
 a00:	f0 01       	movw	r30, r0
 a02:	72 9f       	mul	r23, r18
 a04:	bb 27       	eor	r27, r27
 a06:	f0 0d       	add	r31, r0
 a08:	b1 1d       	adc	r27, r1
 a0a:	63 9f       	mul	r22, r19
 a0c:	aa 27       	eor	r26, r26
 a0e:	f0 0d       	add	r31, r0
 a10:	b1 1d       	adc	r27, r1
 a12:	aa 1f       	adc	r26, r26
 a14:	64 9f       	mul	r22, r20
 a16:	66 27       	eor	r22, r22
 a18:	b0 0d       	add	r27, r0
 a1a:	a1 1d       	adc	r26, r1
 a1c:	66 1f       	adc	r22, r22
 a1e:	82 9f       	mul	r24, r18
 a20:	22 27       	eor	r18, r18
 a22:	b0 0d       	add	r27, r0
 a24:	a1 1d       	adc	r26, r1
 a26:	62 1f       	adc	r22, r18
 a28:	73 9f       	mul	r23, r19
 a2a:	b0 0d       	add	r27, r0
 a2c:	a1 1d       	adc	r26, r1
 a2e:	62 1f       	adc	r22, r18
 a30:	83 9f       	mul	r24, r19
 a32:	a0 0d       	add	r26, r0
 a34:	61 1d       	adc	r22, r1
 a36:	22 1f       	adc	r18, r18
 a38:	74 9f       	mul	r23, r20
 a3a:	33 27       	eor	r19, r19
 a3c:	a0 0d       	add	r26, r0
 a3e:	61 1d       	adc	r22, r1
 a40:	23 1f       	adc	r18, r19
 a42:	84 9f       	mul	r24, r20
 a44:	60 0d       	add	r22, r0
 a46:	21 1d       	adc	r18, r1
 a48:	82 2f       	mov	r24, r18
 a4a:	76 2f       	mov	r23, r22
 a4c:	6a 2f       	mov	r22, r26
 a4e:	11 24       	eor	r1, r1
 a50:	9f 57       	subi	r25, 0x7F	; 127
 a52:	50 40       	sbci	r21, 0x00	; 0
 a54:	8a f0       	brmi	.+34     	; 0xa78 <__mulsf3_pse+0x84>
 a56:	e1 f0       	breq	.+56     	; 0xa90 <__mulsf3_pse+0x9c>
 a58:	88 23       	and	r24, r24
 a5a:	4a f0       	brmi	.+18     	; 0xa6e <__mulsf3_pse+0x7a>
 a5c:	ee 0f       	add	r30, r30
 a5e:	ff 1f       	adc	r31, r31
 a60:	bb 1f       	adc	r27, r27
 a62:	66 1f       	adc	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	88 1f       	adc	r24, r24
 a68:	91 50       	subi	r25, 0x01	; 1
 a6a:	50 40       	sbci	r21, 0x00	; 0
 a6c:	a9 f7       	brne	.-22     	; 0xa58 <__mulsf3_pse+0x64>
 a6e:	9e 3f       	cpi	r25, 0xFE	; 254
 a70:	51 05       	cpc	r21, r1
 a72:	70 f0       	brcs	.+28     	; 0xa90 <__mulsf3_pse+0x9c>
 a74:	60 cf       	rjmp	.-320    	; 0x936 <__fp_inf>
 a76:	aa cf       	rjmp	.-172    	; 0x9cc <__fp_szero>
 a78:	5f 3f       	cpi	r21, 0xFF	; 255
 a7a:	ec f3       	brlt	.-6      	; 0xa76 <__mulsf3_pse+0x82>
 a7c:	98 3e       	cpi	r25, 0xE8	; 232
 a7e:	dc f3       	brlt	.-10     	; 0xa76 <__mulsf3_pse+0x82>
 a80:	86 95       	lsr	r24
 a82:	77 95       	ror	r23
 a84:	67 95       	ror	r22
 a86:	b7 95       	ror	r27
 a88:	f7 95       	ror	r31
 a8a:	e7 95       	ror	r30
 a8c:	9f 5f       	subi	r25, 0xFF	; 255
 a8e:	c1 f7       	brne	.-16     	; 0xa80 <__mulsf3_pse+0x8c>
 a90:	fe 2b       	or	r31, r30
 a92:	88 0f       	add	r24, r24
 a94:	91 1d       	adc	r25, r1
 a96:	96 95       	lsr	r25
 a98:	87 95       	ror	r24
 a9a:	97 f9       	bld	r25, 7
 a9c:	08 95       	ret

00000a9e <__mulsi3>:
 a9e:	62 9f       	mul	r22, r18
 aa0:	d0 01       	movw	r26, r0
 aa2:	73 9f       	mul	r23, r19
 aa4:	f0 01       	movw	r30, r0
 aa6:	82 9f       	mul	r24, r18
 aa8:	e0 0d       	add	r30, r0
 aaa:	f1 1d       	adc	r31, r1
 aac:	64 9f       	mul	r22, r20
 aae:	e0 0d       	add	r30, r0
 ab0:	f1 1d       	adc	r31, r1
 ab2:	92 9f       	mul	r25, r18
 ab4:	f0 0d       	add	r31, r0
 ab6:	83 9f       	mul	r24, r19
 ab8:	f0 0d       	add	r31, r0
 aba:	74 9f       	mul	r23, r20
 abc:	f0 0d       	add	r31, r0
 abe:	65 9f       	mul	r22, r21
 ac0:	f0 0d       	add	r31, r0
 ac2:	99 27       	eor	r25, r25
 ac4:	72 9f       	mul	r23, r18
 ac6:	b0 0d       	add	r27, r0
 ac8:	e1 1d       	adc	r30, r1
 aca:	f9 1f       	adc	r31, r25
 acc:	63 9f       	mul	r22, r19
 ace:	b0 0d       	add	r27, r0
 ad0:	e1 1d       	adc	r30, r1
 ad2:	f9 1f       	adc	r31, r25
 ad4:	bd 01       	movw	r22, r26
 ad6:	cf 01       	movw	r24, r30
 ad8:	11 24       	eor	r1, r1
 ada:	08 95       	ret

00000adc <__udivmodsi4>:
 adc:	a1 e2       	ldi	r26, 0x21	; 33
 ade:	1a 2e       	mov	r1, r26
 ae0:	aa 1b       	sub	r26, r26
 ae2:	bb 1b       	sub	r27, r27
 ae4:	fd 01       	movw	r30, r26
 ae6:	0d c0       	rjmp	.+26     	; 0xb02 <__udivmodsi4_ep>

00000ae8 <__udivmodsi4_loop>:
 ae8:	aa 1f       	adc	r26, r26
 aea:	bb 1f       	adc	r27, r27
 aec:	ee 1f       	adc	r30, r30
 aee:	ff 1f       	adc	r31, r31
 af0:	a2 17       	cp	r26, r18
 af2:	b3 07       	cpc	r27, r19
 af4:	e4 07       	cpc	r30, r20
 af6:	f5 07       	cpc	r31, r21
 af8:	20 f0       	brcs	.+8      	; 0xb02 <__udivmodsi4_ep>
 afa:	a2 1b       	sub	r26, r18
 afc:	b3 0b       	sbc	r27, r19
 afe:	e4 0b       	sbc	r30, r20
 b00:	f5 0b       	sbc	r31, r21

00000b02 <__udivmodsi4_ep>:
 b02:	66 1f       	adc	r22, r22
 b04:	77 1f       	adc	r23, r23
 b06:	88 1f       	adc	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	1a 94       	dec	r1
 b0c:	69 f7       	brne	.-38     	; 0xae8 <__udivmodsi4_loop>
 b0e:	60 95       	com	r22
 b10:	70 95       	com	r23
 b12:	80 95       	com	r24
 b14:	90 95       	com	r25
 b16:	9b 01       	movw	r18, r22
 b18:	ac 01       	movw	r20, r24
 b1a:	bd 01       	movw	r22, r26
 b1c:	cf 01       	movw	r24, r30
 b1e:	08 95       	ret

00000b20 <_exit>:
 b20:	f8 94       	cli

00000b22 <__stop_program>:
 b22:	ff cf       	rjmp	.-2      	; 0xb22 <__stop_program>
