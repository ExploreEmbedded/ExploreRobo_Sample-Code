
Line Follower_Robo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000b84  00000c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  00000c1a  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00000c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00002d48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093e  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000026b  00000000  00000000  00003766  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000596  00000000  00000000  000039d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00003f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030f  00000000  00000000  00004198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b12  00000000  00000000  000044a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  9e:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:

volatile unsigned char cnt=0, Prev_Dirn=0,duty=90;


ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	
	cnt++;          // Increment the cnt value each time the isr is executed
  b4:	80 91 04 01 	lds	r24, 0x0104
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 04 01 	sts	0x0104, r24

	if(cnt > duty)
  be:	90 91 04 01 	lds	r25, 0x0104
  c2:	80 91 00 01 	lds	r24, 0x0100
  c6:	89 17       	cp	r24, r25
  c8:	10 f4       	brcc	.+4      	; 0xce <__vector_13+0x28>
	{
		Robot = Stop;
  ca:	18 b8       	out	0x08, r1	; 8
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__vector_13+0x4e>
	}
	else if(cnt < duty)
  ce:	90 91 04 01 	lds	r25, 0x0104
  d2:	80 91 00 01 	lds	r24, 0x0100
  d6:	98 17       	cp	r25, r24
  d8:	20 f4       	brcc	.+8      	; 0xe2 <__vector_13+0x3c>
	{
		Robot = Prev_Dirn;
  da:	80 91 03 01 	lds	r24, 0x0103
  de:	88 b9       	out	0x08, r24	; 8
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__vector_13+0x4e>
	}
	else if(cnt==100)
  e2:	80 91 04 01 	lds	r24, 0x0104
  e6:	84 36       	cpi	r24, 0x64	; 100
  e8:	29 f4       	brne	.+10     	; 0xf4 <__vector_13+0x4e>
	{
		Robot = Prev_Dirn;
  ea:	80 91 03 01 	lds	r24, 0x0103
  ee:	88 b9       	out	0x08, r24	; 8
		cnt =0;
  f0:	10 92 04 01 	sts	0x0104, r1
	}
	
	TCNT1H=0xff;    // Reload the 16-bit count value
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0x00;    // in timer1 count registers
  fa:	10 92 84 00 	sts	0x0084, r1
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:

void main(void)
{
	unsigned char old_value=0, new_value=0;

	DDRC = 0xff; //making port c output
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;// inputs
 110:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0X00;// sensor inputs.
 112:	14 b8       	out	0x04, r1	; 4


	UART_Init(9600);
 114:	60 e8       	ldi	r22, 0x80	; 128
 116:	75 e2       	ldi	r23, 0x25	; 37
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 25 01 	call	0x24a	; 0x24a <UART_Init>
	PORTB = 0X07;
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	85 b9       	out	0x05, r24	; 5

	TCNT1H=0xEF;   // Load the 16-bit count value
 124:	8f ee       	ldi	r24, 0xEF	; 239
 126:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0x00;   // for 1 sec at 7.3728MHz
 12a:	10 92 84 00 	sts	0x0084, r1

	TCCR1A=0x00;
 12e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x01;  // Timer mode with 1024 prescler
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=0x01;   // Enable timer1 overflow interrupt(TOIE1)
 138:	80 93 6f 00 	sts	0x006F, r24
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 13c:	78 94       	sei
unsigned char key;
unsigned char volatile F_NewKey=0;

void main(void)
{
	unsigned char old_value=0, new_value=0;
 13e:	20 e0       	ldi	r18, 0x00	; 0

			{
				case 0: Prev_Dirn= Robot = Stop;  break;
				case 1: Prev_Dirn= Robot = Right;    break;
				case 2: Prev_Dirn= Robot = Forward;  break;
				case 3: Prev_Dirn= Robot = Right;    break;
 140:	55 e0       	ldi	r21, 0x05	; 5
				case 4: Prev_Dirn= Robot = Left;     break;
				case 5: Prev_Dirn= Robot = Forward;  break;
 142:	36 e0       	ldi	r19, 0x06	; 6
			{
				case 0: Prev_Dirn= Robot = Stop;  break;
				case 1: Prev_Dirn= Robot = Right;    break;
				case 2: Prev_Dirn= Robot = Forward;  break;
				case 3: Prev_Dirn= Robot = Right;    break;
				case 4: Prev_Dirn= Robot = Left;     break;
 144:	4a e0       	ldi	r20, 0x0A	; 10


	while(1)
	{

		new_value = PINB & 0X07;
 146:	83 b1       	in	r24, 0x03	; 3
 148:	87 70       	andi	r24, 0x07	; 7
		PORTD = new_value<<4;
 14a:	98 2f       	mov	r25, r24
 14c:	92 95       	swap	r25
 14e:	90 7f       	andi	r25, 0xF0	; 240
 150:	9b b9       	out	0x0b, r25	; 11

		if(new_value!=old_value)
 152:	82 17       	cp	r24, r18
 154:	c1 f3       	breq	.-16     	; 0x146 <main+0x3a>
		{
			Robot = Stop;
 156:	18 b8       	out	0x08, r1	; 8
			switch(new_value)
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	e1 f0       	breq	.+56     	; 0x194 <main+0x88>
 15c:	84 30       	cpi	r24, 0x04	; 4
 15e:	28 f4       	brcc	.+10     	; 0x16a <main+0x5e>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	81 f0       	breq	.+32     	; 0x184 <main+0x78>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	90 f4       	brcc	.+36     	; 0x18c <main+0x80>
 168:	09 c0       	rjmp	.+18     	; 0x17c <main+0x70>
 16a:	85 30       	cpi	r24, 0x05	; 5
 16c:	d9 f0       	breq	.+54     	; 0x1a4 <main+0x98>
 16e:	85 30       	cpi	r24, 0x05	; 5
 170:	a8 f0       	brcs	.+42     	; 0x19c <main+0x90>
 172:	86 30       	cpi	r24, 0x06	; 6
 174:	d9 f0       	breq	.+54     	; 0x1ac <main+0xa0>
 176:	87 30       	cpi	r24, 0x07	; 7
 178:	09 f5       	brne	.+66     	; 0x1bc <main+0xb0>
 17a:	1c c0       	rjmp	.+56     	; 0x1b4 <main+0xa8>

			{
				case 0: Prev_Dirn= Robot = Stop;  break;
 17c:	18 b8       	out	0x08, r1	; 8
 17e:	10 92 03 01 	sts	0x0103, r1
 182:	1f c0       	rjmp	.+62     	; 0x1c2 <main+0xb6>
				case 1: Prev_Dirn= Robot = Right;    break;
 184:	58 b9       	out	0x08, r21	; 8
 186:	50 93 03 01 	sts	0x0103, r21
 18a:	1b c0       	rjmp	.+54     	; 0x1c2 <main+0xb6>
				case 2: Prev_Dirn= Robot = Forward;  break;
 18c:	38 b9       	out	0x08, r19	; 8
 18e:	30 93 03 01 	sts	0x0103, r19
 192:	17 c0       	rjmp	.+46     	; 0x1c2 <main+0xb6>
				case 3: Prev_Dirn= Robot = Right;    break;
 194:	58 b9       	out	0x08, r21	; 8
 196:	50 93 03 01 	sts	0x0103, r21
 19a:	13 c0       	rjmp	.+38     	; 0x1c2 <main+0xb6>
				case 4: Prev_Dirn= Robot = Left;     break;
 19c:	48 b9       	out	0x08, r20	; 8
 19e:	40 93 03 01 	sts	0x0103, r20
 1a2:	0f c0       	rjmp	.+30     	; 0x1c2 <main+0xb6>
				case 5: Prev_Dirn= Robot = Forward;  break;
 1a4:	38 b9       	out	0x08, r19	; 8
 1a6:	30 93 03 01 	sts	0x0103, r19
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <main+0xb6>
				case 6: Prev_Dirn= Robot = Left;     break;
 1ac:	48 b9       	out	0x08, r20	; 8
 1ae:	40 93 03 01 	sts	0x0103, r20
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <main+0xb6>
				case 7: Prev_Dirn= Robot = Forward;   break;
 1b4:	38 b9       	out	0x08, r19	; 8
 1b6:	30 93 03 01 	sts	0x0103, r19
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <main+0xb6>
				default: Prev_Dirn= Robot = Stop;  break;
 1bc:	18 b8       	out	0x08, r1	; 8
 1be:	10 92 03 01 	sts	0x0103, r1
			}

			old_value = new_value;
			
			cnt = 0;
 1c2:	10 92 04 01 	sts	0x0104, r1


	while(1)
	{

		new_value = PINB & 0X07;
 1c6:	28 2f       	mov	r18, r24
 1c8:	be cf       	rjmp	.-132    	; 0x146 <main+0x3a>

000001ca <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	6b 01       	movw	r12, r22
 1d4:	7c 01       	movw	r14, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	80 56       	subi	r24, 0x60	; 96
 1dc:	99 40       	sbci	r25, 0x09	; 9
 1de:	a0 40       	sbci	r26, 0x00	; 0
 1e0:	b0 40       	sbci	r27, 0x00	; 0
 1e2:	81 3a       	cpi	r24, 0xA1	; 161
 1e4:	28 eb       	ldi	r18, 0xB8	; 184
 1e6:	92 07       	cpc	r25, r18
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	a2 07       	cpc	r26, r18
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	b2 07       	cpc	r27, r18
 1f0:	08 f5       	brcc	.+66     	; 0x234 <UART_SetBaudRate+0x6a>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
 1f2:	c7 01       	movw	r24, r14
 1f4:	b6 01       	movw	r22, r12
 1f6:	28 ef       	ldi	r18, 0xF8	; 248
 1f8:	3f ef       	ldi	r19, 0xFF	; 255
 1fa:	4f ef       	ldi	r20, 0xFF	; 255
 1fc:	5f ef       	ldi	r21, 0xFF	; 255
 1fe:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsi3>
 202:	60 50       	subi	r22, 0x00	; 0
 204:	7c 4d       	sbci	r23, 0xDC	; 220
 206:	8b 40       	sbci	r24, 0x0B	; 11
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	cc 0c       	add	r12, r12
 20c:	dd 1c       	adc	r13, r13
 20e:	ee 1c       	adc	r14, r14
 210:	ff 1c       	adc	r15, r15
 212:	cc 0c       	add	r12, r12
 214:	dd 1c       	adc	r13, r13
 216:	ee 1c       	adc	r14, r14
 218:	ff 1c       	adc	r15, r15
 21a:	a7 01       	movw	r20, r14
 21c:	96 01       	movw	r18, r12
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	44 1f       	adc	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	44 1f       	adc	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__udivmodsi4>
 232:	02 c0       	rjmp	.+4      	; 0x238 <UART_SetBaudRate+0x6e>
	}
	else
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
 234:	27 e6       	ldi	r18, 0x67	; 103
 236:	30 e0       	ldi	r19, 0x00	; 0
	}

	UBRR0L = util_ExtractByte0to8(RegValue);
 238:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H = util_ExtractByte8to16(RegValue);
 23c:	30 93 c5 00 	sts	0x00C5, r19
}
 240:	ff 90       	pop	r15
 242:	ef 90       	pop	r14
 244:	df 90       	pop	r13
 246:	cf 90       	pop	r12
 248:	08 95       	ret

0000024a <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSR0B= (1<<RXEN0) | (1<<TXEN0);                  // Enable Receiver and Transmitter
 24a:	28 e1       	ldi	r18, 0x18	; 24
 24c:	20 93 c1 00 	sts	0x00C1, r18
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00);   // Asynchronous mode 8-bit data and 1-stop bit
 250:	26 e0       	ldi	r18, 0x06	; 6
 252:	20 93 c2 00 	sts	0x00C2, r18
	UCSR0A= 0x00;                                   // Clear the UASRT status register
 256:	10 92 c0 00 	sts	0x00C0, r1
	UART_SetBaudRate(var_baudRate_u32);
 25a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_SetBaudRate>
}
 25e:	08 95       	ret

00000260 <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSR0A,RXC0));  // Wait till the data is received
 260:	e0 ec       	ldi	r30, 0xC0	; 192
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 23       	and	r24, r24
 268:	ec f7       	brge	.-6      	; 0x264 <UART_RxChar+0x4>
	return(UDR0);                          // return the received char
 26a:	80 91 c6 00 	lds	r24, 0x00C6
}
 26e:	08 95       	ret

00000270 <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSR0A,UDRE0)); // Wait till Transmitter(UDR) register becomes Empty
 270:	e0 ec       	ldi	r30, 0xC0	; 192
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	90 81       	ld	r25, Z
 276:	95 ff       	sbrs	r25, 5
 278:	fd cf       	rjmp	.-6      	; 0x274 <UART_TxChar+0x4>
	UDR0 =var_uartData_u8;                              // Load the data to be transmitted
 27a:	80 93 c6 00 	sts	0x00C6, r24
}
 27e:	08 95       	ret

00000280 <UART_TxString>:
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ec 01       	movw	r28, r24
	while(*ptr_stringPointer_u8)
 286:	88 81       	ld	r24, Y
 288:	88 23       	and	r24, r24
 28a:	31 f0       	breq	.+12     	; 0x298 <UART_TxString+0x18>
 * description :This function is used to transmit a NULL terminated string through UART.
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
 28c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr_stringPointer_u8)
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 28e:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
 292:	89 91       	ld	r24, Y+
 294:	88 23       	and	r24, r24
 296:	d9 f7       	brne	.-10     	; 0x28e <UART_TxString+0xe>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <UART_RxString>:
    if not required then comment UART_TxChar(ch) in the code.
  2.BackSlash is not taken care.
***************************************************************************************************/
#if (Enable_UART_RxString==1)
void UART_RxString(char *ptr_stringPointer_u8)
{
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	char ch;
	while(1)
	{
		ch=UART_RxChar();    //Receive a char
 2a6:	0e 94 30 01 	call	0x260	; 0x260 <UART_RxChar>
 2aa:	18 2f       	mov	r17, r24
		UART_TxChar(ch);     //Echo back the received char
 2ac:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>

		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
 2b0:	1d 30       	cpi	r17, 0x0D	; 13
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <UART_RxString+0x1a>
 2b4:	1a 30       	cpi	r17, 0x0A	; 10
 2b6:	29 f4       	brne	.+10     	; 0x2c2 <UART_RxString+0x24>
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
 2b8:	18 82       	st	Y, r1
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
		ptr_stringPointer_u8++;
	}
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	08 95       	ret
		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
 2c2:	19 93       	st	Y+, r17
		ptr_stringPointer_u8++;
	}
 2c4:	f0 cf       	rjmp	.-32     	; 0x2a6 <UART_RxString+0x8>

000002c6 <UART_TxDecimalNumber>:
				2.(12345,6) then 6-digits ie. 012345 will be transmitted
				3.(12345,C_DefaultDigitsToTransmit_U8) then 12345 will be transmitted.
***************************************************************************************************/
#if ((Enable_UART_TxDecimalNumber==1) || (Enable_UART_TxFloatNumber==1))
void UART_TxDecimalNumber(uint32_t var_decNumber_u32, uint8_t var_numOfDigitsToTransmit_u8)
{
 2c6:	8f 92       	push	r8
 2c8:	9f 92       	push	r9
 2ca:	af 92       	push	r10
 2cc:	bf 92       	push	r11
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	2a 97       	sbiw	r28, 0x0a	; 10
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	dc 01       	movw	r26, r24
 2ec:	cb 01       	movw	r24, r22
 2ee:	04 2f       	mov	r16, r20
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	a1 05       	cpc	r26, r1
 2f4:	b1 05       	cpc	r27, r1
 2f6:	19 f0       	breq	.+6      	; 0x2fe <UART_TxDecimalNumber+0x38>
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 2f8:	44 23       	and	r20, r20
 2fa:	71 f4       	brne	.+28     	; 0x318 <UART_TxDecimalNumber+0x52>
 2fc:	43 c0       	rjmp	.+134    	; 0x384 <UART_TxDecimalNumber+0xbe>
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 2fe:	44 23       	and	r20, r20
 300:	09 f4       	brne	.+2      	; 0x304 <UART_TxDecimalNumber+0x3e>
 302:	40 c0       	rjmp	.+128    	; 0x384 <UART_TxDecimalNumber+0xbe>
 304:	fe 01       	movw	r30, r28
 306:	31 96       	adiw	r30, 0x01	; 1
 308:	10 e0       	ldi	r17, 0x00	; 0
		   a[i] = 0x00;
 30a:	11 92       	st	Z+, r1
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 30c:	1f 5f       	subi	r17, 0xFF	; 255
 30e:	10 17       	cp	r17, r16
 310:	81 f1       	breq	.+96     	; 0x372 <UART_TxDecimalNumber+0xac>
 312:	1a 30       	cpi	r17, 0x0A	; 10
 314:	d1 f7       	brne	.-12     	; 0x30a <UART_TxDecimalNumber+0x44>
 316:	2d c0       	rjmp	.+90     	; 0x372 <UART_TxDecimalNumber+0xac>
 318:	7e 01       	movw	r14, r28
 31a:	08 94       	sec
 31c:	e1 1c       	adc	r14, r1
 31e:	f1 1c       	adc	r15, r1
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 320:	10 e0       	ldi	r17, 0x00	; 0
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the remainder and divide the number by 10 each time.
                If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
				The process continues till it becomes zero or max digits reached*/
				a[i]=util_GetMod32(var_decNumber_u32,10);
 322:	0f 2e       	mov	r0, r31
 324:	fa e0       	ldi	r31, 0x0A	; 10
 326:	8f 2e       	mov	r8, r31
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	9f 2e       	mov	r9, r31
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	af 2e       	mov	r10, r31
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	bf 2e       	mov	r11, r31
 334:	f0 2d       	mov	r31, r0
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
		{
			/* Continue extracting the digits from right side
			   till the Specified var_numOfDigitsToTransmit_u8 */
			if(var_decNumber_u32!=0)
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	a1 05       	cpc	r26, r1
 33a:	b1 05       	cpc	r27, r1
 33c:	69 f0       	breq	.+26     	; 0x358 <UART_TxDecimalNumber+0x92>
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the remainder and divide the number by 10 each time.
                If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
				The process continues till it becomes zero or max digits reached*/
				a[i]=util_GetMod32(var_decNumber_u32,10);
 33e:	bc 01       	movw	r22, r24
 340:	cd 01       	movw	r24, r26
 342:	a5 01       	movw	r20, r10
 344:	94 01       	movw	r18, r8
 346:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__udivmodsi4>
 34a:	f7 01       	movw	r30, r14
 34c:	60 83       	st	Z, r22
				var_decNumber_u32=var_decNumber_u32/10;
 34e:	82 2f       	mov	r24, r18
 350:	93 2f       	mov	r25, r19
 352:	a4 2f       	mov	r26, r20
 354:	b5 2f       	mov	r27, r21
 356:	04 c0       	rjmp	.+8      	; 0x360 <UART_TxDecimalNumber+0x9a>
			}
			else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 358:	0b 30       	cpi	r16, 0x0B	; 11
 35a:	48 f4       	brcc	.+18     	; 0x36e <UART_TxDecimalNumber+0xa8>
			else
			{
				/*In case user expects more digits to be transmitted than the actual digits in number,
  			    then update the remaining digits with zero.
                Ex: var_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0;
 35c:	f7 01       	movw	r30, r14
 35e:	10 82       	st	Z, r1
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 360:	1f 5f       	subi	r17, 0xFF	; 255
 362:	08 94       	sec
 364:	e1 1c       	adc	r14, r1
 366:	f1 1c       	adc	r15, r1
 368:	10 17       	cp	r17, r16
 36a:	29 f7       	brne	.-54     	; 0x336 <UART_TxDecimalNumber+0x70>
 36c:	02 c0       	rjmp	.+4      	; 0x372 <UART_TxDecimalNumber+0xac>
				a[i]=0;
			}
		}
	}

	while(i)
 36e:	11 23       	and	r17, r17
 370:	49 f0       	breq	.+18     	; 0x384 <UART_TxDecimalNumber+0xbe>
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
 372:	fe 01       	movw	r30, r28
 374:	e1 0f       	add	r30, r17
 376:	f1 1d       	adc	r31, r1
 378:	80 81       	ld	r24, Z
 37a:	80 5d       	subi	r24, 0xD0	; 208
 37c:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>
		i--;
 380:	11 50       	subi	r17, 0x01	; 1
				a[i]=0;
			}
		}
	}

	while(i)
 382:	b9 f7       	brne	.-18     	; 0x372 <UART_TxDecimalNumber+0xac>
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
		i--;
	}
}
 384:	2a 96       	adiw	r28, 0x0a	; 10
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	bf 90       	pop	r11
 39e:	af 90       	pop	r10
 3a0:	9f 90       	pop	r9
 3a2:	8f 90       	pop	r8
 3a4:	08 95       	ret

000003a6 <UART_TxHexNumber>:
				2.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
				3.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.
***************************************************************************************************/
#if (Enable_UART_TxHexNumber==1)
void UART_TxHexNumber(uint32_t var_hexNumber_u32,uint8_t var_numOfDigitsToTransmit_u8)
{
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	2a 97       	sbiw	r28, 0x0a	; 10
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	dc 01       	movw	r26, r24
 3be:	cb 01       	movw	r24, r22
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
 3c0:	00 97       	sbiw	r24, 0x00	; 0
 3c2:	a1 05       	cpc	r26, r1
 3c4:	b1 05       	cpc	r27, r1
 3c6:	19 f0       	breq	.+6      	; 0x3ce <UART_TxHexNumber+0x28>
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 3c8:	44 23       	and	r20, r20
 3ca:	69 f4       	brne	.+26     	; 0x3e6 <UART_TxHexNumber+0x40>
 3cc:	36 c0       	rjmp	.+108    	; 0x43a <UART_TxHexNumber+0x94>
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
	{
		/* If the number zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 3ce:	44 23       	and	r20, r20
 3d0:	a1 f1       	breq	.+104    	; 0x43a <UART_TxHexNumber+0x94>
 3d2:	fe 01       	movw	r30, r28
 3d4:	31 96       	adiw	r30, 0x01	; 1
 3d6:	10 e0       	ldi	r17, 0x00	; 0
		  a[i]=0x00;
 3d8:	11 92       	st	Z+, r1
	uint8_t i=0,a[10];

	if(var_hexNumber_u32==0)
	{
		/* If the number zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 3da:	1f 5f       	subi	r17, 0xFF	; 255
 3dc:	14 17       	cp	r17, r20
 3de:	01 f1       	breq	.+64     	; 0x420 <UART_TxHexNumber+0x7a>
 3e0:	1a 30       	cpi	r17, 0x0A	; 10
 3e2:	d1 f7       	brne	.-12     	; 0x3d8 <UART_TxHexNumber+0x32>
 3e4:	1d c0       	rjmp	.+58     	; 0x420 <UART_TxHexNumber+0x7a>
 3e6:	fe 01       	movw	r30, r28
 3e8:	31 96       	adiw	r30, 0x01	; 1
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 3ea:	10 e0       	ldi	r17, 0x00	; 0
		{
			/* Continue extracting the digits from right side till the Specified var_numOfDigitsToTransmit_u8 */
			if(var_hexNumber_u32!=0)
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	a1 05       	cpc	r26, r1
 3f0:	b1 05       	cpc	r27, r1
 3f2:	61 f0       	breq	.+24     	; 0x40c <UART_TxHexNumber+0x66>
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the lower nibble and shift the number 4 times.
			   If var_number_u32 = 0xABC then extracted digit will be 0x0C and number will become 0xAB.
			   The process continues till it becomes zero or max digits reached*/
				a[i]=(uint8_t)(var_hexNumber_u32 & 0x0f);
 3f4:	28 2f       	mov	r18, r24
 3f6:	2f 70       	andi	r18, 0x0F	; 15
 3f8:	20 83       	st	Z, r18
				var_hexNumber_u32=var_hexNumber_u32 >> 4;
 3fa:	68 94       	set
 3fc:	13 f8       	bld	r1, 3
 3fe:	b6 95       	lsr	r27
 400:	a7 95       	ror	r26
 402:	97 95       	ror	r25
 404:	87 95       	ror	r24
 406:	16 94       	lsr	r1
 408:	d1 f7       	brne	.-12     	; 0x3fe <UART_TxHexNumber+0x58>
 40a:	03 c0       	rjmp	.+6      	; 0x412 <UART_TxHexNumber+0x6c>
			}
			else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 40c:	4b 30       	cpi	r20, 0x0B	; 11
 40e:	30 f4       	brcc	.+12     	; 0x41c <UART_TxHexNumber+0x76>
			else
			{
				/* In case user expects more digits to be transmitted than the actual digits in number,
  			           then update the remaining digits with zero.
                Ex: var_number_u32 is 0x123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0x00;
 410:	10 82       	st	Z, r1
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		  a[i]=0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 412:	1f 5f       	subi	r17, 0xFF	; 255
 414:	31 96       	adiw	r30, 0x01	; 1
 416:	14 17       	cp	r17, r20
 418:	49 f7       	brne	.-46     	; 0x3ec <UART_TxHexNumber+0x46>
 41a:	02 c0       	rjmp	.+4      	; 0x420 <UART_TxHexNumber+0x7a>
				a[i]=0x00;
			}
		}
	}

	while(i!=0)
 41c:	11 23       	and	r17, r17
 41e:	69 f0       	breq	.+26     	; 0x43a <UART_TxHexNumber+0x94>
	{
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Hex2Ascii(a[i-1]));
 420:	fe 01       	movw	r30, r28
 422:	e1 0f       	add	r30, r17
 424:	f1 1d       	adc	r31, r1
 426:	80 81       	ld	r24, Z
 428:	8a 30       	cpi	r24, 0x0A	; 10
 42a:	10 f0       	brcs	.+4      	; 0x430 <UART_TxHexNumber+0x8a>
 42c:	89 5c       	subi	r24, 0xC9	; 201
 42e:	01 c0       	rjmp	.+2      	; 0x432 <UART_TxHexNumber+0x8c>
 430:	80 5d       	subi	r24, 0xD0	; 208
 432:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>
		i--;
 436:	11 50       	subi	r17, 0x01	; 1
				a[i]=0x00;
			}
		}
	}

	while(i!=0)
 438:	99 f7       	brne	.-26     	; 0x420 <UART_TxHexNumber+0x7a>
	{
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Hex2Ascii(a[i-1]));
		i--;
	}
}
 43a:	2a 96       	adiw	r28, 0x0a	; 10
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	08 95       	ret

0000044e <UART_TxBinaryNumber>:
				2.(10,8) then 8-LSB will be transmitted ie. 00001010
				3.(10,2) then 2-LSB will be transmitted ie. 10
***************************************************************************************************/
#if (Enable_UART_TxBinaryNumber==1)
void UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
{
 44e:	bf 92       	push	r11
 450:	cf 92       	push	r12
 452:	df 92       	push	r13
 454:	ef 92       	push	r14
 456:	ff 92       	push	r15
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	6b 01       	movw	r12, r22
 462:	7c 01       	movw	r14, r24
 464:	c4 2f       	mov	r28, r20
	uint8_t ch;

	while(var_numOfBitsToTransmit_u8!=0)
 466:	44 23       	and	r20, r20
 468:	19 f1       	breq	.+70     	; 0x4b0 <UART_TxBinaryNumber+0x62>
	{
		/* Start Extracting the bits from the specified bit positions.
	     Get the Acsii values of the bits and transmit */
		ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToTransmit_u8-1));
 46a:	01 e0       	ldi	r16, 0x01	; 1
 46c:	10 e0       	ldi	r17, 0x00	; 0
 46e:	d1 e0       	ldi	r29, 0x01	; 1
 470:	bb 24       	eor	r11, r11
 472:	4c 2f       	mov	r20, r28
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	41 50       	subi	r20, 0x01	; 1
 478:	50 40       	sbci	r21, 0x00	; 0
 47a:	c8 01       	movw	r24, r16
 47c:	02 c0       	rjmp	.+4      	; 0x482 <UART_TxBinaryNumber+0x34>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	4a 95       	dec	r20
 484:	e2 f7       	brpl	.-8      	; 0x47e <UART_TxBinaryNumber+0x30>
 486:	ac 01       	movw	r20, r24
 488:	66 27       	eor	r22, r22
 48a:	57 fd       	sbrc	r21, 7
 48c:	60 95       	com	r22
 48e:	76 2f       	mov	r23, r22
 490:	4c 21       	and	r20, r12
 492:	5d 21       	and	r21, r13
 494:	6e 21       	and	r22, r14
 496:	7f 21       	and	r23, r15
 498:	8d 2f       	mov	r24, r29
 49a:	41 15       	cp	r20, r1
 49c:	51 05       	cpc	r21, r1
 49e:	61 05       	cpc	r22, r1
 4a0:	71 05       	cpc	r23, r1
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <UART_TxBinaryNumber+0x58>
 4a4:	8b 2d       	mov	r24, r11
		UART_TxChar(util_Dec2Ascii(ch));
 4a6:	80 5d       	subi	r24, 0xD0	; 208
 4a8:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>
		var_numOfBitsToTransmit_u8--;
 4ac:	c1 50       	subi	r28, 0x01	; 1
#if (Enable_UART_TxBinaryNumber==1)
void UART_TxBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToTransmit_u8)
{
	uint8_t ch;

	while(var_numOfBitsToTransmit_u8!=0)
 4ae:	09 f7       	brne	.-62     	; 0x472 <UART_TxBinaryNumber+0x24>
	     Get the Acsii values of the bits and transmit */
		ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToTransmit_u8-1));
		UART_TxChar(util_Dec2Ascii(ch));
		var_numOfBitsToTransmit_u8--;
	}
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	df 90       	pop	r13
 4be:	cf 90       	pop	r12
 4c0:	bf 90       	pop	r11
 4c2:	08 95       	ret

000004c4 <UART_TxFloatNumber>:
         Float will be disabled by default as it takes huge controller resources
	     It can be enabled by changing value of Enable_UART_TxFloatNumber to 1 in uart.h	 
 ***************************************************************************************************/
#if (Enable_UART_TxFloatNumber==1)
void UART_TxFloatNumber(float var_floatNumber_f32)
{
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	6b 01       	movw	r12, r22
 4d6:	7c 01       	movw	r14, r24
      1.Type cast the number to int to get the integer part.
	  2.transmit the extracted integer part followed by a decimal point(.).
	  3.Later the integer part is made zero by subtracting with the extracted integer value.
	  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

	var_tempNumber_u32 = (uint32_t) var_floatNumber_f32;
 4d8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fixunssfsi>
 4dc:	06 2f       	mov	r16, r22
 4de:	17 2f       	mov	r17, r23
 4e0:	d8 2f       	mov	r29, r24
 4e2:	c9 2f       	mov	r28, r25
	UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 4e4:	4f ef       	ldi	r20, 0xFF	; 255
 4e6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <UART_TxDecimalNumber>

	UART_TxChar('.');
 4ea:	8e e2       	ldi	r24, 0x2E	; 46
 4ec:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>

	var_floatNumber_f32 = var_floatNumber_f32 - var_tempNumber_u32;
 4f0:	60 2f       	mov	r22, r16
 4f2:	71 2f       	mov	r23, r17
 4f4:	8d 2f       	mov	r24, r29
 4f6:	9c 2f       	mov	r25, r28
 4f8:	0e 94 8e 04 	call	0x91c	; 0x91c <__floatunsisf>
 4fc:	9b 01       	movw	r18, r22
 4fe:	ac 01       	movw	r20, r24
 500:	c7 01       	movw	r24, r14
 502:	b6 01       	movw	r22, r12
 504:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__subsf3>
	var_tempNumber_u32 = var_floatNumber_f32 * 1000000;
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	34 e2       	ldi	r19, 0x24	; 36
 50c:	44 e7       	ldi	r20, 0x74	; 116
 50e:	59 e4       	ldi	r21, 0x49	; 73
 510:	0e 94 1c 05 	call	0xa38	; 0xa38 <__mulsf3>
 514:	46 2f       	mov	r20, r22
 516:	57 2f       	mov	r21, r23
 518:	68 2f       	mov	r22, r24
 51a:	79 2f       	mov	r23, r25
 51c:	cb 01       	movw	r24, r22
 51e:	ba 01       	movw	r22, r20
 520:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fixunssfsi>
	UART_TxDecimalNumber(var_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 524:	4f ef       	ldi	r20, 0xFF	; 255
 526:	0e 94 63 01 	call	0x2c6	; 0x2c6 <UART_TxDecimalNumber>
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	df 90       	pop	r13
 538:	cf 90       	pop	r12
 53a:	08 95       	ret

0000053c <UART_Printf>:
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
{
 53c:	5f 92       	push	r5
 53e:	6f 92       	push	r6
 540:	7f 92       	push	r7
 542:	8f 92       	push	r8
 544:	9f 92       	push	r9
 546:	af 92       	push	r10
 548:	bf 92       	push	r11
 54a:	cf 92       	push	r12
 54c:	df 92       	push	r13
 54e:	ef 92       	push	r14
 550:	ff 92       	push	r15
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	0f 2e       	mov	r0, r31
 560:	f2 e1       	ldi	r31, 0x12	; 18
 562:	cf 2e       	mov	r12, r31
 564:	dd 24       	eor	r13, r13
 566:	f0 2d       	mov	r31, r0
 568:	cc 0e       	add	r12, r28
 56a:	dd 1e       	adc	r13, r29
 56c:	d6 01       	movw	r26, r12
 56e:	ed 91       	ld	r30, X+
 570:	fd 91       	ld	r31, X+
 572:	6d 01       	movw	r12, r26
	uint8_t var_numOfDigitsToTransmit_u8;

	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 574:	80 81       	ld	r24, Z
 576:	88 23       	and	r24, r24
 578:	09 f4       	brne	.+2      	; 0x57c <UART_Printf+0x40>
 57a:	2f c1       	rjmp	.+606    	; 0x7da <UART_Printf+0x29e>
 57c:	8f 01       	movw	r16, r30
			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;
 57e:	55 24       	eor	r5, r5
 580:	68 94       	set
 582:	54 f8       	bld	r5, 4
				   ch = *ptr;
				}
			}
			else
			{
			  var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 584:	99 24       	eor	r9, r9
 586:	9a 94       	dec	r9
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
 588:	88 24       	eor	r8, r8
	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
	{

		ch= *ptr;
		if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 58a:	85 32       	cpi	r24, 0x25	; 37
 58c:	09 f0       	breq	.+2      	; 0x590 <UART_Printf+0x54>
 58e:	18 c1       	rjmp	.+560    	; 0x7c0 <UART_Printf+0x284>
		{
		    ptr++;
 590:	58 01       	movw	r10, r16
 592:	08 94       	sec
 594:	a1 1c       	adc	r10, r1
 596:	b1 1c       	adc	r11, r1
		    ch = *ptr;
 598:	f8 01       	movw	r30, r16
 59a:	81 81       	ldd	r24, Z+1	; 0x01
		   if((ch>=0x30) && (ch<=0x39))
 59c:	98 2f       	mov	r25, r24
 59e:	90 53       	subi	r25, 0x30	; 48
 5a0:	9a 30       	cpi	r25, 0x0A	; 10
 5a2:	80 f4       	brcc	.+32     	; 0x5c4 <UART_Printf+0x88>
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t var_Num_u8;
		UART_Printf("num1:%u",(uint16_t)var_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
 5a4:	32 96       	adiw	r30, 0x02	; 2
 5a6:	18 2d       	mov	r17, r8
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   var_numOfDigitsToTransmit_u8 = (var_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 5a8:	11 0f       	add	r17, r17
 5aa:	91 2f       	mov	r25, r17
 5ac:	99 0f       	add	r25, r25
 5ae:	99 0f       	add	r25, r25
 5b0:	19 0f       	add	r17, r25
 5b2:	80 53       	subi	r24, 0x30	; 48
 5b4:	18 0f       	add	r17, r24
				   ptr++;
 5b6:	5f 01       	movw	r10, r30
				   ch = *ptr;
 5b8:	81 91       	ld	r24, Z+
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
 5ba:	98 2f       	mov	r25, r24
 5bc:	90 53       	subi	r25, 0x30	; 48
 5be:	9a 30       	cpi	r25, 0x0A	; 10
 5c0:	98 f3       	brcs	.-26     	; 0x5a8 <UART_Printf+0x6c>
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <UART_Printf+0x8a>
				   ch = *ptr;
				}
			}
			else
			{
			  var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 5c4:	19 2d       	mov	r17, r9
			}				


			switch(ch)       /* Decode the type of the argument */
 5c6:	88 35       	cpi	r24, 0x58	; 88
 5c8:	09 f4       	brne	.+2      	; 0x5cc <UART_Printf+0x90>
 5ca:	a8 c0       	rjmp	.+336    	; 0x71c <UART_Printf+0x1e0>
 5cc:	89 35       	cpi	r24, 0x59	; 89
 5ce:	c0 f4       	brcc	.+48     	; 0x600 <UART_Printf+0xc4>
 5d0:	84 34       	cpi	r24, 0x44	; 68
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <UART_Printf+0x9a>
 5d4:	51 c0       	rjmp	.+162    	; 0x678 <UART_Printf+0x13c>
 5d6:	85 34       	cpi	r24, 0x45	; 69
 5d8:	48 f4       	brcc	.+18     	; 0x5ec <UART_Printf+0xb0>
 5da:	82 34       	cpi	r24, 0x42	; 66
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <UART_Printf+0xa4>
 5de:	c2 c0       	rjmp	.+388    	; 0x764 <UART_Printf+0x228>
 5e0:	83 34       	cpi	r24, 0x43	; 67
 5e2:	28 f5       	brcc	.+74     	; 0x62e <UART_Printf+0xf2>
 5e4:	85 32       	cpi	r24, 0x25	; 37
 5e6:	09 f0       	breq	.+2      	; 0x5ea <UART_Printf+0xae>
 5e8:	ee c0       	rjmp	.+476    	; 0x7c6 <UART_Printf+0x28a>
 5ea:	e6 c0       	rjmp	.+460    	; 0x7b8 <UART_Printf+0x27c>
 5ec:	83 35       	cpi	r24, 0x53	; 83
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <UART_Printf+0xb6>
 5f0:	d9 c0       	rjmp	.+434    	; 0x7a4 <UART_Printf+0x268>
 5f2:	85 35       	cpi	r24, 0x55	; 85
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <UART_Printf+0xbc>
 5f6:	71 c0       	rjmp	.+226    	; 0x6da <UART_Printf+0x19e>
 5f8:	86 34       	cpi	r24, 0x46	; 70
 5fa:	09 f0       	breq	.+2      	; 0x5fe <UART_Printf+0xc2>
 5fc:	e4 c0       	rjmp	.+456    	; 0x7c6 <UART_Printf+0x28a>
 5fe:	c6 c0       	rjmp	.+396    	; 0x78c <UART_Printf+0x250>
 600:	86 36       	cpi	r24, 0x66	; 102
 602:	09 f4       	brne	.+2      	; 0x606 <UART_Printf+0xca>
 604:	c3 c0       	rjmp	.+390    	; 0x78c <UART_Printf+0x250>
 606:	87 36       	cpi	r24, 0x67	; 103
 608:	40 f4       	brcc	.+16     	; 0x61a <UART_Printf+0xde>
 60a:	83 36       	cpi	r24, 0x63	; 99
 60c:	81 f0       	breq	.+32     	; 0x62e <UART_Printf+0xf2>
 60e:	84 36       	cpi	r24, 0x64	; 100
 610:	b9 f0       	breq	.+46     	; 0x640 <UART_Printf+0x104>
 612:	82 36       	cpi	r24, 0x62	; 98
 614:	09 f0       	breq	.+2      	; 0x618 <UART_Printf+0xdc>
 616:	d7 c0       	rjmp	.+430    	; 0x7c6 <UART_Printf+0x28a>
 618:	91 c0       	rjmp	.+290    	; 0x73c <UART_Printf+0x200>
 61a:	85 37       	cpi	r24, 0x75	; 117
 61c:	09 f4       	brne	.+2      	; 0x620 <UART_Printf+0xe4>
 61e:	4c c0       	rjmp	.+152    	; 0x6b8 <UART_Printf+0x17c>
 620:	88 37       	cpi	r24, 0x78	; 120
 622:	09 f4       	brne	.+2      	; 0x626 <UART_Printf+0xea>
 624:	6a c0       	rjmp	.+212    	; 0x6fa <UART_Printf+0x1be>
 626:	83 37       	cpi	r24, 0x73	; 115
 628:	09 f0       	breq	.+2      	; 0x62c <UART_Printf+0xf0>
 62a:	cd c0       	rjmp	.+410    	; 0x7c6 <UART_Printf+0x28a>
 62c:	bb c0       	rjmp	.+374    	; 0x7a4 <UART_Printf+0x268>
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 62e:	86 01       	movw	r16, r12
 630:	0e 5f       	subi	r16, 0xFE	; 254
 632:	1f 4f       	sbci	r17, 0xFF	; 255
				UART_TxChar(ch);
 634:	d6 01       	movw	r26, r12
 636:	8c 91       	ld	r24, X
 638:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>

			switch(ch)       /* Decode the type of the argument */
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 63c:	68 01       	movw	r12, r16
				UART_TxChar(ch);
				break;
 63e:	c3 c0       	rjmp	.+390    	; 0x7c6 <UART_Printf+0x28a>

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 640:	ee 24       	eor	r14, r14
 642:	ff 24       	eor	r15, r15
 644:	68 94       	set
 646:	e1 f8       	bld	r14, 1
 648:	ec 0c       	add	r14, r12
 64a:	fd 1c       	adc	r15, r13
 64c:	f6 01       	movw	r30, r12
 64e:	c0 80       	ld	r12, Z
 650:	d1 80       	ldd	r13, Z+1	; 0x01
#if (Enable_UART_TxDecimalNumber == 1)
				if(var_num_s16<0)
 652:	dd 20       	and	r13, r13
 654:	3c f4       	brge	.+14     	; 0x664 <UART_Printf+0x128>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   var_num_s16 = -var_num_s16;
 656:	d0 94       	com	r13
 658:	c1 94       	neg	r12
 65a:	d1 08       	sbc	r13, r1
 65c:	d3 94       	inc	r13
				   UART_TxChar('-');
 65e:	8d e2       	ldi	r24, 0x2D	; 45
 660:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>
				 }
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
 664:	b6 01       	movw	r22, r12
 666:	88 27       	eor	r24, r24
 668:	77 fd       	sbrc	r23, 7
 66a:	80 95       	com	r24
 66c:	98 2f       	mov	r25, r24
 66e:	41 2f       	mov	r20, r17
 670:	0e 94 63 01 	call	0x2c6	; 0x2c6 <UART_TxDecimalNumber>
				ch = va_arg(argp, uint16_t);
				UART_TxChar(ch);
				break;

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 674:	67 01       	movw	r12, r14
				   var_num_s16 = -var_num_s16;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
#endif
				break;
 676:	a7 c0       	rjmp	.+334    	; 0x7c6 <UART_Printf+0x28a>
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 678:	66 24       	eor	r6, r6
 67a:	77 24       	eor	r7, r7
 67c:	68 94       	set
 67e:	62 f8       	bld	r6, 2
 680:	6c 0c       	add	r6, r12
 682:	7d 1c       	adc	r7, r13
 684:	d6 01       	movw	r26, r12
 686:	cd 90       	ld	r12, X+
 688:	dd 90       	ld	r13, X+
 68a:	ed 90       	ld	r14, X+
 68c:	fc 90       	ld	r15, X
 68e:	13 97       	sbiw	r26, 0x03	; 3
#if (Enable_UART_TxDecimalNumber == 1)				
				if(var_num_s32<0)
 690:	ff 20       	and	r15, r15
 692:	5c f4       	brge	.+22     	; 0x6aa <UART_Printf+0x16e>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   var_num_s32 = -var_num_s32;
 694:	f0 94       	com	r15
 696:	e0 94       	com	r14
 698:	d0 94       	com	r13
 69a:	c0 94       	com	r12
 69c:	c1 1c       	adc	r12, r1
 69e:	d1 1c       	adc	r13, r1
 6a0:	e1 1c       	adc	r14, r1
 6a2:	f1 1c       	adc	r15, r1
				   UART_TxChar('-');
 6a4:	8d e2       	ldi	r24, 0x2D	; 45
 6a6:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>
				 }
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
 6aa:	c7 01       	movw	r24, r14
 6ac:	b6 01       	movw	r22, r12
 6ae:	41 2f       	mov	r20, r17
 6b0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
#endif
				break;
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 6b4:	63 01       	movw	r12, r6
				   var_num_s32 = -var_num_s32;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
#endif				
				break;	
 6b6:	87 c0       	rjmp	.+270    	; 0x7c6 <UART_Printf+0x28a>

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				var_num_u16 = va_arg(argp, uint16_t);
 6b8:	ee 24       	eor	r14, r14
 6ba:	ff 24       	eor	r15, r15
 6bc:	68 94       	set
 6be:	e1 f8       	bld	r14, 1
 6c0:	ec 0c       	add	r14, r12
 6c2:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 6c4:	f6 01       	movw	r30, r12
 6c6:	80 81       	ld	r24, Z
 6c8:	91 81       	ldd	r25, Z+1	; 0x01
 6ca:	bc 01       	movw	r22, r24
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	41 2f       	mov	r20, r17
 6d2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
#endif				
				break;	

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				var_num_u16 = va_arg(argp, uint16_t);
 6d6:	67 01       	movw	r12, r14
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 6d8:	76 c0       	rjmp	.+236    	; 0x7c6 <UART_Printf+0x28a>
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				var_num_u32 = va_arg(argp, uint32_t);
 6da:	ee 24       	eor	r14, r14
 6dc:	ff 24       	eor	r15, r15
 6de:	68 94       	set
 6e0:	e2 f8       	bld	r14, 2
 6e2:	ec 0c       	add	r14, r12
 6e4:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 6e6:	d6 01       	movw	r26, r12
 6e8:	6d 91       	ld	r22, X+
 6ea:	7d 91       	ld	r23, X+
 6ec:	8d 91       	ld	r24, X+
 6ee:	9c 91       	ld	r25, X
 6f0:	41 2f       	mov	r20, r17
 6f2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <UART_TxDecimalNumber>
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				var_num_u32 = va_arg(argp, uint32_t);
 6f6:	67 01       	movw	r12, r14
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;			
 6f8:	66 c0       	rjmp	.+204    	; 0x7c6 <UART_Printf+0x28a>

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u16 = va_arg(argp, uint16_t);
 6fa:	ee 24       	eor	r14, r14
 6fc:	ff 24       	eor	r15, r15
 6fe:	68 94       	set
 700:	e1 f8       	bld	r14, 1
 702:	ec 0c       	add	r14, r12
 704:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxHexNumber == 1)				
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 706:	f6 01       	movw	r30, r12
 708:	80 81       	ld	r24, Z
 70a:	91 81       	ldd	r25, Z+1	; 0x01
 70c:	bc 01       	movw	r22, r24
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	41 2f       	mov	r20, r17
 714:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_TxHexNumber>
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;			

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u16 = va_arg(argp, uint16_t);
 718:	67 01       	movw	r12, r14
#if (Enable_UART_TxHexNumber == 1)				
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 71a:	55 c0       	rjmp	.+170    	; 0x7c6 <UART_Printf+0x28a>

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u32 = va_arg(argp, uint32_t);
 71c:	ee 24       	eor	r14, r14
 71e:	ff 24       	eor	r15, r15
 720:	68 94       	set
 722:	e2 f8       	bld	r14, 2
 724:	ec 0c       	add	r14, r12
 726:	fd 1c       	adc	r15, r13
#if (Enable_UART_TxHexNumber == 1)						
				UART_TxHexNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 728:	d6 01       	movw	r26, r12
 72a:	6d 91       	ld	r22, X+
 72c:	7d 91       	ld	r23, X+
 72e:	8d 91       	ld	r24, X+
 730:	9c 91       	ld	r25, X
 732:	41 2f       	mov	r20, r17
 734:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_TxHexNumber>
				UART_TxHexNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u32 = va_arg(argp, uint32_t);
 738:	67 01       	movw	r12, r14
#if (Enable_UART_TxHexNumber == 1)						
				UART_TxHexNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 73a:	45 c0       	rjmp	.+138    	; 0x7c6 <UART_Printf+0x28a>

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
 73c:	ee 24       	eor	r14, r14
 73e:	ff 24       	eor	r15, r15
 740:	68 94       	set
 742:	e1 f8       	bld	r14, 1
 744:	ec 0c       	add	r14, r12
 746:	fd 1c       	adc	r15, r13
 748:	f6 01       	movw	r30, r12
 74a:	80 81       	ld	r24, Z
 74c:	91 81       	ldd	r25, Z+1	; 0x01
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 74e:	1f 3f       	cpi	r17, 0xFF	; 255
 750:	09 f4       	brne	.+2      	; 0x754 <UART_Printf+0x218>
				   var_numOfDigitsToTransmit_u8 = 16;
 752:	15 2d       	mov	r17, r5
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 754:	bc 01       	movw	r22, r24
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	41 2f       	mov	r20, r17
 75c:	0e 94 27 02 	call	0x44e	; 0x44e <UART_TxBinaryNumber>
#endif				
				break;

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u16 = va_arg(argp, uint16_t);
 760:	67 01       	movw	r12, r14
#if (Enable_UART_TxBinaryNumber == 1)						
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;
 762:	31 c0       	rjmp	.+98     	; 0x7c6 <UART_Printf+0x28a>

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u32 = va_arg(argp, uint32_t);
 764:	ee 24       	eor	r14, r14
 766:	ff 24       	eor	r15, r15
 768:	68 94       	set
 76a:	e2 f8       	bld	r14, 2
 76c:	ec 0c       	add	r14, r12
 76e:	fd 1c       	adc	r15, r13
 770:	d6 01       	movw	r26, r12
 772:	6d 91       	ld	r22, X+
 774:	7d 91       	ld	r23, X+
 776:	8d 91       	ld	r24, X+
 778:	9c 91       	ld	r25, X
 77a:	13 97       	sbiw	r26, 0x03	; 3
#if (Enable_UART_TxBinaryNumber == 1)				
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 77c:	1f 3f       	cpi	r17, 0xFF	; 255
 77e:	09 f4       	brne	.+2      	; 0x782 <UART_Printf+0x246>
				   var_numOfDigitsToTransmit_u8 = 16;				
 780:	15 2d       	mov	r17, r5
				UART_TxBinaryNumber(var_num_u32,var_numOfDigitsToTransmit_u8);	
 782:	41 2f       	mov	r20, r17
 784:	0e 94 27 02 	call	0x44e	; 0x44e <UART_TxBinaryNumber>
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u32 = va_arg(argp, uint32_t);
 788:	67 01       	movw	r12, r14
#if (Enable_UART_TxBinaryNumber == 1)				
				if(var_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   var_numOfDigitsToTransmit_u8 = 16;				
				UART_TxBinaryNumber(var_num_u32,var_numOfDigitsToTransmit_u8);	
#endif				
				break;
 78a:	1d c0       	rjmp	.+58     	; 0x7c6 <UART_Printf+0x28a>

			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
				var_floatNum_f32 = va_arg(argp, double);
 78c:	86 01       	movw	r16, r12
 78e:	0c 5f       	subi	r16, 0xFC	; 252
 790:	1f 4f       	sbci	r17, 0xFF	; 255
#if (Enable_UART_TxFloatNumber == 1)				
				UART_TxFloatNumber(var_floatNum_f32);
 792:	f6 01       	movw	r30, r12
 794:	60 81       	ld	r22, Z
 796:	71 81       	ldd	r23, Z+1	; 0x01
 798:	82 81       	ldd	r24, Z+2	; 0x02
 79a:	93 81       	ldd	r25, Z+3	; 0x03
 79c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <UART_TxFloatNumber>
#endif				
				break;

			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
				var_floatNum_f32 = va_arg(argp, double);
 7a0:	68 01       	movw	r12, r16
#if (Enable_UART_TxFloatNumber == 1)				
				UART_TxFloatNumber(var_floatNum_f32);
#endif
				break;
 7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <UART_Printf+0x28a>


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
 7a4:	f6 01       	movw	r30, r12
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	c8 0e       	add	r12, r24
 7ac:	d9 1e       	adc	r13, r25
#if (Enable_UART_TxString == 1)
				UART_TxString(str);
 7ae:	80 81       	ld	r24, Z
 7b0:	91 81       	ldd	r25, Z+1	; 0x01
 7b2:	0e 94 40 01 	call	0x280	; 0x280 <UART_TxString>
#endif				
				break;
 7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <UART_Printf+0x28a>

			case '%':
				UART_TxChar('%');
 7b8:	85 e2       	ldi	r24, 0x25	; 37
 7ba:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>
				break;
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <UART_Printf+0x28a>
			}
		}
		else
		{
			/* As '%' is not detected transmit the char passed */
			UART_TxChar(ch);
 7c0:	0e 94 38 01 	call	0x270	; 0x270 <UART_TxChar>
 7c4:	58 01       	movw	r10, r16
	uint8_t var_numOfDigitsToTransmit_u8;

	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 7c6:	85 01       	movw	r16, r10
 7c8:	0f 5f       	subi	r16, 0xFF	; 255
 7ca:	1f 4f       	sbci	r17, 0xFF	; 255
 7cc:	d5 01       	movw	r26, r10
 7ce:	11 96       	adiw	r26, 0x01	; 1
 7d0:	8c 91       	ld	r24, X
 7d2:	11 97       	sbiw	r26, 0x01	; 1
 7d4:	88 23       	and	r24, r24
 7d6:	09 f0       	breq	.+2      	; 0x7da <UART_Printf+0x29e>
 7d8:	d8 ce       	rjmp	.-592    	; 0x58a <UART_Printf+0x4e>
			UART_TxChar(ch);
		}
	}

	va_end(argp);
}
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	1f 91       	pop	r17
 7e0:	0f 91       	pop	r16
 7e2:	ff 90       	pop	r15
 7e4:	ef 90       	pop	r14
 7e6:	df 90       	pop	r13
 7e8:	cf 90       	pop	r12
 7ea:	bf 90       	pop	r11
 7ec:	af 90       	pop	r10
 7ee:	9f 90       	pop	r9
 7f0:	8f 90       	pop	r8
 7f2:	7f 90       	pop	r7
 7f4:	6f 90       	pop	r6
 7f6:	5f 90       	pop	r5
 7f8:	08 95       	ret

000007fa <__subsf3>:
 7fa:	50 58       	subi	r21, 0x80	; 128

000007fc <__addsf3>:
 7fc:	bb 27       	eor	r27, r27
 7fe:	aa 27       	eor	r26, r26
 800:	0e d0       	rcall	.+28     	; 0x81e <__addsf3x>
 802:	e0 c0       	rjmp	.+448    	; 0x9c4 <__fp_round>
 804:	d1 d0       	rcall	.+418    	; 0x9a8 <__fp_pscA>
 806:	30 f0       	brcs	.+12     	; 0x814 <__addsf3+0x18>
 808:	d6 d0       	rcall	.+428    	; 0x9b6 <__fp_pscB>
 80a:	20 f0       	brcs	.+8      	; 0x814 <__addsf3+0x18>
 80c:	31 f4       	brne	.+12     	; 0x81a <__addsf3+0x1e>
 80e:	9f 3f       	cpi	r25, 0xFF	; 255
 810:	11 f4       	brne	.+4      	; 0x816 <__addsf3+0x1a>
 812:	1e f4       	brtc	.+6      	; 0x81a <__addsf3+0x1e>
 814:	c6 c0       	rjmp	.+396    	; 0x9a2 <__fp_nan>
 816:	0e f4       	brtc	.+2      	; 0x81a <__addsf3+0x1e>
 818:	e0 95       	com	r30
 81a:	e7 fb       	bst	r30, 7
 81c:	bc c0       	rjmp	.+376    	; 0x996 <__fp_inf>

0000081e <__addsf3x>:
 81e:	e9 2f       	mov	r30, r25
 820:	e2 d0       	rcall	.+452    	; 0x9e6 <__fp_split3>
 822:	80 f3       	brcs	.-32     	; 0x804 <__addsf3+0x8>
 824:	ba 17       	cp	r27, r26
 826:	62 07       	cpc	r22, r18
 828:	73 07       	cpc	r23, r19
 82a:	84 07       	cpc	r24, r20
 82c:	95 07       	cpc	r25, r21
 82e:	18 f0       	brcs	.+6      	; 0x836 <__addsf3x+0x18>
 830:	71 f4       	brne	.+28     	; 0x84e <__addsf3x+0x30>
 832:	9e f5       	brtc	.+102    	; 0x89a <__addsf3x+0x7c>
 834:	fa c0       	rjmp	.+500    	; 0xa2a <__fp_zero>
 836:	0e f4       	brtc	.+2      	; 0x83a <__addsf3x+0x1c>
 838:	e0 95       	com	r30
 83a:	0b 2e       	mov	r0, r27
 83c:	ba 2f       	mov	r27, r26
 83e:	a0 2d       	mov	r26, r0
 840:	0b 01       	movw	r0, r22
 842:	b9 01       	movw	r22, r18
 844:	90 01       	movw	r18, r0
 846:	0c 01       	movw	r0, r24
 848:	ca 01       	movw	r24, r20
 84a:	a0 01       	movw	r20, r0
 84c:	11 24       	eor	r1, r1
 84e:	ff 27       	eor	r31, r31
 850:	59 1b       	sub	r21, r25
 852:	99 f0       	breq	.+38     	; 0x87a <__addsf3x+0x5c>
 854:	59 3f       	cpi	r21, 0xF9	; 249
 856:	50 f4       	brcc	.+20     	; 0x86c <__addsf3x+0x4e>
 858:	50 3e       	cpi	r21, 0xE0	; 224
 85a:	68 f1       	brcs	.+90     	; 0x8b6 <__addsf3x+0x98>
 85c:	1a 16       	cp	r1, r26
 85e:	f0 40       	sbci	r31, 0x00	; 0
 860:	a2 2f       	mov	r26, r18
 862:	23 2f       	mov	r18, r19
 864:	34 2f       	mov	r19, r20
 866:	44 27       	eor	r20, r20
 868:	58 5f       	subi	r21, 0xF8	; 248
 86a:	f3 cf       	rjmp	.-26     	; 0x852 <__addsf3x+0x34>
 86c:	46 95       	lsr	r20
 86e:	37 95       	ror	r19
 870:	27 95       	ror	r18
 872:	a7 95       	ror	r26
 874:	f0 40       	sbci	r31, 0x00	; 0
 876:	53 95       	inc	r21
 878:	c9 f7       	brne	.-14     	; 0x86c <__addsf3x+0x4e>
 87a:	7e f4       	brtc	.+30     	; 0x89a <__addsf3x+0x7c>
 87c:	1f 16       	cp	r1, r31
 87e:	ba 0b       	sbc	r27, r26
 880:	62 0b       	sbc	r22, r18
 882:	73 0b       	sbc	r23, r19
 884:	84 0b       	sbc	r24, r20
 886:	ba f0       	brmi	.+46     	; 0x8b6 <__addsf3x+0x98>
 888:	91 50       	subi	r25, 0x01	; 1
 88a:	a1 f0       	breq	.+40     	; 0x8b4 <__addsf3x+0x96>
 88c:	ff 0f       	add	r31, r31
 88e:	bb 1f       	adc	r27, r27
 890:	66 1f       	adc	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	c2 f7       	brpl	.-16     	; 0x888 <__addsf3x+0x6a>
 898:	0e c0       	rjmp	.+28     	; 0x8b6 <__addsf3x+0x98>
 89a:	ba 0f       	add	r27, r26
 89c:	62 1f       	adc	r22, r18
 89e:	73 1f       	adc	r23, r19
 8a0:	84 1f       	adc	r24, r20
 8a2:	48 f4       	brcc	.+18     	; 0x8b6 <__addsf3x+0x98>
 8a4:	87 95       	ror	r24
 8a6:	77 95       	ror	r23
 8a8:	67 95       	ror	r22
 8aa:	b7 95       	ror	r27
 8ac:	f7 95       	ror	r31
 8ae:	9e 3f       	cpi	r25, 0xFE	; 254
 8b0:	08 f0       	brcs	.+2      	; 0x8b4 <__addsf3x+0x96>
 8b2:	b3 cf       	rjmp	.-154    	; 0x81a <__addsf3+0x1e>
 8b4:	93 95       	inc	r25
 8b6:	88 0f       	add	r24, r24
 8b8:	08 f0       	brcs	.+2      	; 0x8bc <__addsf3x+0x9e>
 8ba:	99 27       	eor	r25, r25
 8bc:	ee 0f       	add	r30, r30
 8be:	97 95       	ror	r25
 8c0:	87 95       	ror	r24
 8c2:	08 95       	ret

000008c4 <__fixunssfsi>:
 8c4:	98 d0       	rcall	.+304    	; 0x9f6 <__fp_splitA>
 8c6:	88 f0       	brcs	.+34     	; 0x8ea <__fixunssfsi+0x26>
 8c8:	9f 57       	subi	r25, 0x7F	; 127
 8ca:	90 f0       	brcs	.+36     	; 0x8f0 <__fixunssfsi+0x2c>
 8cc:	b9 2f       	mov	r27, r25
 8ce:	99 27       	eor	r25, r25
 8d0:	b7 51       	subi	r27, 0x17	; 23
 8d2:	a0 f0       	brcs	.+40     	; 0x8fc <__fixunssfsi+0x38>
 8d4:	d1 f0       	breq	.+52     	; 0x90a <__stack+0xb>
 8d6:	66 0f       	add	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	1a f0       	brmi	.+6      	; 0x8e6 <__fixunssfsi+0x22>
 8e0:	ba 95       	dec	r27
 8e2:	c9 f7       	brne	.-14     	; 0x8d6 <__fixunssfsi+0x12>
 8e4:	12 c0       	rjmp	.+36     	; 0x90a <__stack+0xb>
 8e6:	b1 30       	cpi	r27, 0x01	; 1
 8e8:	81 f0       	breq	.+32     	; 0x90a <__stack+0xb>
 8ea:	9f d0       	rcall	.+318    	; 0xa2a <__fp_zero>
 8ec:	b1 e0       	ldi	r27, 0x01	; 1
 8ee:	08 95       	ret
 8f0:	9c c0       	rjmp	.+312    	; 0xa2a <__fp_zero>
 8f2:	67 2f       	mov	r22, r23
 8f4:	78 2f       	mov	r23, r24
 8f6:	88 27       	eor	r24, r24
 8f8:	b8 5f       	subi	r27, 0xF8	; 248
 8fa:	39 f0       	breq	.+14     	; 0x90a <__stack+0xb>
 8fc:	b9 3f       	cpi	r27, 0xF9	; 249
 8fe:	cc f3       	brlt	.-14     	; 0x8f2 <__fixunssfsi+0x2e>
 900:	86 95       	lsr	r24
 902:	77 95       	ror	r23
 904:	67 95       	ror	r22
 906:	b3 95       	inc	r27
 908:	d9 f7       	brne	.-10     	; 0x900 <__stack+0x1>
 90a:	3e f4       	brtc	.+14     	; 0x91a <__stack+0x1b>
 90c:	90 95       	com	r25
 90e:	80 95       	com	r24
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	08 95       	ret

0000091c <__floatunsisf>:
 91c:	e8 94       	clt
 91e:	09 c0       	rjmp	.+18     	; 0x932 <__floatsisf+0x12>

00000920 <__floatsisf>:
 920:	97 fb       	bst	r25, 7
 922:	3e f4       	brtc	.+14     	; 0x932 <__floatsisf+0x12>
 924:	90 95       	com	r25
 926:	80 95       	com	r24
 928:	70 95       	com	r23
 92a:	61 95       	neg	r22
 92c:	7f 4f       	sbci	r23, 0xFF	; 255
 92e:	8f 4f       	sbci	r24, 0xFF	; 255
 930:	9f 4f       	sbci	r25, 0xFF	; 255
 932:	99 23       	and	r25, r25
 934:	a9 f0       	breq	.+42     	; 0x960 <__floatsisf+0x40>
 936:	f9 2f       	mov	r31, r25
 938:	96 e9       	ldi	r25, 0x96	; 150
 93a:	bb 27       	eor	r27, r27
 93c:	93 95       	inc	r25
 93e:	f6 95       	lsr	r31
 940:	87 95       	ror	r24
 942:	77 95       	ror	r23
 944:	67 95       	ror	r22
 946:	b7 95       	ror	r27
 948:	f1 11       	cpse	r31, r1
 94a:	f8 cf       	rjmp	.-16     	; 0x93c <__floatsisf+0x1c>
 94c:	fa f4       	brpl	.+62     	; 0x98c <__floatsisf+0x6c>
 94e:	bb 0f       	add	r27, r27
 950:	11 f4       	brne	.+4      	; 0x956 <__floatsisf+0x36>
 952:	60 ff       	sbrs	r22, 0
 954:	1b c0       	rjmp	.+54     	; 0x98c <__floatsisf+0x6c>
 956:	6f 5f       	subi	r22, 0xFF	; 255
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	8f 4f       	sbci	r24, 0xFF	; 255
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	16 c0       	rjmp	.+44     	; 0x98c <__floatsisf+0x6c>
 960:	88 23       	and	r24, r24
 962:	11 f0       	breq	.+4      	; 0x968 <__floatsisf+0x48>
 964:	96 e9       	ldi	r25, 0x96	; 150
 966:	11 c0       	rjmp	.+34     	; 0x98a <__floatsisf+0x6a>
 968:	77 23       	and	r23, r23
 96a:	21 f0       	breq	.+8      	; 0x974 <__floatsisf+0x54>
 96c:	9e e8       	ldi	r25, 0x8E	; 142
 96e:	87 2f       	mov	r24, r23
 970:	76 2f       	mov	r23, r22
 972:	05 c0       	rjmp	.+10     	; 0x97e <__floatsisf+0x5e>
 974:	66 23       	and	r22, r22
 976:	71 f0       	breq	.+28     	; 0x994 <__floatsisf+0x74>
 978:	96 e8       	ldi	r25, 0x86	; 134
 97a:	86 2f       	mov	r24, r22
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	2a f0       	brmi	.+10     	; 0x98c <__floatsisf+0x6c>
 982:	9a 95       	dec	r25
 984:	66 0f       	add	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	88 1f       	adc	r24, r24
 98a:	da f7       	brpl	.-10     	; 0x982 <__floatsisf+0x62>
 98c:	88 0f       	add	r24, r24
 98e:	96 95       	lsr	r25
 990:	87 95       	ror	r24
 992:	97 f9       	bld	r25, 7
 994:	08 95       	ret

00000996 <__fp_inf>:
 996:	97 f9       	bld	r25, 7
 998:	9f 67       	ori	r25, 0x7F	; 127
 99a:	80 e8       	ldi	r24, 0x80	; 128
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	60 e0       	ldi	r22, 0x00	; 0
 9a0:	08 95       	ret

000009a2 <__fp_nan>:
 9a2:	9f ef       	ldi	r25, 0xFF	; 255
 9a4:	80 ec       	ldi	r24, 0xC0	; 192
 9a6:	08 95       	ret

000009a8 <__fp_pscA>:
 9a8:	00 24       	eor	r0, r0
 9aa:	0a 94       	dec	r0
 9ac:	16 16       	cp	r1, r22
 9ae:	17 06       	cpc	r1, r23
 9b0:	18 06       	cpc	r1, r24
 9b2:	09 06       	cpc	r0, r25
 9b4:	08 95       	ret

000009b6 <__fp_pscB>:
 9b6:	00 24       	eor	r0, r0
 9b8:	0a 94       	dec	r0
 9ba:	12 16       	cp	r1, r18
 9bc:	13 06       	cpc	r1, r19
 9be:	14 06       	cpc	r1, r20
 9c0:	05 06       	cpc	r0, r21
 9c2:	08 95       	ret

000009c4 <__fp_round>:
 9c4:	09 2e       	mov	r0, r25
 9c6:	03 94       	inc	r0
 9c8:	00 0c       	add	r0, r0
 9ca:	11 f4       	brne	.+4      	; 0x9d0 <__fp_round+0xc>
 9cc:	88 23       	and	r24, r24
 9ce:	52 f0       	brmi	.+20     	; 0x9e4 <__fp_round+0x20>
 9d0:	bb 0f       	add	r27, r27
 9d2:	40 f4       	brcc	.+16     	; 0x9e4 <__fp_round+0x20>
 9d4:	bf 2b       	or	r27, r31
 9d6:	11 f4       	brne	.+4      	; 0x9dc <__fp_round+0x18>
 9d8:	60 ff       	sbrs	r22, 0
 9da:	04 c0       	rjmp	.+8      	; 0x9e4 <__fp_round+0x20>
 9dc:	6f 5f       	subi	r22, 0xFF	; 255
 9de:	7f 4f       	sbci	r23, 0xFF	; 255
 9e0:	8f 4f       	sbci	r24, 0xFF	; 255
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	08 95       	ret

000009e6 <__fp_split3>:
 9e6:	57 fd       	sbrc	r21, 7
 9e8:	90 58       	subi	r25, 0x80	; 128
 9ea:	44 0f       	add	r20, r20
 9ec:	55 1f       	adc	r21, r21
 9ee:	59 f0       	breq	.+22     	; 0xa06 <__fp_splitA+0x10>
 9f0:	5f 3f       	cpi	r21, 0xFF	; 255
 9f2:	71 f0       	breq	.+28     	; 0xa10 <__fp_splitA+0x1a>
 9f4:	47 95       	ror	r20

000009f6 <__fp_splitA>:
 9f6:	88 0f       	add	r24, r24
 9f8:	97 fb       	bst	r25, 7
 9fa:	99 1f       	adc	r25, r25
 9fc:	61 f0       	breq	.+24     	; 0xa16 <__fp_splitA+0x20>
 9fe:	9f 3f       	cpi	r25, 0xFF	; 255
 a00:	79 f0       	breq	.+30     	; 0xa20 <__fp_splitA+0x2a>
 a02:	87 95       	ror	r24
 a04:	08 95       	ret
 a06:	12 16       	cp	r1, r18
 a08:	13 06       	cpc	r1, r19
 a0a:	14 06       	cpc	r1, r20
 a0c:	55 1f       	adc	r21, r21
 a0e:	f2 cf       	rjmp	.-28     	; 0x9f4 <__fp_split3+0xe>
 a10:	46 95       	lsr	r20
 a12:	f1 df       	rcall	.-30     	; 0x9f6 <__fp_splitA>
 a14:	08 c0       	rjmp	.+16     	; 0xa26 <__fp_splitA+0x30>
 a16:	16 16       	cp	r1, r22
 a18:	17 06       	cpc	r1, r23
 a1a:	18 06       	cpc	r1, r24
 a1c:	99 1f       	adc	r25, r25
 a1e:	f1 cf       	rjmp	.-30     	; 0xa02 <__fp_splitA+0xc>
 a20:	86 95       	lsr	r24
 a22:	71 05       	cpc	r23, r1
 a24:	61 05       	cpc	r22, r1
 a26:	08 94       	sec
 a28:	08 95       	ret

00000a2a <__fp_zero>:
 a2a:	e8 94       	clt

00000a2c <__fp_szero>:
 a2c:	bb 27       	eor	r27, r27
 a2e:	66 27       	eor	r22, r22
 a30:	77 27       	eor	r23, r23
 a32:	cb 01       	movw	r24, r22
 a34:	97 f9       	bld	r25, 7
 a36:	08 95       	ret

00000a38 <__mulsf3>:
 a38:	0b d0       	rcall	.+22     	; 0xa50 <__mulsf3x>
 a3a:	c4 cf       	rjmp	.-120    	; 0x9c4 <__fp_round>
 a3c:	b5 df       	rcall	.-150    	; 0x9a8 <__fp_pscA>
 a3e:	28 f0       	brcs	.+10     	; 0xa4a <__mulsf3+0x12>
 a40:	ba df       	rcall	.-140    	; 0x9b6 <__fp_pscB>
 a42:	18 f0       	brcs	.+6      	; 0xa4a <__mulsf3+0x12>
 a44:	95 23       	and	r25, r21
 a46:	09 f0       	breq	.+2      	; 0xa4a <__mulsf3+0x12>
 a48:	a6 cf       	rjmp	.-180    	; 0x996 <__fp_inf>
 a4a:	ab cf       	rjmp	.-170    	; 0x9a2 <__fp_nan>
 a4c:	11 24       	eor	r1, r1
 a4e:	ee cf       	rjmp	.-36     	; 0xa2c <__fp_szero>

00000a50 <__mulsf3x>:
 a50:	ca df       	rcall	.-108    	; 0x9e6 <__fp_split3>
 a52:	a0 f3       	brcs	.-24     	; 0xa3c <__mulsf3+0x4>

00000a54 <__mulsf3_pse>:
 a54:	95 9f       	mul	r25, r21
 a56:	d1 f3       	breq	.-12     	; 0xa4c <__mulsf3+0x14>
 a58:	95 0f       	add	r25, r21
 a5a:	50 e0       	ldi	r21, 0x00	; 0
 a5c:	55 1f       	adc	r21, r21
 a5e:	62 9f       	mul	r22, r18
 a60:	f0 01       	movw	r30, r0
 a62:	72 9f       	mul	r23, r18
 a64:	bb 27       	eor	r27, r27
 a66:	f0 0d       	add	r31, r0
 a68:	b1 1d       	adc	r27, r1
 a6a:	63 9f       	mul	r22, r19
 a6c:	aa 27       	eor	r26, r26
 a6e:	f0 0d       	add	r31, r0
 a70:	b1 1d       	adc	r27, r1
 a72:	aa 1f       	adc	r26, r26
 a74:	64 9f       	mul	r22, r20
 a76:	66 27       	eor	r22, r22
 a78:	b0 0d       	add	r27, r0
 a7a:	a1 1d       	adc	r26, r1
 a7c:	66 1f       	adc	r22, r22
 a7e:	82 9f       	mul	r24, r18
 a80:	22 27       	eor	r18, r18
 a82:	b0 0d       	add	r27, r0
 a84:	a1 1d       	adc	r26, r1
 a86:	62 1f       	adc	r22, r18
 a88:	73 9f       	mul	r23, r19
 a8a:	b0 0d       	add	r27, r0
 a8c:	a1 1d       	adc	r26, r1
 a8e:	62 1f       	adc	r22, r18
 a90:	83 9f       	mul	r24, r19
 a92:	a0 0d       	add	r26, r0
 a94:	61 1d       	adc	r22, r1
 a96:	22 1f       	adc	r18, r18
 a98:	74 9f       	mul	r23, r20
 a9a:	33 27       	eor	r19, r19
 a9c:	a0 0d       	add	r26, r0
 a9e:	61 1d       	adc	r22, r1
 aa0:	23 1f       	adc	r18, r19
 aa2:	84 9f       	mul	r24, r20
 aa4:	60 0d       	add	r22, r0
 aa6:	21 1d       	adc	r18, r1
 aa8:	82 2f       	mov	r24, r18
 aaa:	76 2f       	mov	r23, r22
 aac:	6a 2f       	mov	r22, r26
 aae:	11 24       	eor	r1, r1
 ab0:	9f 57       	subi	r25, 0x7F	; 127
 ab2:	50 40       	sbci	r21, 0x00	; 0
 ab4:	8a f0       	brmi	.+34     	; 0xad8 <__mulsf3_pse+0x84>
 ab6:	e1 f0       	breq	.+56     	; 0xaf0 <__mulsf3_pse+0x9c>
 ab8:	88 23       	and	r24, r24
 aba:	4a f0       	brmi	.+18     	; 0xace <__mulsf3_pse+0x7a>
 abc:	ee 0f       	add	r30, r30
 abe:	ff 1f       	adc	r31, r31
 ac0:	bb 1f       	adc	r27, r27
 ac2:	66 1f       	adc	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	91 50       	subi	r25, 0x01	; 1
 aca:	50 40       	sbci	r21, 0x00	; 0
 acc:	a9 f7       	brne	.-22     	; 0xab8 <__mulsf3_pse+0x64>
 ace:	9e 3f       	cpi	r25, 0xFE	; 254
 ad0:	51 05       	cpc	r21, r1
 ad2:	70 f0       	brcs	.+28     	; 0xaf0 <__mulsf3_pse+0x9c>
 ad4:	60 cf       	rjmp	.-320    	; 0x996 <__fp_inf>
 ad6:	aa cf       	rjmp	.-172    	; 0xa2c <__fp_szero>
 ad8:	5f 3f       	cpi	r21, 0xFF	; 255
 ada:	ec f3       	brlt	.-6      	; 0xad6 <__mulsf3_pse+0x82>
 adc:	98 3e       	cpi	r25, 0xE8	; 232
 ade:	dc f3       	brlt	.-10     	; 0xad6 <__mulsf3_pse+0x82>
 ae0:	86 95       	lsr	r24
 ae2:	77 95       	ror	r23
 ae4:	67 95       	ror	r22
 ae6:	b7 95       	ror	r27
 ae8:	f7 95       	ror	r31
 aea:	e7 95       	ror	r30
 aec:	9f 5f       	subi	r25, 0xFF	; 255
 aee:	c1 f7       	brne	.-16     	; 0xae0 <__mulsf3_pse+0x8c>
 af0:	fe 2b       	or	r31, r30
 af2:	88 0f       	add	r24, r24
 af4:	91 1d       	adc	r25, r1
 af6:	96 95       	lsr	r25
 af8:	87 95       	ror	r24
 afa:	97 f9       	bld	r25, 7
 afc:	08 95       	ret

00000afe <__mulsi3>:
 afe:	62 9f       	mul	r22, r18
 b00:	d0 01       	movw	r26, r0
 b02:	73 9f       	mul	r23, r19
 b04:	f0 01       	movw	r30, r0
 b06:	82 9f       	mul	r24, r18
 b08:	e0 0d       	add	r30, r0
 b0a:	f1 1d       	adc	r31, r1
 b0c:	64 9f       	mul	r22, r20
 b0e:	e0 0d       	add	r30, r0
 b10:	f1 1d       	adc	r31, r1
 b12:	92 9f       	mul	r25, r18
 b14:	f0 0d       	add	r31, r0
 b16:	83 9f       	mul	r24, r19
 b18:	f0 0d       	add	r31, r0
 b1a:	74 9f       	mul	r23, r20
 b1c:	f0 0d       	add	r31, r0
 b1e:	65 9f       	mul	r22, r21
 b20:	f0 0d       	add	r31, r0
 b22:	99 27       	eor	r25, r25
 b24:	72 9f       	mul	r23, r18
 b26:	b0 0d       	add	r27, r0
 b28:	e1 1d       	adc	r30, r1
 b2a:	f9 1f       	adc	r31, r25
 b2c:	63 9f       	mul	r22, r19
 b2e:	b0 0d       	add	r27, r0
 b30:	e1 1d       	adc	r30, r1
 b32:	f9 1f       	adc	r31, r25
 b34:	bd 01       	movw	r22, r26
 b36:	cf 01       	movw	r24, r30
 b38:	11 24       	eor	r1, r1
 b3a:	08 95       	ret

00000b3c <__udivmodsi4>:
 b3c:	a1 e2       	ldi	r26, 0x21	; 33
 b3e:	1a 2e       	mov	r1, r26
 b40:	aa 1b       	sub	r26, r26
 b42:	bb 1b       	sub	r27, r27
 b44:	fd 01       	movw	r30, r26
 b46:	0d c0       	rjmp	.+26     	; 0xb62 <__udivmodsi4_ep>

00000b48 <__udivmodsi4_loop>:
 b48:	aa 1f       	adc	r26, r26
 b4a:	bb 1f       	adc	r27, r27
 b4c:	ee 1f       	adc	r30, r30
 b4e:	ff 1f       	adc	r31, r31
 b50:	a2 17       	cp	r26, r18
 b52:	b3 07       	cpc	r27, r19
 b54:	e4 07       	cpc	r30, r20
 b56:	f5 07       	cpc	r31, r21
 b58:	20 f0       	brcs	.+8      	; 0xb62 <__udivmodsi4_ep>
 b5a:	a2 1b       	sub	r26, r18
 b5c:	b3 0b       	sbc	r27, r19
 b5e:	e4 0b       	sbc	r30, r20
 b60:	f5 0b       	sbc	r31, r21

00000b62 <__udivmodsi4_ep>:
 b62:	66 1f       	adc	r22, r22
 b64:	77 1f       	adc	r23, r23
 b66:	88 1f       	adc	r24, r24
 b68:	99 1f       	adc	r25, r25
 b6a:	1a 94       	dec	r1
 b6c:	69 f7       	brne	.-38     	; 0xb48 <__udivmodsi4_loop>
 b6e:	60 95       	com	r22
 b70:	70 95       	com	r23
 b72:	80 95       	com	r24
 b74:	90 95       	com	r25
 b76:	9b 01       	movw	r18, r22
 b78:	ac 01       	movw	r20, r24
 b7a:	bd 01       	movw	r22, r26
 b7c:	cf 01       	movw	r24, r30
 b7e:	08 95       	ret

00000b80 <_exit>:
 b80:	f8 94       	cli

00000b82 <__stop_program>:
 b82:	ff cf       	rjmp	.-2      	; 0xb82 <__stop_program>
